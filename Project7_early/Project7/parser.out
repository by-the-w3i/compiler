Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    WHITESPACE
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> <empty>
Rule 4     statement -> expr ;
Rule 5     statement -> declaration ;
Rule 6     statement -> block
Rule 7     statement -> if_block
Rule 8     statement -> while_loop
Rule 9     statement -> break ;
Rule 10    statement -> return_statement ;
Rule 11    statement -> function_def
Rule 12    statement -> ;
Rule 13    block -> OPEN_BLOCK statements CLOSE_BLOCK
Rule 14    if_block -> COMMAND_IF ( expr ) statement
Rule 15    if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement
Rule 16    break -> COMMAND_BREAK
Rule 17    while_loop -> COMMAND_WHILE ( expr ) statement
Rule 18    declaration -> TYPE ID
Rule 19    declaration -> TYPE ID = expr
Rule 20    declaration -> ARRAY_TYPE ( TYPE ) ID
Rule 21    declaration -> ARRAY_TYPE ( TYPE ) ID = expr
Rule 22    declaration -> STRING_TYPE ID
Rule 23    declaration -> STRING_TYPE ID = expr
Rule 24    all_type -> TYPE
Rule 25    all_type -> STRING_TYPE
Rule 26    all_type -> ARRAY_TYPE ( TYPE )
Rule 27    return_statement -> FUNC_RETURN expr
Rule 28    function_def -> FUNC_DEFINE all_type ID ( parameters ) block
Rule 29    function_def -> FUNC_DEFINE all_type ID ( ) block
Rule 30    parameters -> parameters , parameter
Rule 31    parameters -> parameter
Rule 32    parameter -> all_type ID
Rule 33    expr -> [ elements ]
Rule 34    expr -> [ ]
Rule 35    expr -> STRING_LITERAL
Rule 36    elements -> expr
Rule 37    elements -> elements , expr
Rule 38    expr -> expr AR_METHOD_SIZE ( )
Rule 39    expr -> expr AR_METHOD_SIZE ( expr )
Rule 40    expr -> expr AR_METHOD_RESIZE ( arguments )
Rule 41    expr -> variable [ expr ]
Rule 42    expr -> variable [ expr ] = expr
Rule 43    expr -> expr + expr
Rule 44    expr -> expr - expr
Rule 45    expr -> expr * expr
Rule 46    expr -> expr / expr
Rule 47    expr -> expr ASSIGN_ADD expr
Rule 48    expr -> expr ASSIGN_SUB expr
Rule 49    expr -> expr ASSIGN_MULT expr
Rule 50    expr -> expr ASSIGN_DIV expr
Rule 51    expr -> ( expr )
Rule 52    expr -> expr COMP_EQU expr
Rule 53    expr -> expr COMP_NEQU expr
Rule 54    expr -> expr < expr
Rule 55    expr -> expr COMP_LTE expr
Rule 56    expr -> expr > expr
Rule 57    expr -> expr COMP_GTE expr
Rule 58    expr -> expr BOOL_AND expr
Rule 59    expr -> expr BOOL_OR expr
Rule 60    expr -> ! expr
Rule 61    expr -> COMMAND_PRINT ( arguments )
Rule 62    arguments -> expr
Rule 63    arguments -> arguments , expr
Rule 64    expr -> COMMAND_RANDOM ( expr )
Rule 65    expr -> VAL_LITERAL
Rule 66    expr -> - VAL_LITERAL
Rule 67    expr -> CHAR_LITERAL
Rule 68    expr -> variable
Rule 69    expr -> - variable
Rule 70    expr -> variable = expr
Rule 71    variable -> ID

Terminals, with rules where they appear

!                    : 60
(                    : 14 15 17 20 21 26 28 29 38 39 40 51 61 64
)                    : 14 15 17 20 21 26 28 29 38 39 40 51 61 64
*                    : 45
+                    : 43
,                    : 30 37 63
-                    : 44 66 69
/                    : 46
;                    : 4 5 9 10 12
<                    : 54
=                    : 19 21 23 42 70
>                    : 56
ARRAY_TYPE           : 20 21 26
AR_METHOD_RESIZE     : 40
AR_METHOD_SIZE       : 38 39
ASSIGN_ADD           : 47
ASSIGN_DIV           : 50
ASSIGN_MULT          : 49
ASSIGN_SUB           : 48
BOOL_AND             : 58
BOOL_OR              : 59
CHAR_LITERAL         : 67
CLOSE_BLOCK          : 13
COMMAND_BREAK        : 16
COMMAND_ELSE         : 15
COMMAND_IF           : 14 15
COMMAND_PRINT        : 61
COMMAND_RANDOM       : 64
COMMAND_WHILE        : 17
COMMENT              : 
COMP_EQU             : 52
COMP_GTE             : 57
COMP_LTE             : 55
COMP_NEQU            : 53
FUNC_DEFINE          : 28 29
FUNC_RETURN          : 27
ID                   : 18 19 20 21 22 23 28 29 32 71
OPEN_BLOCK           : 13
STRING_LITERAL       : 35
STRING_TYPE          : 22 23 25
TYPE                 : 18 19 20 21 24 26
VAL_LITERAL          : 65 66
WHITESPACE           : 
[                    : 33 34 41 42
]                    : 33 34 41 42
error                : 

Nonterminals, with rules where they appear

all_type             : 28 29 32
arguments            : 40 61 63
block                : 6 28 29
break                : 9
declaration          : 5
elements             : 33 37
expr                 : 4 14 15 17 19 21 23 27 36 37 38 39 39 40 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 62 63 64 70
function_def         : 11
if_block             : 7
parameter            : 30 31
parameters           : 28 30
program              : 0
return_statement     : 10
statement            : 2 14 15 15 17
statements           : 1 2 13
variable             : 41 42 68 69 70
while_loop           : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> .

    ;               reduce using rule 3 (statements -> .)
    [               reduce using rule 3 (statements -> .)
    STRING_LITERAL  reduce using rule 3 (statements -> .)
    (               reduce using rule 3 (statements -> .)
    !               reduce using rule 3 (statements -> .)
    COMMAND_PRINT   reduce using rule 3 (statements -> .)
    COMMAND_RANDOM  reduce using rule 3 (statements -> .)
    VAL_LITERAL     reduce using rule 3 (statements -> .)
    -               reduce using rule 3 (statements -> .)
    CHAR_LITERAL    reduce using rule 3 (statements -> .)
    TYPE            reduce using rule 3 (statements -> .)
    ARRAY_TYPE      reduce using rule 3 (statements -> .)
    STRING_TYPE     reduce using rule 3 (statements -> .)
    OPEN_BLOCK      reduce using rule 3 (statements -> .)
    COMMAND_IF      reduce using rule 3 (statements -> .)
    COMMAND_WHILE   reduce using rule 3 (statements -> .)
    COMMAND_BREAK   reduce using rule 3 (statements -> .)
    FUNC_RETURN     reduce using rule 3 (statements -> .)
    FUNC_DEFINE     reduce using rule 3 (statements -> .)
    ID              reduce using rule 3 (statements -> .)
    $end            reduce using rule 3 (statements -> .)

    program                        shift and go to state 1
    statements                     shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . return_statement ;
    (11) statement -> . function_def
    (12) statement -> . ;
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (18) declaration -> . TYPE ID
    (19) declaration -> . TYPE ID = expr
    (20) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (21) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (22) declaration -> . STRING_TYPE ID
    (23) declaration -> . STRING_TYPE ID = expr
    (13) block -> . OPEN_BLOCK statements CLOSE_BLOCK
    (14) if_block -> . COMMAND_IF ( expr ) statement
    (15) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (17) while_loop -> . COMMAND_WHILE ( expr ) statement
    (16) break -> . COMMAND_BREAK
    (27) return_statement -> . FUNC_RETURN expr
    (28) function_def -> . FUNC_DEFINE all_type ID ( parameters ) block
    (29) function_def -> . FUNC_DEFINE all_type ID ( ) block
    (71) variable -> . ID

    $end            reduce using rule 1 (program -> statements .)
    ;               shift and go to state 5
    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    TYPE            shift and go to state 23
    ARRAY_TYPE      shift and go to state 25
    STRING_TYPE     shift and go to state 26
    OPEN_BLOCK      shift and go to state 27
    COMMAND_IF      shift and go to state 28
    COMMAND_WHILE   shift and go to state 29
    COMMAND_BREAK   shift and go to state 30
    FUNC_RETURN     shift and go to state 31
    FUNC_DEFINE     shift and go to state 32
    ID              shift and go to state 24

    statement                      shift and go to state 3
    expr                           shift and go to state 4
    declaration                    shift and go to state 6
    block                          shift and go to state 7
    if_block                       shift and go to state 8
    while_loop                     shift and go to state 9
    break                          shift and go to state 10
    return_statement               shift and go to state 11
    function_def                   shift and go to state 12
    variable                       shift and go to state 16

state 3

    (2) statements -> statements statement .

    ;               reduce using rule 2 (statements -> statements statement .)
    [               reduce using rule 2 (statements -> statements statement .)
    STRING_LITERAL  reduce using rule 2 (statements -> statements statement .)
    (               reduce using rule 2 (statements -> statements statement .)
    !               reduce using rule 2 (statements -> statements statement .)
    COMMAND_PRINT   reduce using rule 2 (statements -> statements statement .)
    COMMAND_RANDOM  reduce using rule 2 (statements -> statements statement .)
    VAL_LITERAL     reduce using rule 2 (statements -> statements statement .)
    -               reduce using rule 2 (statements -> statements statement .)
    CHAR_LITERAL    reduce using rule 2 (statements -> statements statement .)
    TYPE            reduce using rule 2 (statements -> statements statement .)
    ARRAY_TYPE      reduce using rule 2 (statements -> statements statement .)
    STRING_TYPE     reduce using rule 2 (statements -> statements statement .)
    OPEN_BLOCK      reduce using rule 2 (statements -> statements statement .)
    COMMAND_IF      reduce using rule 2 (statements -> statements statement .)
    COMMAND_WHILE   reduce using rule 2 (statements -> statements statement .)
    COMMAND_BREAK   reduce using rule 2 (statements -> statements statement .)
    FUNC_RETURN     reduce using rule 2 (statements -> statements statement .)
    FUNC_DEFINE     reduce using rule 2 (statements -> statements statement .)
    ID              reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    CLOSE_BLOCK     reduce using rule 2 (statements -> statements statement .)


state 4

    (4) statement -> expr . ;
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               shift and go to state 33
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 5

    (12) statement -> ; .

    ;               reduce using rule 12 (statement -> ; .)
    [               reduce using rule 12 (statement -> ; .)
    STRING_LITERAL  reduce using rule 12 (statement -> ; .)
    (               reduce using rule 12 (statement -> ; .)
    !               reduce using rule 12 (statement -> ; .)
    COMMAND_PRINT   reduce using rule 12 (statement -> ; .)
    COMMAND_RANDOM  reduce using rule 12 (statement -> ; .)
    VAL_LITERAL     reduce using rule 12 (statement -> ; .)
    -               reduce using rule 12 (statement -> ; .)
    CHAR_LITERAL    reduce using rule 12 (statement -> ; .)
    TYPE            reduce using rule 12 (statement -> ; .)
    ARRAY_TYPE      reduce using rule 12 (statement -> ; .)
    STRING_TYPE     reduce using rule 12 (statement -> ; .)
    OPEN_BLOCK      reduce using rule 12 (statement -> ; .)
    COMMAND_IF      reduce using rule 12 (statement -> ; .)
    COMMAND_WHILE   reduce using rule 12 (statement -> ; .)
    COMMAND_BREAK   reduce using rule 12 (statement -> ; .)
    FUNC_RETURN     reduce using rule 12 (statement -> ; .)
    FUNC_DEFINE     reduce using rule 12 (statement -> ; .)
    ID              reduce using rule 12 (statement -> ; .)
    $end            reduce using rule 12 (statement -> ; .)
    CLOSE_BLOCK     reduce using rule 12 (statement -> ; .)
    COMMAND_ELSE    reduce using rule 12 (statement -> ; .)


state 6

    (5) statement -> declaration . ;

    ;               shift and go to state 52


state 7

    (6) statement -> block .

    ;               reduce using rule 6 (statement -> block .)
    [               reduce using rule 6 (statement -> block .)
    STRING_LITERAL  reduce using rule 6 (statement -> block .)
    (               reduce using rule 6 (statement -> block .)
    !               reduce using rule 6 (statement -> block .)
    COMMAND_PRINT   reduce using rule 6 (statement -> block .)
    COMMAND_RANDOM  reduce using rule 6 (statement -> block .)
    VAL_LITERAL     reduce using rule 6 (statement -> block .)
    -               reduce using rule 6 (statement -> block .)
    CHAR_LITERAL    reduce using rule 6 (statement -> block .)
    TYPE            reduce using rule 6 (statement -> block .)
    ARRAY_TYPE      reduce using rule 6 (statement -> block .)
    STRING_TYPE     reduce using rule 6 (statement -> block .)
    OPEN_BLOCK      reduce using rule 6 (statement -> block .)
    COMMAND_IF      reduce using rule 6 (statement -> block .)
    COMMAND_WHILE   reduce using rule 6 (statement -> block .)
    COMMAND_BREAK   reduce using rule 6 (statement -> block .)
    FUNC_RETURN     reduce using rule 6 (statement -> block .)
    FUNC_DEFINE     reduce using rule 6 (statement -> block .)
    ID              reduce using rule 6 (statement -> block .)
    $end            reduce using rule 6 (statement -> block .)
    CLOSE_BLOCK     reduce using rule 6 (statement -> block .)
    COMMAND_ELSE    reduce using rule 6 (statement -> block .)


state 8

    (7) statement -> if_block .

    ;               reduce using rule 7 (statement -> if_block .)
    [               reduce using rule 7 (statement -> if_block .)
    STRING_LITERAL  reduce using rule 7 (statement -> if_block .)
    (               reduce using rule 7 (statement -> if_block .)
    !               reduce using rule 7 (statement -> if_block .)
    COMMAND_PRINT   reduce using rule 7 (statement -> if_block .)
    COMMAND_RANDOM  reduce using rule 7 (statement -> if_block .)
    VAL_LITERAL     reduce using rule 7 (statement -> if_block .)
    -               reduce using rule 7 (statement -> if_block .)
    CHAR_LITERAL    reduce using rule 7 (statement -> if_block .)
    TYPE            reduce using rule 7 (statement -> if_block .)
    ARRAY_TYPE      reduce using rule 7 (statement -> if_block .)
    STRING_TYPE     reduce using rule 7 (statement -> if_block .)
    OPEN_BLOCK      reduce using rule 7 (statement -> if_block .)
    COMMAND_IF      reduce using rule 7 (statement -> if_block .)
    COMMAND_WHILE   reduce using rule 7 (statement -> if_block .)
    COMMAND_BREAK   reduce using rule 7 (statement -> if_block .)
    FUNC_RETURN     reduce using rule 7 (statement -> if_block .)
    FUNC_DEFINE     reduce using rule 7 (statement -> if_block .)
    ID              reduce using rule 7 (statement -> if_block .)
    $end            reduce using rule 7 (statement -> if_block .)
    CLOSE_BLOCK     reduce using rule 7 (statement -> if_block .)
    COMMAND_ELSE    reduce using rule 7 (statement -> if_block .)


state 9

    (8) statement -> while_loop .

    ;               reduce using rule 8 (statement -> while_loop .)
    [               reduce using rule 8 (statement -> while_loop .)
    STRING_LITERAL  reduce using rule 8 (statement -> while_loop .)
    (               reduce using rule 8 (statement -> while_loop .)
    !               reduce using rule 8 (statement -> while_loop .)
    COMMAND_PRINT   reduce using rule 8 (statement -> while_loop .)
    COMMAND_RANDOM  reduce using rule 8 (statement -> while_loop .)
    VAL_LITERAL     reduce using rule 8 (statement -> while_loop .)
    -               reduce using rule 8 (statement -> while_loop .)
    CHAR_LITERAL    reduce using rule 8 (statement -> while_loop .)
    TYPE            reduce using rule 8 (statement -> while_loop .)
    ARRAY_TYPE      reduce using rule 8 (statement -> while_loop .)
    STRING_TYPE     reduce using rule 8 (statement -> while_loop .)
    OPEN_BLOCK      reduce using rule 8 (statement -> while_loop .)
    COMMAND_IF      reduce using rule 8 (statement -> while_loop .)
    COMMAND_WHILE   reduce using rule 8 (statement -> while_loop .)
    COMMAND_BREAK   reduce using rule 8 (statement -> while_loop .)
    FUNC_RETURN     reduce using rule 8 (statement -> while_loop .)
    FUNC_DEFINE     reduce using rule 8 (statement -> while_loop .)
    ID              reduce using rule 8 (statement -> while_loop .)
    $end            reduce using rule 8 (statement -> while_loop .)
    CLOSE_BLOCK     reduce using rule 8 (statement -> while_loop .)
    COMMAND_ELSE    reduce using rule 8 (statement -> while_loop .)


state 10

    (9) statement -> break . ;

    ;               shift and go to state 53


state 11

    (10) statement -> return_statement . ;

    ;               shift and go to state 54


state 12

    (11) statement -> function_def .

    ;               reduce using rule 11 (statement -> function_def .)
    [               reduce using rule 11 (statement -> function_def .)
    STRING_LITERAL  reduce using rule 11 (statement -> function_def .)
    (               reduce using rule 11 (statement -> function_def .)
    !               reduce using rule 11 (statement -> function_def .)
    COMMAND_PRINT   reduce using rule 11 (statement -> function_def .)
    COMMAND_RANDOM  reduce using rule 11 (statement -> function_def .)
    VAL_LITERAL     reduce using rule 11 (statement -> function_def .)
    -               reduce using rule 11 (statement -> function_def .)
    CHAR_LITERAL    reduce using rule 11 (statement -> function_def .)
    TYPE            reduce using rule 11 (statement -> function_def .)
    ARRAY_TYPE      reduce using rule 11 (statement -> function_def .)
    STRING_TYPE     reduce using rule 11 (statement -> function_def .)
    OPEN_BLOCK      reduce using rule 11 (statement -> function_def .)
    COMMAND_IF      reduce using rule 11 (statement -> function_def .)
    COMMAND_WHILE   reduce using rule 11 (statement -> function_def .)
    COMMAND_BREAK   reduce using rule 11 (statement -> function_def .)
    FUNC_RETURN     reduce using rule 11 (statement -> function_def .)
    FUNC_DEFINE     reduce using rule 11 (statement -> function_def .)
    ID              reduce using rule 11 (statement -> function_def .)
    $end            reduce using rule 11 (statement -> function_def .)
    CLOSE_BLOCK     reduce using rule 11 (statement -> function_def .)
    COMMAND_ELSE    reduce using rule 11 (statement -> function_def .)


state 13

    (33) expr -> [ . elements ]
    (34) expr -> [ . ]
    (36) elements -> . expr
    (37) elements -> . elements , expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    ]               shift and go to state 56
    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    elements                       shift and go to state 55
    expr                           shift and go to state 57
    variable                       shift and go to state 16

state 14

    (35) expr -> STRING_LITERAL .

    ;               reduce using rule 35 (expr -> STRING_LITERAL .)
    AR_METHOD_SIZE  reduce using rule 35 (expr -> STRING_LITERAL .)
    AR_METHOD_RESIZE reduce using rule 35 (expr -> STRING_LITERAL .)
    +               reduce using rule 35 (expr -> STRING_LITERAL .)
    -               reduce using rule 35 (expr -> STRING_LITERAL .)
    *               reduce using rule 35 (expr -> STRING_LITERAL .)
    /               reduce using rule 35 (expr -> STRING_LITERAL .)
    ASSIGN_ADD      reduce using rule 35 (expr -> STRING_LITERAL .)
    ASSIGN_SUB      reduce using rule 35 (expr -> STRING_LITERAL .)
    ASSIGN_MULT     reduce using rule 35 (expr -> STRING_LITERAL .)
    ASSIGN_DIV      reduce using rule 35 (expr -> STRING_LITERAL .)
    COMP_EQU        reduce using rule 35 (expr -> STRING_LITERAL .)
    COMP_NEQU       reduce using rule 35 (expr -> STRING_LITERAL .)
    <               reduce using rule 35 (expr -> STRING_LITERAL .)
    COMP_LTE        reduce using rule 35 (expr -> STRING_LITERAL .)
    >               reduce using rule 35 (expr -> STRING_LITERAL .)
    COMP_GTE        reduce using rule 35 (expr -> STRING_LITERAL .)
    BOOL_AND        reduce using rule 35 (expr -> STRING_LITERAL .)
    BOOL_OR         reduce using rule 35 (expr -> STRING_LITERAL .)
    ]               reduce using rule 35 (expr -> STRING_LITERAL .)
    ,               reduce using rule 35 (expr -> STRING_LITERAL .)
    )               reduce using rule 35 (expr -> STRING_LITERAL .)


state 15

    (51) expr -> ( . expr )
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 58
    variable                       shift and go to state 16

state 16

    (41) expr -> variable . [ expr ]
    (42) expr -> variable . [ expr ] = expr
    (68) expr -> variable .
    (70) expr -> variable . = expr

    [               shift and go to state 59
    ;               reduce using rule 68 (expr -> variable .)
    AR_METHOD_SIZE  reduce using rule 68 (expr -> variable .)
    AR_METHOD_RESIZE reduce using rule 68 (expr -> variable .)
    +               reduce using rule 68 (expr -> variable .)
    -               reduce using rule 68 (expr -> variable .)
    *               reduce using rule 68 (expr -> variable .)
    /               reduce using rule 68 (expr -> variable .)
    ASSIGN_ADD      reduce using rule 68 (expr -> variable .)
    ASSIGN_SUB      reduce using rule 68 (expr -> variable .)
    ASSIGN_MULT     reduce using rule 68 (expr -> variable .)
    ASSIGN_DIV      reduce using rule 68 (expr -> variable .)
    COMP_EQU        reduce using rule 68 (expr -> variable .)
    COMP_NEQU       reduce using rule 68 (expr -> variable .)
    <               reduce using rule 68 (expr -> variable .)
    COMP_LTE        reduce using rule 68 (expr -> variable .)
    >               reduce using rule 68 (expr -> variable .)
    COMP_GTE        reduce using rule 68 (expr -> variable .)
    BOOL_AND        reduce using rule 68 (expr -> variable .)
    BOOL_OR         reduce using rule 68 (expr -> variable .)
    ]               reduce using rule 68 (expr -> variable .)
    ,               reduce using rule 68 (expr -> variable .)
    )               reduce using rule 68 (expr -> variable .)
    =               shift and go to state 60


state 17

    (66) expr -> - . VAL_LITERAL
    (69) expr -> - . variable
    (71) variable -> . ID

    VAL_LITERAL     shift and go to state 61
    ID              shift and go to state 24

    variable                       shift and go to state 62

state 18

    (60) expr -> ! . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 63
    variable                       shift and go to state 16

state 19

    (61) expr -> COMMAND_PRINT . ( arguments )

    (               shift and go to state 64


state 20

    (64) expr -> COMMAND_RANDOM . ( expr )

    (               shift and go to state 65


state 21

    (65) expr -> VAL_LITERAL .

    ;               reduce using rule 65 (expr -> VAL_LITERAL .)
    AR_METHOD_SIZE  reduce using rule 65 (expr -> VAL_LITERAL .)
    AR_METHOD_RESIZE reduce using rule 65 (expr -> VAL_LITERAL .)
    +               reduce using rule 65 (expr -> VAL_LITERAL .)
    -               reduce using rule 65 (expr -> VAL_LITERAL .)
    *               reduce using rule 65 (expr -> VAL_LITERAL .)
    /               reduce using rule 65 (expr -> VAL_LITERAL .)
    ASSIGN_ADD      reduce using rule 65 (expr -> VAL_LITERAL .)
    ASSIGN_SUB      reduce using rule 65 (expr -> VAL_LITERAL .)
    ASSIGN_MULT     reduce using rule 65 (expr -> VAL_LITERAL .)
    ASSIGN_DIV      reduce using rule 65 (expr -> VAL_LITERAL .)
    COMP_EQU        reduce using rule 65 (expr -> VAL_LITERAL .)
    COMP_NEQU       reduce using rule 65 (expr -> VAL_LITERAL .)
    <               reduce using rule 65 (expr -> VAL_LITERAL .)
    COMP_LTE        reduce using rule 65 (expr -> VAL_LITERAL .)
    >               reduce using rule 65 (expr -> VAL_LITERAL .)
    COMP_GTE        reduce using rule 65 (expr -> VAL_LITERAL .)
    BOOL_AND        reduce using rule 65 (expr -> VAL_LITERAL .)
    BOOL_OR         reduce using rule 65 (expr -> VAL_LITERAL .)
    ]               reduce using rule 65 (expr -> VAL_LITERAL .)
    ,               reduce using rule 65 (expr -> VAL_LITERAL .)
    )               reduce using rule 65 (expr -> VAL_LITERAL .)


state 22

    (67) expr -> CHAR_LITERAL .

    ;               reduce using rule 67 (expr -> CHAR_LITERAL .)
    AR_METHOD_SIZE  reduce using rule 67 (expr -> CHAR_LITERAL .)
    AR_METHOD_RESIZE reduce using rule 67 (expr -> CHAR_LITERAL .)
    +               reduce using rule 67 (expr -> CHAR_LITERAL .)
    -               reduce using rule 67 (expr -> CHAR_LITERAL .)
    *               reduce using rule 67 (expr -> CHAR_LITERAL .)
    /               reduce using rule 67 (expr -> CHAR_LITERAL .)
    ASSIGN_ADD      reduce using rule 67 (expr -> CHAR_LITERAL .)
    ASSIGN_SUB      reduce using rule 67 (expr -> CHAR_LITERAL .)
    ASSIGN_MULT     reduce using rule 67 (expr -> CHAR_LITERAL .)
    ASSIGN_DIV      reduce using rule 67 (expr -> CHAR_LITERAL .)
    COMP_EQU        reduce using rule 67 (expr -> CHAR_LITERAL .)
    COMP_NEQU       reduce using rule 67 (expr -> CHAR_LITERAL .)
    <               reduce using rule 67 (expr -> CHAR_LITERAL .)
    COMP_LTE        reduce using rule 67 (expr -> CHAR_LITERAL .)
    >               reduce using rule 67 (expr -> CHAR_LITERAL .)
    COMP_GTE        reduce using rule 67 (expr -> CHAR_LITERAL .)
    BOOL_AND        reduce using rule 67 (expr -> CHAR_LITERAL .)
    BOOL_OR         reduce using rule 67 (expr -> CHAR_LITERAL .)
    ]               reduce using rule 67 (expr -> CHAR_LITERAL .)
    ,               reduce using rule 67 (expr -> CHAR_LITERAL .)
    )               reduce using rule 67 (expr -> CHAR_LITERAL .)


state 23

    (18) declaration -> TYPE . ID
    (19) declaration -> TYPE . ID = expr

    ID              shift and go to state 66


state 24

    (71) variable -> ID .

    [               reduce using rule 71 (variable -> ID .)
    =               reduce using rule 71 (variable -> ID .)
    ;               reduce using rule 71 (variable -> ID .)
    AR_METHOD_SIZE  reduce using rule 71 (variable -> ID .)
    AR_METHOD_RESIZE reduce using rule 71 (variable -> ID .)
    +               reduce using rule 71 (variable -> ID .)
    -               reduce using rule 71 (variable -> ID .)
    *               reduce using rule 71 (variable -> ID .)
    /               reduce using rule 71 (variable -> ID .)
    ASSIGN_ADD      reduce using rule 71 (variable -> ID .)
    ASSIGN_SUB      reduce using rule 71 (variable -> ID .)
    ASSIGN_MULT     reduce using rule 71 (variable -> ID .)
    ASSIGN_DIV      reduce using rule 71 (variable -> ID .)
    COMP_EQU        reduce using rule 71 (variable -> ID .)
    COMP_NEQU       reduce using rule 71 (variable -> ID .)
    <               reduce using rule 71 (variable -> ID .)
    COMP_LTE        reduce using rule 71 (variable -> ID .)
    >               reduce using rule 71 (variable -> ID .)
    COMP_GTE        reduce using rule 71 (variable -> ID .)
    BOOL_AND        reduce using rule 71 (variable -> ID .)
    BOOL_OR         reduce using rule 71 (variable -> ID .)
    ]               reduce using rule 71 (variable -> ID .)
    ,               reduce using rule 71 (variable -> ID .)
    )               reduce using rule 71 (variable -> ID .)


state 25

    (20) declaration -> ARRAY_TYPE . ( TYPE ) ID
    (21) declaration -> ARRAY_TYPE . ( TYPE ) ID = expr

    (               shift and go to state 67


state 26

    (22) declaration -> STRING_TYPE . ID
    (23) declaration -> STRING_TYPE . ID = expr

    ID              shift and go to state 68


state 27

    (13) block -> OPEN_BLOCK . statements CLOSE_BLOCK
    (2) statements -> . statements statement
    (3) statements -> .

    CLOSE_BLOCK     reduce using rule 3 (statements -> .)
    ;               reduce using rule 3 (statements -> .)
    [               reduce using rule 3 (statements -> .)
    STRING_LITERAL  reduce using rule 3 (statements -> .)
    (               reduce using rule 3 (statements -> .)
    !               reduce using rule 3 (statements -> .)
    COMMAND_PRINT   reduce using rule 3 (statements -> .)
    COMMAND_RANDOM  reduce using rule 3 (statements -> .)
    VAL_LITERAL     reduce using rule 3 (statements -> .)
    -               reduce using rule 3 (statements -> .)
    CHAR_LITERAL    reduce using rule 3 (statements -> .)
    TYPE            reduce using rule 3 (statements -> .)
    ARRAY_TYPE      reduce using rule 3 (statements -> .)
    STRING_TYPE     reduce using rule 3 (statements -> .)
    OPEN_BLOCK      reduce using rule 3 (statements -> .)
    COMMAND_IF      reduce using rule 3 (statements -> .)
    COMMAND_WHILE   reduce using rule 3 (statements -> .)
    COMMAND_BREAK   reduce using rule 3 (statements -> .)
    FUNC_RETURN     reduce using rule 3 (statements -> .)
    FUNC_DEFINE     reduce using rule 3 (statements -> .)
    ID              reduce using rule 3 (statements -> .)

    statements                     shift and go to state 69

state 28

    (14) if_block -> COMMAND_IF . ( expr ) statement
    (15) if_block -> COMMAND_IF . ( expr ) statement COMMAND_ELSE statement

    (               shift and go to state 70


state 29

    (17) while_loop -> COMMAND_WHILE . ( expr ) statement

    (               shift and go to state 71


state 30

    (16) break -> COMMAND_BREAK .

    ;               reduce using rule 16 (break -> COMMAND_BREAK .)


state 31

    (27) return_statement -> FUNC_RETURN . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 72
    variable                       shift and go to state 16

state 32

    (28) function_def -> FUNC_DEFINE . all_type ID ( parameters ) block
    (29) function_def -> FUNC_DEFINE . all_type ID ( ) block
    (24) all_type -> . TYPE
    (25) all_type -> . STRING_TYPE
    (26) all_type -> . ARRAY_TYPE ( TYPE )

    TYPE            shift and go to state 74
    STRING_TYPE     shift and go to state 75
    ARRAY_TYPE      shift and go to state 76

    all_type                       shift and go to state 73

state 33

    (4) statement -> expr ; .

    ;               reduce using rule 4 (statement -> expr ; .)
    [               reduce using rule 4 (statement -> expr ; .)
    STRING_LITERAL  reduce using rule 4 (statement -> expr ; .)
    (               reduce using rule 4 (statement -> expr ; .)
    !               reduce using rule 4 (statement -> expr ; .)
    COMMAND_PRINT   reduce using rule 4 (statement -> expr ; .)
    COMMAND_RANDOM  reduce using rule 4 (statement -> expr ; .)
    VAL_LITERAL     reduce using rule 4 (statement -> expr ; .)
    -               reduce using rule 4 (statement -> expr ; .)
    CHAR_LITERAL    reduce using rule 4 (statement -> expr ; .)
    TYPE            reduce using rule 4 (statement -> expr ; .)
    ARRAY_TYPE      reduce using rule 4 (statement -> expr ; .)
    STRING_TYPE     reduce using rule 4 (statement -> expr ; .)
    OPEN_BLOCK      reduce using rule 4 (statement -> expr ; .)
    COMMAND_IF      reduce using rule 4 (statement -> expr ; .)
    COMMAND_WHILE   reduce using rule 4 (statement -> expr ; .)
    COMMAND_BREAK   reduce using rule 4 (statement -> expr ; .)
    FUNC_RETURN     reduce using rule 4 (statement -> expr ; .)
    FUNC_DEFINE     reduce using rule 4 (statement -> expr ; .)
    ID              reduce using rule 4 (statement -> expr ; .)
    $end            reduce using rule 4 (statement -> expr ; .)
    CLOSE_BLOCK     reduce using rule 4 (statement -> expr ; .)
    COMMAND_ELSE    reduce using rule 4 (statement -> expr ; .)


state 34

    (38) expr -> expr AR_METHOD_SIZE . ( )
    (39) expr -> expr AR_METHOD_SIZE . ( expr )

    (               shift and go to state 77


state 35

    (40) expr -> expr AR_METHOD_RESIZE . ( arguments )

    (               shift and go to state 78


state 36

    (43) expr -> expr + . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 79
    variable                       shift and go to state 16

state 37

    (44) expr -> expr - . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 80
    variable                       shift and go to state 16

state 38

    (45) expr -> expr * . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 81
    variable                       shift and go to state 16

state 39

    (46) expr -> expr / . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 82
    variable                       shift and go to state 16

state 40

    (47) expr -> expr ASSIGN_ADD . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 83
    variable                       shift and go to state 16

state 41

    (48) expr -> expr ASSIGN_SUB . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 84
    variable                       shift and go to state 16

state 42

    (49) expr -> expr ASSIGN_MULT . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 85
    variable                       shift and go to state 16

state 43

    (50) expr -> expr ASSIGN_DIV . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 86
    variable                       shift and go to state 16

state 44

    (52) expr -> expr COMP_EQU . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 87
    variable                       shift and go to state 16

state 45

    (53) expr -> expr COMP_NEQU . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 88
    variable                       shift and go to state 16

state 46

    (54) expr -> expr < . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 89
    variable                       shift and go to state 16

state 47

    (55) expr -> expr COMP_LTE . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 90
    variable                       shift and go to state 16

state 48

    (56) expr -> expr > . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 91
    variable                       shift and go to state 16

state 49

    (57) expr -> expr COMP_GTE . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 92
    variable                       shift and go to state 16

state 50

    (58) expr -> expr BOOL_AND . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 93
    variable                       shift and go to state 16

state 51

    (59) expr -> expr BOOL_OR . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 94
    variable                       shift and go to state 16

state 52

    (5) statement -> declaration ; .

    ;               reduce using rule 5 (statement -> declaration ; .)
    [               reduce using rule 5 (statement -> declaration ; .)
    STRING_LITERAL  reduce using rule 5 (statement -> declaration ; .)
    (               reduce using rule 5 (statement -> declaration ; .)
    !               reduce using rule 5 (statement -> declaration ; .)
    COMMAND_PRINT   reduce using rule 5 (statement -> declaration ; .)
    COMMAND_RANDOM  reduce using rule 5 (statement -> declaration ; .)
    VAL_LITERAL     reduce using rule 5 (statement -> declaration ; .)
    -               reduce using rule 5 (statement -> declaration ; .)
    CHAR_LITERAL    reduce using rule 5 (statement -> declaration ; .)
    TYPE            reduce using rule 5 (statement -> declaration ; .)
    ARRAY_TYPE      reduce using rule 5 (statement -> declaration ; .)
    STRING_TYPE     reduce using rule 5 (statement -> declaration ; .)
    OPEN_BLOCK      reduce using rule 5 (statement -> declaration ; .)
    COMMAND_IF      reduce using rule 5 (statement -> declaration ; .)
    COMMAND_WHILE   reduce using rule 5 (statement -> declaration ; .)
    COMMAND_BREAK   reduce using rule 5 (statement -> declaration ; .)
    FUNC_RETURN     reduce using rule 5 (statement -> declaration ; .)
    FUNC_DEFINE     reduce using rule 5 (statement -> declaration ; .)
    ID              reduce using rule 5 (statement -> declaration ; .)
    $end            reduce using rule 5 (statement -> declaration ; .)
    CLOSE_BLOCK     reduce using rule 5 (statement -> declaration ; .)
    COMMAND_ELSE    reduce using rule 5 (statement -> declaration ; .)


state 53

    (9) statement -> break ; .

    ;               reduce using rule 9 (statement -> break ; .)
    [               reduce using rule 9 (statement -> break ; .)
    STRING_LITERAL  reduce using rule 9 (statement -> break ; .)
    (               reduce using rule 9 (statement -> break ; .)
    !               reduce using rule 9 (statement -> break ; .)
    COMMAND_PRINT   reduce using rule 9 (statement -> break ; .)
    COMMAND_RANDOM  reduce using rule 9 (statement -> break ; .)
    VAL_LITERAL     reduce using rule 9 (statement -> break ; .)
    -               reduce using rule 9 (statement -> break ; .)
    CHAR_LITERAL    reduce using rule 9 (statement -> break ; .)
    TYPE            reduce using rule 9 (statement -> break ; .)
    ARRAY_TYPE      reduce using rule 9 (statement -> break ; .)
    STRING_TYPE     reduce using rule 9 (statement -> break ; .)
    OPEN_BLOCK      reduce using rule 9 (statement -> break ; .)
    COMMAND_IF      reduce using rule 9 (statement -> break ; .)
    COMMAND_WHILE   reduce using rule 9 (statement -> break ; .)
    COMMAND_BREAK   reduce using rule 9 (statement -> break ; .)
    FUNC_RETURN     reduce using rule 9 (statement -> break ; .)
    FUNC_DEFINE     reduce using rule 9 (statement -> break ; .)
    ID              reduce using rule 9 (statement -> break ; .)
    $end            reduce using rule 9 (statement -> break ; .)
    CLOSE_BLOCK     reduce using rule 9 (statement -> break ; .)
    COMMAND_ELSE    reduce using rule 9 (statement -> break ; .)


state 54

    (10) statement -> return_statement ; .

    ;               reduce using rule 10 (statement -> return_statement ; .)
    [               reduce using rule 10 (statement -> return_statement ; .)
    STRING_LITERAL  reduce using rule 10 (statement -> return_statement ; .)
    (               reduce using rule 10 (statement -> return_statement ; .)
    !               reduce using rule 10 (statement -> return_statement ; .)
    COMMAND_PRINT   reduce using rule 10 (statement -> return_statement ; .)
    COMMAND_RANDOM  reduce using rule 10 (statement -> return_statement ; .)
    VAL_LITERAL     reduce using rule 10 (statement -> return_statement ; .)
    -               reduce using rule 10 (statement -> return_statement ; .)
    CHAR_LITERAL    reduce using rule 10 (statement -> return_statement ; .)
    TYPE            reduce using rule 10 (statement -> return_statement ; .)
    ARRAY_TYPE      reduce using rule 10 (statement -> return_statement ; .)
    STRING_TYPE     reduce using rule 10 (statement -> return_statement ; .)
    OPEN_BLOCK      reduce using rule 10 (statement -> return_statement ; .)
    COMMAND_IF      reduce using rule 10 (statement -> return_statement ; .)
    COMMAND_WHILE   reduce using rule 10 (statement -> return_statement ; .)
    COMMAND_BREAK   reduce using rule 10 (statement -> return_statement ; .)
    FUNC_RETURN     reduce using rule 10 (statement -> return_statement ; .)
    FUNC_DEFINE     reduce using rule 10 (statement -> return_statement ; .)
    ID              reduce using rule 10 (statement -> return_statement ; .)
    $end            reduce using rule 10 (statement -> return_statement ; .)
    CLOSE_BLOCK     reduce using rule 10 (statement -> return_statement ; .)
    COMMAND_ELSE    reduce using rule 10 (statement -> return_statement ; .)


state 55

    (33) expr -> [ elements . ]
    (37) elements -> elements . , expr

    ]               shift and go to state 95
    ,               shift and go to state 96


state 56

    (34) expr -> [ ] .

    ;               reduce using rule 34 (expr -> [ ] .)
    AR_METHOD_SIZE  reduce using rule 34 (expr -> [ ] .)
    AR_METHOD_RESIZE reduce using rule 34 (expr -> [ ] .)
    +               reduce using rule 34 (expr -> [ ] .)
    -               reduce using rule 34 (expr -> [ ] .)
    *               reduce using rule 34 (expr -> [ ] .)
    /               reduce using rule 34 (expr -> [ ] .)
    ASSIGN_ADD      reduce using rule 34 (expr -> [ ] .)
    ASSIGN_SUB      reduce using rule 34 (expr -> [ ] .)
    ASSIGN_MULT     reduce using rule 34 (expr -> [ ] .)
    ASSIGN_DIV      reduce using rule 34 (expr -> [ ] .)
    COMP_EQU        reduce using rule 34 (expr -> [ ] .)
    COMP_NEQU       reduce using rule 34 (expr -> [ ] .)
    <               reduce using rule 34 (expr -> [ ] .)
    COMP_LTE        reduce using rule 34 (expr -> [ ] .)
    >               reduce using rule 34 (expr -> [ ] .)
    COMP_GTE        reduce using rule 34 (expr -> [ ] .)
    BOOL_AND        reduce using rule 34 (expr -> [ ] .)
    BOOL_OR         reduce using rule 34 (expr -> [ ] .)
    ]               reduce using rule 34 (expr -> [ ] .)
    ,               reduce using rule 34 (expr -> [ ] .)
    )               reduce using rule 34 (expr -> [ ] .)


state 57

    (36) elements -> expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ]               reduce using rule 36 (elements -> expr .)
    ,               reduce using rule 36 (elements -> expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 58

    (51) expr -> ( expr . )
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    )               shift and go to state 97
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 59

    (41) expr -> variable [ . expr ]
    (42) expr -> variable [ . expr ] = expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    variable                       shift and go to state 16
    expr                           shift and go to state 98

state 60

    (70) expr -> variable = . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    variable                       shift and go to state 16
    expr                           shift and go to state 99

state 61

    (66) expr -> - VAL_LITERAL .

    ;               reduce using rule 66 (expr -> - VAL_LITERAL .)
    AR_METHOD_SIZE  reduce using rule 66 (expr -> - VAL_LITERAL .)
    AR_METHOD_RESIZE reduce using rule 66 (expr -> - VAL_LITERAL .)
    +               reduce using rule 66 (expr -> - VAL_LITERAL .)
    -               reduce using rule 66 (expr -> - VAL_LITERAL .)
    *               reduce using rule 66 (expr -> - VAL_LITERAL .)
    /               reduce using rule 66 (expr -> - VAL_LITERAL .)
    ASSIGN_ADD      reduce using rule 66 (expr -> - VAL_LITERAL .)
    ASSIGN_SUB      reduce using rule 66 (expr -> - VAL_LITERAL .)
    ASSIGN_MULT     reduce using rule 66 (expr -> - VAL_LITERAL .)
    ASSIGN_DIV      reduce using rule 66 (expr -> - VAL_LITERAL .)
    COMP_EQU        reduce using rule 66 (expr -> - VAL_LITERAL .)
    COMP_NEQU       reduce using rule 66 (expr -> - VAL_LITERAL .)
    <               reduce using rule 66 (expr -> - VAL_LITERAL .)
    COMP_LTE        reduce using rule 66 (expr -> - VAL_LITERAL .)
    >               reduce using rule 66 (expr -> - VAL_LITERAL .)
    COMP_GTE        reduce using rule 66 (expr -> - VAL_LITERAL .)
    BOOL_AND        reduce using rule 66 (expr -> - VAL_LITERAL .)
    BOOL_OR         reduce using rule 66 (expr -> - VAL_LITERAL .)
    ]               reduce using rule 66 (expr -> - VAL_LITERAL .)
    ,               reduce using rule 66 (expr -> - VAL_LITERAL .)
    )               reduce using rule 66 (expr -> - VAL_LITERAL .)


state 62

    (69) expr -> - variable .

    ;               reduce using rule 69 (expr -> - variable .)
    AR_METHOD_SIZE  reduce using rule 69 (expr -> - variable .)
    AR_METHOD_RESIZE reduce using rule 69 (expr -> - variable .)
    +               reduce using rule 69 (expr -> - variable .)
    -               reduce using rule 69 (expr -> - variable .)
    *               reduce using rule 69 (expr -> - variable .)
    /               reduce using rule 69 (expr -> - variable .)
    ASSIGN_ADD      reduce using rule 69 (expr -> - variable .)
    ASSIGN_SUB      reduce using rule 69 (expr -> - variable .)
    ASSIGN_MULT     reduce using rule 69 (expr -> - variable .)
    ASSIGN_DIV      reduce using rule 69 (expr -> - variable .)
    COMP_EQU        reduce using rule 69 (expr -> - variable .)
    COMP_NEQU       reduce using rule 69 (expr -> - variable .)
    <               reduce using rule 69 (expr -> - variable .)
    COMP_LTE        reduce using rule 69 (expr -> - variable .)
    >               reduce using rule 69 (expr -> - variable .)
    COMP_GTE        reduce using rule 69 (expr -> - variable .)
    BOOL_AND        reduce using rule 69 (expr -> - variable .)
    BOOL_OR         reduce using rule 69 (expr -> - variable .)
    ]               reduce using rule 69 (expr -> - variable .)
    ,               reduce using rule 69 (expr -> - variable .)
    )               reduce using rule 69 (expr -> - variable .)


state 63

    (60) expr -> ! expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 60 (expr -> ! expr .)
    +               reduce using rule 60 (expr -> ! expr .)
    -               reduce using rule 60 (expr -> ! expr .)
    *               reduce using rule 60 (expr -> ! expr .)
    /               reduce using rule 60 (expr -> ! expr .)
    ASSIGN_ADD      reduce using rule 60 (expr -> ! expr .)
    ASSIGN_SUB      reduce using rule 60 (expr -> ! expr .)
    ASSIGN_MULT     reduce using rule 60 (expr -> ! expr .)
    ASSIGN_DIV      reduce using rule 60 (expr -> ! expr .)
    COMP_EQU        reduce using rule 60 (expr -> ! expr .)
    COMP_NEQU       reduce using rule 60 (expr -> ! expr .)
    <               reduce using rule 60 (expr -> ! expr .)
    COMP_LTE        reduce using rule 60 (expr -> ! expr .)
    >               reduce using rule 60 (expr -> ! expr .)
    COMP_GTE        reduce using rule 60 (expr -> ! expr .)
    BOOL_AND        reduce using rule 60 (expr -> ! expr .)
    BOOL_OR         reduce using rule 60 (expr -> ! expr .)
    ]               reduce using rule 60 (expr -> ! expr .)
    ,               reduce using rule 60 (expr -> ! expr .)
    )               reduce using rule 60 (expr -> ! expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35

  ! AR_METHOD_SIZE  [ reduce using rule 60 (expr -> ! expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 60 (expr -> ! expr .) ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! ASSIGN_ADD      [ shift and go to state 40 ]
  ! ASSIGN_SUB      [ shift and go to state 41 ]
  ! ASSIGN_MULT     [ shift and go to state 42 ]
  ! ASSIGN_DIV      [ shift and go to state 43 ]
  ! COMP_EQU        [ shift and go to state 44 ]
  ! COMP_NEQU       [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]
  ! COMP_LTE        [ shift and go to state 47 ]
  ! >               [ shift and go to state 48 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 64

    (61) expr -> COMMAND_PRINT ( . arguments )
    (62) arguments -> . expr
    (63) arguments -> . arguments , expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    arguments                      shift and go to state 100
    expr                           shift and go to state 101
    variable                       shift and go to state 16

state 65

    (64) expr -> COMMAND_RANDOM ( . expr )
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 102
    variable                       shift and go to state 16

state 66

    (18) declaration -> TYPE ID .
    (19) declaration -> TYPE ID . = expr

    ;               reduce using rule 18 (declaration -> TYPE ID .)
    =               shift and go to state 103


state 67

    (20) declaration -> ARRAY_TYPE ( . TYPE ) ID
    (21) declaration -> ARRAY_TYPE ( . TYPE ) ID = expr

    TYPE            shift and go to state 104


state 68

    (22) declaration -> STRING_TYPE ID .
    (23) declaration -> STRING_TYPE ID . = expr

    ;               reduce using rule 22 (declaration -> STRING_TYPE ID .)
    =               shift and go to state 105


state 69

    (13) block -> OPEN_BLOCK statements . CLOSE_BLOCK
    (2) statements -> statements . statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . return_statement ;
    (11) statement -> . function_def
    (12) statement -> . ;
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (18) declaration -> . TYPE ID
    (19) declaration -> . TYPE ID = expr
    (20) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (21) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (22) declaration -> . STRING_TYPE ID
    (23) declaration -> . STRING_TYPE ID = expr
    (13) block -> . OPEN_BLOCK statements CLOSE_BLOCK
    (14) if_block -> . COMMAND_IF ( expr ) statement
    (15) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (17) while_loop -> . COMMAND_WHILE ( expr ) statement
    (16) break -> . COMMAND_BREAK
    (27) return_statement -> . FUNC_RETURN expr
    (28) function_def -> . FUNC_DEFINE all_type ID ( parameters ) block
    (29) function_def -> . FUNC_DEFINE all_type ID ( ) block
    (71) variable -> . ID

    CLOSE_BLOCK     shift and go to state 106
    ;               shift and go to state 5
    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    TYPE            shift and go to state 23
    ARRAY_TYPE      shift and go to state 25
    STRING_TYPE     shift and go to state 26
    OPEN_BLOCK      shift and go to state 27
    COMMAND_IF      shift and go to state 28
    COMMAND_WHILE   shift and go to state 29
    COMMAND_BREAK   shift and go to state 30
    FUNC_RETURN     shift and go to state 31
    FUNC_DEFINE     shift and go to state 32
    ID              shift and go to state 24

    statement                      shift and go to state 3
    expr                           shift and go to state 4
    declaration                    shift and go to state 6
    block                          shift and go to state 7
    if_block                       shift and go to state 8
    while_loop                     shift and go to state 9
    break                          shift and go to state 10
    return_statement               shift and go to state 11
    function_def                   shift and go to state 12
    variable                       shift and go to state 16

state 70

    (14) if_block -> COMMAND_IF ( . expr ) statement
    (15) if_block -> COMMAND_IF ( . expr ) statement COMMAND_ELSE statement
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 107
    variable                       shift and go to state 16

state 71

    (17) while_loop -> COMMAND_WHILE ( . expr ) statement
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 108
    variable                       shift and go to state 16

state 72

    (27) return_statement -> FUNC_RETURN expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 27 (return_statement -> FUNC_RETURN expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 73

    (28) function_def -> FUNC_DEFINE all_type . ID ( parameters ) block
    (29) function_def -> FUNC_DEFINE all_type . ID ( ) block

    ID              shift and go to state 109


state 74

    (24) all_type -> TYPE .

    ID              reduce using rule 24 (all_type -> TYPE .)


state 75

    (25) all_type -> STRING_TYPE .

    ID              reduce using rule 25 (all_type -> STRING_TYPE .)


state 76

    (26) all_type -> ARRAY_TYPE . ( TYPE )

    (               shift and go to state 110


state 77

    (38) expr -> expr AR_METHOD_SIZE ( . )
    (39) expr -> expr AR_METHOD_SIZE ( . expr )
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    )               shift and go to state 112
    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 111
    variable                       shift and go to state 16

state 78

    (40) expr -> expr AR_METHOD_RESIZE ( . arguments )
    (62) arguments -> . expr
    (63) arguments -> . arguments , expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 101
    arguments                      shift and go to state 113
    variable                       shift and go to state 16

state 79

    (43) expr -> expr + expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 43 (expr -> expr + expr .)
    +               reduce using rule 43 (expr -> expr + expr .)
    -               reduce using rule 43 (expr -> expr + expr .)
    ASSIGN_ADD      reduce using rule 43 (expr -> expr + expr .)
    ASSIGN_SUB      reduce using rule 43 (expr -> expr + expr .)
    ASSIGN_MULT     reduce using rule 43 (expr -> expr + expr .)
    ASSIGN_DIV      reduce using rule 43 (expr -> expr + expr .)
    COMP_EQU        reduce using rule 43 (expr -> expr + expr .)
    COMP_NEQU       reduce using rule 43 (expr -> expr + expr .)
    <               reduce using rule 43 (expr -> expr + expr .)
    COMP_LTE        reduce using rule 43 (expr -> expr + expr .)
    >               reduce using rule 43 (expr -> expr + expr .)
    COMP_GTE        reduce using rule 43 (expr -> expr + expr .)
    BOOL_AND        reduce using rule 43 (expr -> expr + expr .)
    BOOL_OR         reduce using rule 43 (expr -> expr + expr .)
    ]               reduce using rule 43 (expr -> expr + expr .)
    ,               reduce using rule 43 (expr -> expr + expr .)
    )               reduce using rule 43 (expr -> expr + expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    *               shift and go to state 38
    /               shift and go to state 39

  ! AR_METHOD_SIZE  [ reduce using rule 43 (expr -> expr + expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 43 (expr -> expr + expr .) ]
  ! *               [ reduce using rule 43 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 43 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! ASSIGN_ADD      [ shift and go to state 40 ]
  ! ASSIGN_SUB      [ shift and go to state 41 ]
  ! ASSIGN_MULT     [ shift and go to state 42 ]
  ! ASSIGN_DIV      [ shift and go to state 43 ]
  ! COMP_EQU        [ shift and go to state 44 ]
  ! COMP_NEQU       [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]
  ! COMP_LTE        [ shift and go to state 47 ]
  ! >               [ shift and go to state 48 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 80

    (44) expr -> expr - expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 44 (expr -> expr - expr .)
    +               reduce using rule 44 (expr -> expr - expr .)
    -               reduce using rule 44 (expr -> expr - expr .)
    ASSIGN_ADD      reduce using rule 44 (expr -> expr - expr .)
    ASSIGN_SUB      reduce using rule 44 (expr -> expr - expr .)
    ASSIGN_MULT     reduce using rule 44 (expr -> expr - expr .)
    ASSIGN_DIV      reduce using rule 44 (expr -> expr - expr .)
    COMP_EQU        reduce using rule 44 (expr -> expr - expr .)
    COMP_NEQU       reduce using rule 44 (expr -> expr - expr .)
    <               reduce using rule 44 (expr -> expr - expr .)
    COMP_LTE        reduce using rule 44 (expr -> expr - expr .)
    >               reduce using rule 44 (expr -> expr - expr .)
    COMP_GTE        reduce using rule 44 (expr -> expr - expr .)
    BOOL_AND        reduce using rule 44 (expr -> expr - expr .)
    BOOL_OR         reduce using rule 44 (expr -> expr - expr .)
    ]               reduce using rule 44 (expr -> expr - expr .)
    ,               reduce using rule 44 (expr -> expr - expr .)
    )               reduce using rule 44 (expr -> expr - expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    *               shift and go to state 38
    /               shift and go to state 39

  ! AR_METHOD_SIZE  [ reduce using rule 44 (expr -> expr - expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 44 (expr -> expr - expr .) ]
  ! *               [ reduce using rule 44 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 44 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! ASSIGN_ADD      [ shift and go to state 40 ]
  ! ASSIGN_SUB      [ shift and go to state 41 ]
  ! ASSIGN_MULT     [ shift and go to state 42 ]
  ! ASSIGN_DIV      [ shift and go to state 43 ]
  ! COMP_EQU        [ shift and go to state 44 ]
  ! COMP_NEQU       [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]
  ! COMP_LTE        [ shift and go to state 47 ]
  ! >               [ shift and go to state 48 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 81

    (45) expr -> expr * expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 45 (expr -> expr * expr .)
    +               reduce using rule 45 (expr -> expr * expr .)
    -               reduce using rule 45 (expr -> expr * expr .)
    *               reduce using rule 45 (expr -> expr * expr .)
    /               reduce using rule 45 (expr -> expr * expr .)
    ASSIGN_ADD      reduce using rule 45 (expr -> expr * expr .)
    ASSIGN_SUB      reduce using rule 45 (expr -> expr * expr .)
    ASSIGN_MULT     reduce using rule 45 (expr -> expr * expr .)
    ASSIGN_DIV      reduce using rule 45 (expr -> expr * expr .)
    COMP_EQU        reduce using rule 45 (expr -> expr * expr .)
    COMP_NEQU       reduce using rule 45 (expr -> expr * expr .)
    <               reduce using rule 45 (expr -> expr * expr .)
    COMP_LTE        reduce using rule 45 (expr -> expr * expr .)
    >               reduce using rule 45 (expr -> expr * expr .)
    COMP_GTE        reduce using rule 45 (expr -> expr * expr .)
    BOOL_AND        reduce using rule 45 (expr -> expr * expr .)
    BOOL_OR         reduce using rule 45 (expr -> expr * expr .)
    ]               reduce using rule 45 (expr -> expr * expr .)
    ,               reduce using rule 45 (expr -> expr * expr .)
    )               reduce using rule 45 (expr -> expr * expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35

  ! AR_METHOD_SIZE  [ reduce using rule 45 (expr -> expr * expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 45 (expr -> expr * expr .) ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! ASSIGN_ADD      [ shift and go to state 40 ]
  ! ASSIGN_SUB      [ shift and go to state 41 ]
  ! ASSIGN_MULT     [ shift and go to state 42 ]
  ! ASSIGN_DIV      [ shift and go to state 43 ]
  ! COMP_EQU        [ shift and go to state 44 ]
  ! COMP_NEQU       [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]
  ! COMP_LTE        [ shift and go to state 47 ]
  ! >               [ shift and go to state 48 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 82

    (46) expr -> expr / expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 46 (expr -> expr / expr .)
    +               reduce using rule 46 (expr -> expr / expr .)
    -               reduce using rule 46 (expr -> expr / expr .)
    *               reduce using rule 46 (expr -> expr / expr .)
    /               reduce using rule 46 (expr -> expr / expr .)
    ASSIGN_ADD      reduce using rule 46 (expr -> expr / expr .)
    ASSIGN_SUB      reduce using rule 46 (expr -> expr / expr .)
    ASSIGN_MULT     reduce using rule 46 (expr -> expr / expr .)
    ASSIGN_DIV      reduce using rule 46 (expr -> expr / expr .)
    COMP_EQU        reduce using rule 46 (expr -> expr / expr .)
    COMP_NEQU       reduce using rule 46 (expr -> expr / expr .)
    <               reduce using rule 46 (expr -> expr / expr .)
    COMP_LTE        reduce using rule 46 (expr -> expr / expr .)
    >               reduce using rule 46 (expr -> expr / expr .)
    COMP_GTE        reduce using rule 46 (expr -> expr / expr .)
    BOOL_AND        reduce using rule 46 (expr -> expr / expr .)
    BOOL_OR         reduce using rule 46 (expr -> expr / expr .)
    ]               reduce using rule 46 (expr -> expr / expr .)
    ,               reduce using rule 46 (expr -> expr / expr .)
    )               reduce using rule 46 (expr -> expr / expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35

  ! AR_METHOD_SIZE  [ reduce using rule 46 (expr -> expr / expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 46 (expr -> expr / expr .) ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! ASSIGN_ADD      [ shift and go to state 40 ]
  ! ASSIGN_SUB      [ shift and go to state 41 ]
  ! ASSIGN_MULT     [ shift and go to state 42 ]
  ! ASSIGN_DIV      [ shift and go to state 43 ]
  ! COMP_EQU        [ shift and go to state 44 ]
  ! COMP_NEQU       [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]
  ! COMP_LTE        [ shift and go to state 47 ]
  ! >               [ shift and go to state 48 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 83

    (47) expr -> expr ASSIGN_ADD expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for AR_METHOD_SIZE resolved as shift
  ! shift/reduce conflict for AR_METHOD_RESIZE resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 47 (expr -> expr ASSIGN_ADD expr .)
    ]               reduce using rule 47 (expr -> expr ASSIGN_ADD expr .)
    ,               reduce using rule 47 (expr -> expr ASSIGN_ADD expr .)
    )               reduce using rule 47 (expr -> expr ASSIGN_ADD expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51

  ! AR_METHOD_SIZE  [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! +               [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! -               [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! *               [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! /               [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_EQU        [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_NEQU       [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! <               [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_LTE        [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! >               [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_GTE        [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! BOOL_AND        [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]
  ! BOOL_OR         [ reduce using rule 47 (expr -> expr ASSIGN_ADD expr .) ]


state 84

    (48) expr -> expr ASSIGN_SUB expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for AR_METHOD_SIZE resolved as shift
  ! shift/reduce conflict for AR_METHOD_RESIZE resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 48 (expr -> expr ASSIGN_SUB expr .)
    ]               reduce using rule 48 (expr -> expr ASSIGN_SUB expr .)
    ,               reduce using rule 48 (expr -> expr ASSIGN_SUB expr .)
    )               reduce using rule 48 (expr -> expr ASSIGN_SUB expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51

  ! AR_METHOD_SIZE  [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! +               [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! -               [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! *               [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! /               [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_EQU        [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_NEQU       [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! <               [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_LTE        [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! >               [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_GTE        [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! BOOL_AND        [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]
  ! BOOL_OR         [ reduce using rule 48 (expr -> expr ASSIGN_SUB expr .) ]


state 85

    (49) expr -> expr ASSIGN_MULT expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for AR_METHOD_SIZE resolved as shift
  ! shift/reduce conflict for AR_METHOD_RESIZE resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 49 (expr -> expr ASSIGN_MULT expr .)
    ]               reduce using rule 49 (expr -> expr ASSIGN_MULT expr .)
    ,               reduce using rule 49 (expr -> expr ASSIGN_MULT expr .)
    )               reduce using rule 49 (expr -> expr ASSIGN_MULT expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51

  ! AR_METHOD_SIZE  [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! +               [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! -               [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! *               [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! /               [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_EQU        [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_NEQU       [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! <               [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_LTE        [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! >               [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_GTE        [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! BOOL_AND        [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]
  ! BOOL_OR         [ reduce using rule 49 (expr -> expr ASSIGN_MULT expr .) ]


state 86

    (50) expr -> expr ASSIGN_DIV expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for AR_METHOD_SIZE resolved as shift
  ! shift/reduce conflict for AR_METHOD_RESIZE resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 50 (expr -> expr ASSIGN_DIV expr .)
    ]               reduce using rule 50 (expr -> expr ASSIGN_DIV expr .)
    ,               reduce using rule 50 (expr -> expr ASSIGN_DIV expr .)
    )               reduce using rule 50 (expr -> expr ASSIGN_DIV expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51

  ! AR_METHOD_SIZE  [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! +               [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! -               [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! *               [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! /               [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_EQU        [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_NEQU       [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! <               [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_LTE        [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! >               [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_GTE        [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! BOOL_AND        [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]
  ! BOOL_OR         [ reduce using rule 50 (expr -> expr ASSIGN_DIV expr .) ]


state 87

    (52) expr -> expr COMP_EQU expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 52 (expr -> expr COMP_EQU expr .)
    ASSIGN_ADD      reduce using rule 52 (expr -> expr COMP_EQU expr .)
    ASSIGN_SUB      reduce using rule 52 (expr -> expr COMP_EQU expr .)
    ASSIGN_MULT     reduce using rule 52 (expr -> expr COMP_EQU expr .)
    ASSIGN_DIV      reduce using rule 52 (expr -> expr COMP_EQU expr .)
    COMP_EQU        reduce using rule 52 (expr -> expr COMP_EQU expr .)
    COMP_NEQU       reduce using rule 52 (expr -> expr COMP_EQU expr .)
    <               reduce using rule 52 (expr -> expr COMP_EQU expr .)
    COMP_LTE        reduce using rule 52 (expr -> expr COMP_EQU expr .)
    >               reduce using rule 52 (expr -> expr COMP_EQU expr .)
    COMP_GTE        reduce using rule 52 (expr -> expr COMP_EQU expr .)
    BOOL_AND        reduce using rule 52 (expr -> expr COMP_EQU expr .)
    BOOL_OR         reduce using rule 52 (expr -> expr COMP_EQU expr .)
    ]               reduce using rule 52 (expr -> expr COMP_EQU expr .)
    ,               reduce using rule 52 (expr -> expr COMP_EQU expr .)
    )               reduce using rule 52 (expr -> expr COMP_EQU expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! AR_METHOD_SIZE  [ reduce using rule 52 (expr -> expr COMP_EQU expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 52 (expr -> expr COMP_EQU expr .) ]
  ! +               [ reduce using rule 52 (expr -> expr COMP_EQU expr .) ]
  ! -               [ reduce using rule 52 (expr -> expr COMP_EQU expr .) ]
  ! *               [ reduce using rule 52 (expr -> expr COMP_EQU expr .) ]
  ! /               [ reduce using rule 52 (expr -> expr COMP_EQU expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 40 ]
  ! ASSIGN_SUB      [ shift and go to state 41 ]
  ! ASSIGN_MULT     [ shift and go to state 42 ]
  ! ASSIGN_DIV      [ shift and go to state 43 ]
  ! COMP_EQU        [ shift and go to state 44 ]
  ! COMP_NEQU       [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]
  ! COMP_LTE        [ shift and go to state 47 ]
  ! >               [ shift and go to state 48 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 88

    (53) expr -> expr COMP_NEQU expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    ASSIGN_ADD      reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    ASSIGN_SUB      reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    ASSIGN_MULT     reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    ASSIGN_DIV      reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    COMP_EQU        reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    COMP_NEQU       reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    <               reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    COMP_LTE        reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    >               reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    COMP_GTE        reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    BOOL_AND        reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    BOOL_OR         reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    ]               reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    ,               reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    )               reduce using rule 53 (expr -> expr COMP_NEQU expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! AR_METHOD_SIZE  [ reduce using rule 53 (expr -> expr COMP_NEQU expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 53 (expr -> expr COMP_NEQU expr .) ]
  ! +               [ reduce using rule 53 (expr -> expr COMP_NEQU expr .) ]
  ! -               [ reduce using rule 53 (expr -> expr COMP_NEQU expr .) ]
  ! *               [ reduce using rule 53 (expr -> expr COMP_NEQU expr .) ]
  ! /               [ reduce using rule 53 (expr -> expr COMP_NEQU expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 40 ]
  ! ASSIGN_SUB      [ shift and go to state 41 ]
  ! ASSIGN_MULT     [ shift and go to state 42 ]
  ! ASSIGN_DIV      [ shift and go to state 43 ]
  ! COMP_EQU        [ shift and go to state 44 ]
  ! COMP_NEQU       [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]
  ! COMP_LTE        [ shift and go to state 47 ]
  ! >               [ shift and go to state 48 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 89

    (54) expr -> expr < expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 54 (expr -> expr < expr .)
    ASSIGN_ADD      reduce using rule 54 (expr -> expr < expr .)
    ASSIGN_SUB      reduce using rule 54 (expr -> expr < expr .)
    ASSIGN_MULT     reduce using rule 54 (expr -> expr < expr .)
    ASSIGN_DIV      reduce using rule 54 (expr -> expr < expr .)
    COMP_EQU        reduce using rule 54 (expr -> expr < expr .)
    COMP_NEQU       reduce using rule 54 (expr -> expr < expr .)
    <               reduce using rule 54 (expr -> expr < expr .)
    COMP_LTE        reduce using rule 54 (expr -> expr < expr .)
    >               reduce using rule 54 (expr -> expr < expr .)
    COMP_GTE        reduce using rule 54 (expr -> expr < expr .)
    BOOL_AND        reduce using rule 54 (expr -> expr < expr .)
    BOOL_OR         reduce using rule 54 (expr -> expr < expr .)
    ]               reduce using rule 54 (expr -> expr < expr .)
    ,               reduce using rule 54 (expr -> expr < expr .)
    )               reduce using rule 54 (expr -> expr < expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! AR_METHOD_SIZE  [ reduce using rule 54 (expr -> expr < expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 54 (expr -> expr < expr .) ]
  ! +               [ reduce using rule 54 (expr -> expr < expr .) ]
  ! -               [ reduce using rule 54 (expr -> expr < expr .) ]
  ! *               [ reduce using rule 54 (expr -> expr < expr .) ]
  ! /               [ reduce using rule 54 (expr -> expr < expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 40 ]
  ! ASSIGN_SUB      [ shift and go to state 41 ]
  ! ASSIGN_MULT     [ shift and go to state 42 ]
  ! ASSIGN_DIV      [ shift and go to state 43 ]
  ! COMP_EQU        [ shift and go to state 44 ]
  ! COMP_NEQU       [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]
  ! COMP_LTE        [ shift and go to state 47 ]
  ! >               [ shift and go to state 48 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 90

    (55) expr -> expr COMP_LTE expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 55 (expr -> expr COMP_LTE expr .)
    ASSIGN_ADD      reduce using rule 55 (expr -> expr COMP_LTE expr .)
    ASSIGN_SUB      reduce using rule 55 (expr -> expr COMP_LTE expr .)
    ASSIGN_MULT     reduce using rule 55 (expr -> expr COMP_LTE expr .)
    ASSIGN_DIV      reduce using rule 55 (expr -> expr COMP_LTE expr .)
    COMP_EQU        reduce using rule 55 (expr -> expr COMP_LTE expr .)
    COMP_NEQU       reduce using rule 55 (expr -> expr COMP_LTE expr .)
    <               reduce using rule 55 (expr -> expr COMP_LTE expr .)
    COMP_LTE        reduce using rule 55 (expr -> expr COMP_LTE expr .)
    >               reduce using rule 55 (expr -> expr COMP_LTE expr .)
    COMP_GTE        reduce using rule 55 (expr -> expr COMP_LTE expr .)
    BOOL_AND        reduce using rule 55 (expr -> expr COMP_LTE expr .)
    BOOL_OR         reduce using rule 55 (expr -> expr COMP_LTE expr .)
    ]               reduce using rule 55 (expr -> expr COMP_LTE expr .)
    ,               reduce using rule 55 (expr -> expr COMP_LTE expr .)
    )               reduce using rule 55 (expr -> expr COMP_LTE expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! AR_METHOD_SIZE  [ reduce using rule 55 (expr -> expr COMP_LTE expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 55 (expr -> expr COMP_LTE expr .) ]
  ! +               [ reduce using rule 55 (expr -> expr COMP_LTE expr .) ]
  ! -               [ reduce using rule 55 (expr -> expr COMP_LTE expr .) ]
  ! *               [ reduce using rule 55 (expr -> expr COMP_LTE expr .) ]
  ! /               [ reduce using rule 55 (expr -> expr COMP_LTE expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 40 ]
  ! ASSIGN_SUB      [ shift and go to state 41 ]
  ! ASSIGN_MULT     [ shift and go to state 42 ]
  ! ASSIGN_DIV      [ shift and go to state 43 ]
  ! COMP_EQU        [ shift and go to state 44 ]
  ! COMP_NEQU       [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]
  ! COMP_LTE        [ shift and go to state 47 ]
  ! >               [ shift and go to state 48 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 91

    (56) expr -> expr > expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 56 (expr -> expr > expr .)
    ASSIGN_ADD      reduce using rule 56 (expr -> expr > expr .)
    ASSIGN_SUB      reduce using rule 56 (expr -> expr > expr .)
    ASSIGN_MULT     reduce using rule 56 (expr -> expr > expr .)
    ASSIGN_DIV      reduce using rule 56 (expr -> expr > expr .)
    COMP_EQU        reduce using rule 56 (expr -> expr > expr .)
    COMP_NEQU       reduce using rule 56 (expr -> expr > expr .)
    <               reduce using rule 56 (expr -> expr > expr .)
    COMP_LTE        reduce using rule 56 (expr -> expr > expr .)
    >               reduce using rule 56 (expr -> expr > expr .)
    COMP_GTE        reduce using rule 56 (expr -> expr > expr .)
    BOOL_AND        reduce using rule 56 (expr -> expr > expr .)
    BOOL_OR         reduce using rule 56 (expr -> expr > expr .)
    ]               reduce using rule 56 (expr -> expr > expr .)
    ,               reduce using rule 56 (expr -> expr > expr .)
    )               reduce using rule 56 (expr -> expr > expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! AR_METHOD_SIZE  [ reduce using rule 56 (expr -> expr > expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 56 (expr -> expr > expr .) ]
  ! +               [ reduce using rule 56 (expr -> expr > expr .) ]
  ! -               [ reduce using rule 56 (expr -> expr > expr .) ]
  ! *               [ reduce using rule 56 (expr -> expr > expr .) ]
  ! /               [ reduce using rule 56 (expr -> expr > expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 40 ]
  ! ASSIGN_SUB      [ shift and go to state 41 ]
  ! ASSIGN_MULT     [ shift and go to state 42 ]
  ! ASSIGN_DIV      [ shift and go to state 43 ]
  ! COMP_EQU        [ shift and go to state 44 ]
  ! COMP_NEQU       [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]
  ! COMP_LTE        [ shift and go to state 47 ]
  ! >               [ shift and go to state 48 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 92

    (57) expr -> expr COMP_GTE expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 57 (expr -> expr COMP_GTE expr .)
    ASSIGN_ADD      reduce using rule 57 (expr -> expr COMP_GTE expr .)
    ASSIGN_SUB      reduce using rule 57 (expr -> expr COMP_GTE expr .)
    ASSIGN_MULT     reduce using rule 57 (expr -> expr COMP_GTE expr .)
    ASSIGN_DIV      reduce using rule 57 (expr -> expr COMP_GTE expr .)
    COMP_EQU        reduce using rule 57 (expr -> expr COMP_GTE expr .)
    COMP_NEQU       reduce using rule 57 (expr -> expr COMP_GTE expr .)
    <               reduce using rule 57 (expr -> expr COMP_GTE expr .)
    COMP_LTE        reduce using rule 57 (expr -> expr COMP_GTE expr .)
    >               reduce using rule 57 (expr -> expr COMP_GTE expr .)
    COMP_GTE        reduce using rule 57 (expr -> expr COMP_GTE expr .)
    BOOL_AND        reduce using rule 57 (expr -> expr COMP_GTE expr .)
    BOOL_OR         reduce using rule 57 (expr -> expr COMP_GTE expr .)
    ]               reduce using rule 57 (expr -> expr COMP_GTE expr .)
    ,               reduce using rule 57 (expr -> expr COMP_GTE expr .)
    )               reduce using rule 57 (expr -> expr COMP_GTE expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! AR_METHOD_SIZE  [ reduce using rule 57 (expr -> expr COMP_GTE expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 57 (expr -> expr COMP_GTE expr .) ]
  ! +               [ reduce using rule 57 (expr -> expr COMP_GTE expr .) ]
  ! -               [ reduce using rule 57 (expr -> expr COMP_GTE expr .) ]
  ! *               [ reduce using rule 57 (expr -> expr COMP_GTE expr .) ]
  ! /               [ reduce using rule 57 (expr -> expr COMP_GTE expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 40 ]
  ! ASSIGN_SUB      [ shift and go to state 41 ]
  ! ASSIGN_MULT     [ shift and go to state 42 ]
  ! ASSIGN_DIV      [ shift and go to state 43 ]
  ! COMP_EQU        [ shift and go to state 44 ]
  ! COMP_NEQU       [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]
  ! COMP_LTE        [ shift and go to state 47 ]
  ! >               [ shift and go to state 48 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 93

    (58) expr -> expr BOOL_AND expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 58 (expr -> expr BOOL_AND expr .)
    ASSIGN_ADD      reduce using rule 58 (expr -> expr BOOL_AND expr .)
    ASSIGN_SUB      reduce using rule 58 (expr -> expr BOOL_AND expr .)
    ASSIGN_MULT     reduce using rule 58 (expr -> expr BOOL_AND expr .)
    ASSIGN_DIV      reduce using rule 58 (expr -> expr BOOL_AND expr .)
    BOOL_AND        reduce using rule 58 (expr -> expr BOOL_AND expr .)
    BOOL_OR         reduce using rule 58 (expr -> expr BOOL_AND expr .)
    ]               reduce using rule 58 (expr -> expr BOOL_AND expr .)
    ,               reduce using rule 58 (expr -> expr BOOL_AND expr .)
    )               reduce using rule 58 (expr -> expr BOOL_AND expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49

  ! AR_METHOD_SIZE  [ reduce using rule 58 (expr -> expr BOOL_AND expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 58 (expr -> expr BOOL_AND expr .) ]
  ! +               [ reduce using rule 58 (expr -> expr BOOL_AND expr .) ]
  ! -               [ reduce using rule 58 (expr -> expr BOOL_AND expr .) ]
  ! *               [ reduce using rule 58 (expr -> expr BOOL_AND expr .) ]
  ! /               [ reduce using rule 58 (expr -> expr BOOL_AND expr .) ]
  ! COMP_EQU        [ reduce using rule 58 (expr -> expr BOOL_AND expr .) ]
  ! COMP_NEQU       [ reduce using rule 58 (expr -> expr BOOL_AND expr .) ]
  ! <               [ reduce using rule 58 (expr -> expr BOOL_AND expr .) ]
  ! COMP_LTE        [ reduce using rule 58 (expr -> expr BOOL_AND expr .) ]
  ! >               [ reduce using rule 58 (expr -> expr BOOL_AND expr .) ]
  ! COMP_GTE        [ reduce using rule 58 (expr -> expr BOOL_AND expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 40 ]
  ! ASSIGN_SUB      [ shift and go to state 41 ]
  ! ASSIGN_MULT     [ shift and go to state 42 ]
  ! ASSIGN_DIV      [ shift and go to state 43 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 94

    (59) expr -> expr BOOL_OR expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 59 (expr -> expr BOOL_OR expr .)
    ASSIGN_ADD      reduce using rule 59 (expr -> expr BOOL_OR expr .)
    ASSIGN_SUB      reduce using rule 59 (expr -> expr BOOL_OR expr .)
    ASSIGN_MULT     reduce using rule 59 (expr -> expr BOOL_OR expr .)
    ASSIGN_DIV      reduce using rule 59 (expr -> expr BOOL_OR expr .)
    BOOL_OR         reduce using rule 59 (expr -> expr BOOL_OR expr .)
    ]               reduce using rule 59 (expr -> expr BOOL_OR expr .)
    ,               reduce using rule 59 (expr -> expr BOOL_OR expr .)
    )               reduce using rule 59 (expr -> expr BOOL_OR expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50

  ! AR_METHOD_SIZE  [ reduce using rule 59 (expr -> expr BOOL_OR expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 59 (expr -> expr BOOL_OR expr .) ]
  ! +               [ reduce using rule 59 (expr -> expr BOOL_OR expr .) ]
  ! -               [ reduce using rule 59 (expr -> expr BOOL_OR expr .) ]
  ! *               [ reduce using rule 59 (expr -> expr BOOL_OR expr .) ]
  ! /               [ reduce using rule 59 (expr -> expr BOOL_OR expr .) ]
  ! COMP_EQU        [ reduce using rule 59 (expr -> expr BOOL_OR expr .) ]
  ! COMP_NEQU       [ reduce using rule 59 (expr -> expr BOOL_OR expr .) ]
  ! <               [ reduce using rule 59 (expr -> expr BOOL_OR expr .) ]
  ! COMP_LTE        [ reduce using rule 59 (expr -> expr BOOL_OR expr .) ]
  ! >               [ reduce using rule 59 (expr -> expr BOOL_OR expr .) ]
  ! COMP_GTE        [ reduce using rule 59 (expr -> expr BOOL_OR expr .) ]
  ! BOOL_AND        [ reduce using rule 59 (expr -> expr BOOL_OR expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 40 ]
  ! ASSIGN_SUB      [ shift and go to state 41 ]
  ! ASSIGN_MULT     [ shift and go to state 42 ]
  ! ASSIGN_DIV      [ shift and go to state 43 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 95

    (33) expr -> [ elements ] .

    ;               reduce using rule 33 (expr -> [ elements ] .)
    AR_METHOD_SIZE  reduce using rule 33 (expr -> [ elements ] .)
    AR_METHOD_RESIZE reduce using rule 33 (expr -> [ elements ] .)
    +               reduce using rule 33 (expr -> [ elements ] .)
    -               reduce using rule 33 (expr -> [ elements ] .)
    *               reduce using rule 33 (expr -> [ elements ] .)
    /               reduce using rule 33 (expr -> [ elements ] .)
    ASSIGN_ADD      reduce using rule 33 (expr -> [ elements ] .)
    ASSIGN_SUB      reduce using rule 33 (expr -> [ elements ] .)
    ASSIGN_MULT     reduce using rule 33 (expr -> [ elements ] .)
    ASSIGN_DIV      reduce using rule 33 (expr -> [ elements ] .)
    COMP_EQU        reduce using rule 33 (expr -> [ elements ] .)
    COMP_NEQU       reduce using rule 33 (expr -> [ elements ] .)
    <               reduce using rule 33 (expr -> [ elements ] .)
    COMP_LTE        reduce using rule 33 (expr -> [ elements ] .)
    >               reduce using rule 33 (expr -> [ elements ] .)
    COMP_GTE        reduce using rule 33 (expr -> [ elements ] .)
    BOOL_AND        reduce using rule 33 (expr -> [ elements ] .)
    BOOL_OR         reduce using rule 33 (expr -> [ elements ] .)
    ]               reduce using rule 33 (expr -> [ elements ] .)
    ,               reduce using rule 33 (expr -> [ elements ] .)
    )               reduce using rule 33 (expr -> [ elements ] .)


state 96

    (37) elements -> elements , . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 114
    variable                       shift and go to state 16

state 97

    (51) expr -> ( expr ) .

    ;               reduce using rule 51 (expr -> ( expr ) .)
    AR_METHOD_SIZE  reduce using rule 51 (expr -> ( expr ) .)
    AR_METHOD_RESIZE reduce using rule 51 (expr -> ( expr ) .)
    +               reduce using rule 51 (expr -> ( expr ) .)
    -               reduce using rule 51 (expr -> ( expr ) .)
    *               reduce using rule 51 (expr -> ( expr ) .)
    /               reduce using rule 51 (expr -> ( expr ) .)
    ASSIGN_ADD      reduce using rule 51 (expr -> ( expr ) .)
    ASSIGN_SUB      reduce using rule 51 (expr -> ( expr ) .)
    ASSIGN_MULT     reduce using rule 51 (expr -> ( expr ) .)
    ASSIGN_DIV      reduce using rule 51 (expr -> ( expr ) .)
    COMP_EQU        reduce using rule 51 (expr -> ( expr ) .)
    COMP_NEQU       reduce using rule 51 (expr -> ( expr ) .)
    <               reduce using rule 51 (expr -> ( expr ) .)
    COMP_LTE        reduce using rule 51 (expr -> ( expr ) .)
    >               reduce using rule 51 (expr -> ( expr ) .)
    COMP_GTE        reduce using rule 51 (expr -> ( expr ) .)
    BOOL_AND        reduce using rule 51 (expr -> ( expr ) .)
    BOOL_OR         reduce using rule 51 (expr -> ( expr ) .)
    ]               reduce using rule 51 (expr -> ( expr ) .)
    ,               reduce using rule 51 (expr -> ( expr ) .)
    )               reduce using rule 51 (expr -> ( expr ) .)


state 98

    (41) expr -> variable [ expr . ]
    (42) expr -> variable [ expr . ] = expr
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ]               shift and go to state 115
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 99

    (70) expr -> variable = expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 70 (expr -> variable = expr .)
    ASSIGN_ADD      reduce using rule 70 (expr -> variable = expr .)
    ASSIGN_SUB      reduce using rule 70 (expr -> variable = expr .)
    ASSIGN_MULT     reduce using rule 70 (expr -> variable = expr .)
    ASSIGN_DIV      reduce using rule 70 (expr -> variable = expr .)
    ]               reduce using rule 70 (expr -> variable = expr .)
    ,               reduce using rule 70 (expr -> variable = expr .)
    )               reduce using rule 70 (expr -> variable = expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51

  ! AR_METHOD_SIZE  [ reduce using rule 70 (expr -> variable = expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 70 (expr -> variable = expr .) ]
  ! +               [ reduce using rule 70 (expr -> variable = expr .) ]
  ! -               [ reduce using rule 70 (expr -> variable = expr .) ]
  ! *               [ reduce using rule 70 (expr -> variable = expr .) ]
  ! /               [ reduce using rule 70 (expr -> variable = expr .) ]
  ! COMP_EQU        [ reduce using rule 70 (expr -> variable = expr .) ]
  ! COMP_NEQU       [ reduce using rule 70 (expr -> variable = expr .) ]
  ! <               [ reduce using rule 70 (expr -> variable = expr .) ]
  ! COMP_LTE        [ reduce using rule 70 (expr -> variable = expr .) ]
  ! >               [ reduce using rule 70 (expr -> variable = expr .) ]
  ! COMP_GTE        [ reduce using rule 70 (expr -> variable = expr .) ]
  ! BOOL_AND        [ reduce using rule 70 (expr -> variable = expr .) ]
  ! BOOL_OR         [ reduce using rule 70 (expr -> variable = expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 40 ]
  ! ASSIGN_SUB      [ shift and go to state 41 ]
  ! ASSIGN_MULT     [ shift and go to state 42 ]
  ! ASSIGN_DIV      [ shift and go to state 43 ]


state 100

    (61) expr -> COMMAND_PRINT ( arguments . )
    (63) arguments -> arguments . , expr

    )               shift and go to state 116
    ,               shift and go to state 117


state 101

    (62) arguments -> expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    )               reduce using rule 62 (arguments -> expr .)
    ,               reduce using rule 62 (arguments -> expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 102

    (64) expr -> COMMAND_RANDOM ( expr . )
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    )               shift and go to state 118
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 103

    (19) declaration -> TYPE ID = . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 119
    variable                       shift and go to state 16

state 104

    (20) declaration -> ARRAY_TYPE ( TYPE . ) ID
    (21) declaration -> ARRAY_TYPE ( TYPE . ) ID = expr

    )               shift and go to state 120


state 105

    (23) declaration -> STRING_TYPE ID = . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 121
    variable                       shift and go to state 16

state 106

    (13) block -> OPEN_BLOCK statements CLOSE_BLOCK .

    ;               reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    [               reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    STRING_LITERAL  reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    (               reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    !               reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    COMMAND_PRINT   reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    COMMAND_RANDOM  reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    VAL_LITERAL     reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    -               reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    CHAR_LITERAL    reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    TYPE            reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    ARRAY_TYPE      reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    STRING_TYPE     reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    OPEN_BLOCK      reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    COMMAND_IF      reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    COMMAND_WHILE   reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    COMMAND_BREAK   reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    FUNC_RETURN     reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    FUNC_DEFINE     reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    ID              reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    $end            reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    CLOSE_BLOCK     reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    COMMAND_ELSE    reduce using rule 13 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)


state 107

    (14) if_block -> COMMAND_IF ( expr . ) statement
    (15) if_block -> COMMAND_IF ( expr . ) statement COMMAND_ELSE statement
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    )               shift and go to state 122
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 108

    (17) while_loop -> COMMAND_WHILE ( expr . ) statement
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    )               shift and go to state 123
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 109

    (28) function_def -> FUNC_DEFINE all_type ID . ( parameters ) block
    (29) function_def -> FUNC_DEFINE all_type ID . ( ) block

    (               shift and go to state 124


state 110

    (26) all_type -> ARRAY_TYPE ( . TYPE )

    TYPE            shift and go to state 125


state 111

    (39) expr -> expr AR_METHOD_SIZE ( expr . )
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    )               shift and go to state 126
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 112

    (38) expr -> expr AR_METHOD_SIZE ( ) .

    ;               reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    AR_METHOD_SIZE  reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    AR_METHOD_RESIZE reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    +               reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    -               reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    *               reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    /               reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    ASSIGN_ADD      reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    ASSIGN_SUB      reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    ASSIGN_MULT     reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    ASSIGN_DIV      reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    COMP_EQU        reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    COMP_NEQU       reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    <               reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    COMP_LTE        reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    >               reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    COMP_GTE        reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    BOOL_AND        reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    BOOL_OR         reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    ]               reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    ,               reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)
    )               reduce using rule 38 (expr -> expr AR_METHOD_SIZE ( ) .)


state 113

    (40) expr -> expr AR_METHOD_RESIZE ( arguments . )
    (63) arguments -> arguments . , expr

    )               shift and go to state 127
    ,               shift and go to state 117


state 114

    (37) elements -> elements , expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ]               reduce using rule 37 (elements -> elements , expr .)
    ,               reduce using rule 37 (elements -> elements , expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 115

    (41) expr -> variable [ expr ] .
    (42) expr -> variable [ expr ] . = expr

    ;               reduce using rule 41 (expr -> variable [ expr ] .)
    AR_METHOD_SIZE  reduce using rule 41 (expr -> variable [ expr ] .)
    AR_METHOD_RESIZE reduce using rule 41 (expr -> variable [ expr ] .)
    +               reduce using rule 41 (expr -> variable [ expr ] .)
    -               reduce using rule 41 (expr -> variable [ expr ] .)
    *               reduce using rule 41 (expr -> variable [ expr ] .)
    /               reduce using rule 41 (expr -> variable [ expr ] .)
    ASSIGN_ADD      reduce using rule 41 (expr -> variable [ expr ] .)
    ASSIGN_SUB      reduce using rule 41 (expr -> variable [ expr ] .)
    ASSIGN_MULT     reduce using rule 41 (expr -> variable [ expr ] .)
    ASSIGN_DIV      reduce using rule 41 (expr -> variable [ expr ] .)
    COMP_EQU        reduce using rule 41 (expr -> variable [ expr ] .)
    COMP_NEQU       reduce using rule 41 (expr -> variable [ expr ] .)
    <               reduce using rule 41 (expr -> variable [ expr ] .)
    COMP_LTE        reduce using rule 41 (expr -> variable [ expr ] .)
    >               reduce using rule 41 (expr -> variable [ expr ] .)
    COMP_GTE        reduce using rule 41 (expr -> variable [ expr ] .)
    BOOL_AND        reduce using rule 41 (expr -> variable [ expr ] .)
    BOOL_OR         reduce using rule 41 (expr -> variable [ expr ] .)
    ]               reduce using rule 41 (expr -> variable [ expr ] .)
    ,               reduce using rule 41 (expr -> variable [ expr ] .)
    )               reduce using rule 41 (expr -> variable [ expr ] .)
    =               shift and go to state 128


state 116

    (61) expr -> COMMAND_PRINT ( arguments ) .

    ;               reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    AR_METHOD_SIZE  reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    AR_METHOD_RESIZE reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    +               reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    -               reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    *               reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    /               reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_ADD      reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_SUB      reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_MULT     reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_DIV      reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_EQU        reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_NEQU       reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    <               reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_LTE        reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    >               reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_GTE        reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    BOOL_AND        reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    BOOL_OR         reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    ]               reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    ,               reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)
    )               reduce using rule 61 (expr -> COMMAND_PRINT ( arguments ) .)


state 117

    (63) arguments -> arguments , . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 129
    variable                       shift and go to state 16

state 118

    (64) expr -> COMMAND_RANDOM ( expr ) .

    ;               reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    AR_METHOD_SIZE  reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    AR_METHOD_RESIZE reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    +               reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    -               reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    *               reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    /               reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_ADD      reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_SUB      reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_MULT     reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_DIV      reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_EQU        reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_NEQU       reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    <               reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_LTE        reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    >               reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_GTE        reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    BOOL_AND        reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    BOOL_OR         reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    ]               reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    ,               reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)
    )               reduce using rule 64 (expr -> COMMAND_RANDOM ( expr ) .)


state 119

    (19) declaration -> TYPE ID = expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 19 (declaration -> TYPE ID = expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 120

    (20) declaration -> ARRAY_TYPE ( TYPE ) . ID
    (21) declaration -> ARRAY_TYPE ( TYPE ) . ID = expr

    ID              shift and go to state 130


state 121

    (23) declaration -> STRING_TYPE ID = expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 23 (declaration -> STRING_TYPE ID = expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 122

    (14) if_block -> COMMAND_IF ( expr ) . statement
    (15) if_block -> COMMAND_IF ( expr ) . statement COMMAND_ELSE statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . return_statement ;
    (11) statement -> . function_def
    (12) statement -> . ;
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (18) declaration -> . TYPE ID
    (19) declaration -> . TYPE ID = expr
    (20) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (21) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (22) declaration -> . STRING_TYPE ID
    (23) declaration -> . STRING_TYPE ID = expr
    (13) block -> . OPEN_BLOCK statements CLOSE_BLOCK
    (14) if_block -> . COMMAND_IF ( expr ) statement
    (15) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (17) while_loop -> . COMMAND_WHILE ( expr ) statement
    (16) break -> . COMMAND_BREAK
    (27) return_statement -> . FUNC_RETURN expr
    (28) function_def -> . FUNC_DEFINE all_type ID ( parameters ) block
    (29) function_def -> . FUNC_DEFINE all_type ID ( ) block
    (71) variable -> . ID

    ;               shift and go to state 5
    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    TYPE            shift and go to state 23
    ARRAY_TYPE      shift and go to state 25
    STRING_TYPE     shift and go to state 26
    OPEN_BLOCK      shift and go to state 27
    COMMAND_IF      shift and go to state 28
    COMMAND_WHILE   shift and go to state 29
    COMMAND_BREAK   shift and go to state 30
    FUNC_RETURN     shift and go to state 31
    FUNC_DEFINE     shift and go to state 32
    ID              shift and go to state 24

    expr                           shift and go to state 4
    statement                      shift and go to state 131
    declaration                    shift and go to state 6
    block                          shift and go to state 7
    if_block                       shift and go to state 8
    while_loop                     shift and go to state 9
    break                          shift and go to state 10
    return_statement               shift and go to state 11
    function_def                   shift and go to state 12
    variable                       shift and go to state 16

state 123

    (17) while_loop -> COMMAND_WHILE ( expr ) . statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . return_statement ;
    (11) statement -> . function_def
    (12) statement -> . ;
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (18) declaration -> . TYPE ID
    (19) declaration -> . TYPE ID = expr
    (20) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (21) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (22) declaration -> . STRING_TYPE ID
    (23) declaration -> . STRING_TYPE ID = expr
    (13) block -> . OPEN_BLOCK statements CLOSE_BLOCK
    (14) if_block -> . COMMAND_IF ( expr ) statement
    (15) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (17) while_loop -> . COMMAND_WHILE ( expr ) statement
    (16) break -> . COMMAND_BREAK
    (27) return_statement -> . FUNC_RETURN expr
    (28) function_def -> . FUNC_DEFINE all_type ID ( parameters ) block
    (29) function_def -> . FUNC_DEFINE all_type ID ( ) block
    (71) variable -> . ID

    ;               shift and go to state 5
    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    TYPE            shift and go to state 23
    ARRAY_TYPE      shift and go to state 25
    STRING_TYPE     shift and go to state 26
    OPEN_BLOCK      shift and go to state 27
    COMMAND_IF      shift and go to state 28
    COMMAND_WHILE   shift and go to state 29
    COMMAND_BREAK   shift and go to state 30
    FUNC_RETURN     shift and go to state 31
    FUNC_DEFINE     shift and go to state 32
    ID              shift and go to state 24

    expr                           shift and go to state 4
    statement                      shift and go to state 132
    declaration                    shift and go to state 6
    block                          shift and go to state 7
    if_block                       shift and go to state 8
    while_loop                     shift and go to state 9
    break                          shift and go to state 10
    return_statement               shift and go to state 11
    function_def                   shift and go to state 12
    variable                       shift and go to state 16

state 124

    (28) function_def -> FUNC_DEFINE all_type ID ( . parameters ) block
    (29) function_def -> FUNC_DEFINE all_type ID ( . ) block
    (30) parameters -> . parameters , parameter
    (31) parameters -> . parameter
    (32) parameter -> . all_type ID
    (24) all_type -> . TYPE
    (25) all_type -> . STRING_TYPE
    (26) all_type -> . ARRAY_TYPE ( TYPE )

    )               shift and go to state 135
    TYPE            shift and go to state 74
    STRING_TYPE     shift and go to state 75
    ARRAY_TYPE      shift and go to state 76

    all_type                       shift and go to state 133
    parameters                     shift and go to state 134
    parameter                      shift and go to state 136

state 125

    (26) all_type -> ARRAY_TYPE ( TYPE . )

    )               shift and go to state 137


state 126

    (39) expr -> expr AR_METHOD_SIZE ( expr ) .

    ;               reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    AR_METHOD_SIZE  reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    AR_METHOD_RESIZE reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    +               reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    -               reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    *               reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    /               reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ASSIGN_ADD      reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ASSIGN_SUB      reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ASSIGN_MULT     reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ASSIGN_DIV      reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    COMP_EQU        reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    COMP_NEQU       reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    <               reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    COMP_LTE        reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    >               reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    COMP_GTE        reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    BOOL_AND        reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    BOOL_OR         reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ]               reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ,               reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    )               reduce using rule 39 (expr -> expr AR_METHOD_SIZE ( expr ) .)


state 127

    (40) expr -> expr AR_METHOD_RESIZE ( arguments ) .

    ;               reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    AR_METHOD_SIZE  reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    AR_METHOD_RESIZE reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    +               reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    -               reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    *               reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    /               reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    ASSIGN_ADD      reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    ASSIGN_SUB      reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    ASSIGN_MULT     reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    ASSIGN_DIV      reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    COMP_EQU        reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    COMP_NEQU       reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    <               reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    COMP_LTE        reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    >               reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    COMP_GTE        reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    BOOL_AND        reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    BOOL_OR         reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    ]               reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    ,               reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    )               reduce using rule 40 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)


state 128

    (42) expr -> variable [ expr ] = . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    variable                       shift and go to state 16
    expr                           shift and go to state 138

state 129

    (63) arguments -> arguments , expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    )               reduce using rule 63 (arguments -> arguments , expr .)
    ,               reduce using rule 63 (arguments -> arguments , expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 130

    (20) declaration -> ARRAY_TYPE ( TYPE ) ID .
    (21) declaration -> ARRAY_TYPE ( TYPE ) ID . = expr

    ;               reduce using rule 20 (declaration -> ARRAY_TYPE ( TYPE ) ID .)
    =               shift and go to state 139


state 131

    (14) if_block -> COMMAND_IF ( expr ) statement .
    (15) if_block -> COMMAND_IF ( expr ) statement . COMMAND_ELSE statement

  ! shift/reduce conflict for COMMAND_ELSE resolved as shift
    ;               reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    [               reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    STRING_LITERAL  reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    (               reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    !               reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_PRINT   reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_RANDOM  reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    VAL_LITERAL     reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    -               reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    CHAR_LITERAL    reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    TYPE            reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    ARRAY_TYPE      reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    STRING_TYPE     reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    OPEN_BLOCK      reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_IF      reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_WHILE   reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_BREAK   reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    FUNC_RETURN     reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    FUNC_DEFINE     reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    ID              reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    $end            reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    CLOSE_BLOCK     reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_ELSE    shift and go to state 140

  ! COMMAND_ELSE    [ reduce using rule 14 (if_block -> COMMAND_IF ( expr ) statement .) ]


state 132

    (17) while_loop -> COMMAND_WHILE ( expr ) statement .

    ;               reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    [               reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    STRING_LITERAL  reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    (               reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    !               reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_PRINT   reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_RANDOM  reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    VAL_LITERAL     reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    -               reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    CHAR_LITERAL    reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    TYPE            reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    ARRAY_TYPE      reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    STRING_TYPE     reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    OPEN_BLOCK      reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_IF      reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_WHILE   reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_BREAK   reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    FUNC_RETURN     reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    FUNC_DEFINE     reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    ID              reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    $end            reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    CLOSE_BLOCK     reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_ELSE    reduce using rule 17 (while_loop -> COMMAND_WHILE ( expr ) statement .)


state 133

    (32) parameter -> all_type . ID

    ID              shift and go to state 141


state 134

    (28) function_def -> FUNC_DEFINE all_type ID ( parameters . ) block
    (30) parameters -> parameters . , parameter

    )               shift and go to state 142
    ,               shift and go to state 143


state 135

    (29) function_def -> FUNC_DEFINE all_type ID ( ) . block
    (13) block -> . OPEN_BLOCK statements CLOSE_BLOCK

    OPEN_BLOCK      shift and go to state 27

    block                          shift and go to state 144

state 136

    (31) parameters -> parameter .

    )               reduce using rule 31 (parameters -> parameter .)
    ,               reduce using rule 31 (parameters -> parameter .)


state 137

    (26) all_type -> ARRAY_TYPE ( TYPE ) .

    ID              reduce using rule 26 (all_type -> ARRAY_TYPE ( TYPE ) .)


state 138

    (42) expr -> variable [ expr ] = expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 42 (expr -> variable [ expr ] = expr .)
    ASSIGN_ADD      reduce using rule 42 (expr -> variable [ expr ] = expr .)
    ASSIGN_SUB      reduce using rule 42 (expr -> variable [ expr ] = expr .)
    ASSIGN_MULT     reduce using rule 42 (expr -> variable [ expr ] = expr .)
    ASSIGN_DIV      reduce using rule 42 (expr -> variable [ expr ] = expr .)
    ]               reduce using rule 42 (expr -> variable [ expr ] = expr .)
    ,               reduce using rule 42 (expr -> variable [ expr ] = expr .)
    )               reduce using rule 42 (expr -> variable [ expr ] = expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51

  ! AR_METHOD_SIZE  [ reduce using rule 42 (expr -> variable [ expr ] = expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 42 (expr -> variable [ expr ] = expr .) ]
  ! +               [ reduce using rule 42 (expr -> variable [ expr ] = expr .) ]
  ! -               [ reduce using rule 42 (expr -> variable [ expr ] = expr .) ]
  ! *               [ reduce using rule 42 (expr -> variable [ expr ] = expr .) ]
  ! /               [ reduce using rule 42 (expr -> variable [ expr ] = expr .) ]
  ! COMP_EQU        [ reduce using rule 42 (expr -> variable [ expr ] = expr .) ]
  ! COMP_NEQU       [ reduce using rule 42 (expr -> variable [ expr ] = expr .) ]
  ! <               [ reduce using rule 42 (expr -> variable [ expr ] = expr .) ]
  ! COMP_LTE        [ reduce using rule 42 (expr -> variable [ expr ] = expr .) ]
  ! >               [ reduce using rule 42 (expr -> variable [ expr ] = expr .) ]
  ! COMP_GTE        [ reduce using rule 42 (expr -> variable [ expr ] = expr .) ]
  ! BOOL_AND        [ reduce using rule 42 (expr -> variable [ expr ] = expr .) ]
  ! BOOL_OR         [ reduce using rule 42 (expr -> variable [ expr ] = expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 40 ]
  ! ASSIGN_SUB      [ shift and go to state 41 ]
  ! ASSIGN_MULT     [ shift and go to state 42 ]
  ! ASSIGN_DIV      [ shift and go to state 43 ]


state 139

    (21) declaration -> ARRAY_TYPE ( TYPE ) ID = . expr
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (71) variable -> . ID

    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    ID              shift and go to state 24

    expr                           shift and go to state 145
    variable                       shift and go to state 16

state 140

    (15) if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE . statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . return_statement ;
    (11) statement -> . function_def
    (12) statement -> . ;
    (33) expr -> . [ elements ]
    (34) expr -> . [ ]
    (35) expr -> . STRING_LITERAL
    (38) expr -> . expr AR_METHOD_SIZE ( )
    (39) expr -> . expr AR_METHOD_SIZE ( expr )
    (40) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (41) expr -> . variable [ expr ]
    (42) expr -> . variable [ expr ] = expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr ASSIGN_ADD expr
    (48) expr -> . expr ASSIGN_SUB expr
    (49) expr -> . expr ASSIGN_MULT expr
    (50) expr -> . expr ASSIGN_DIV expr
    (51) expr -> . ( expr )
    (52) expr -> . expr COMP_EQU expr
    (53) expr -> . expr COMP_NEQU expr
    (54) expr -> . expr < expr
    (55) expr -> . expr COMP_LTE expr
    (56) expr -> . expr > expr
    (57) expr -> . expr COMP_GTE expr
    (58) expr -> . expr BOOL_AND expr
    (59) expr -> . expr BOOL_OR expr
    (60) expr -> . ! expr
    (61) expr -> . COMMAND_PRINT ( arguments )
    (64) expr -> . COMMAND_RANDOM ( expr )
    (65) expr -> . VAL_LITERAL
    (66) expr -> . - VAL_LITERAL
    (67) expr -> . CHAR_LITERAL
    (68) expr -> . variable
    (69) expr -> . - variable
    (70) expr -> . variable = expr
    (18) declaration -> . TYPE ID
    (19) declaration -> . TYPE ID = expr
    (20) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (21) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (22) declaration -> . STRING_TYPE ID
    (23) declaration -> . STRING_TYPE ID = expr
    (13) block -> . OPEN_BLOCK statements CLOSE_BLOCK
    (14) if_block -> . COMMAND_IF ( expr ) statement
    (15) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (17) while_loop -> . COMMAND_WHILE ( expr ) statement
    (16) break -> . COMMAND_BREAK
    (27) return_statement -> . FUNC_RETURN expr
    (28) function_def -> . FUNC_DEFINE all_type ID ( parameters ) block
    (29) function_def -> . FUNC_DEFINE all_type ID ( ) block
    (71) variable -> . ID

    ;               shift and go to state 5
    [               shift and go to state 13
    STRING_LITERAL  shift and go to state 14
    (               shift and go to state 15
    !               shift and go to state 18
    COMMAND_PRINT   shift and go to state 19
    COMMAND_RANDOM  shift and go to state 20
    VAL_LITERAL     shift and go to state 21
    -               shift and go to state 17
    CHAR_LITERAL    shift and go to state 22
    TYPE            shift and go to state 23
    ARRAY_TYPE      shift and go to state 25
    STRING_TYPE     shift and go to state 26
    OPEN_BLOCK      shift and go to state 27
    COMMAND_IF      shift and go to state 28
    COMMAND_WHILE   shift and go to state 29
    COMMAND_BREAK   shift and go to state 30
    FUNC_RETURN     shift and go to state 31
    FUNC_DEFINE     shift and go to state 32
    ID              shift and go to state 24

    expr                           shift and go to state 4
    statement                      shift and go to state 146
    declaration                    shift and go to state 6
    block                          shift and go to state 7
    if_block                       shift and go to state 8
    while_loop                     shift and go to state 9
    break                          shift and go to state 10
    return_statement               shift and go to state 11
    function_def                   shift and go to state 12
    variable                       shift and go to state 16

state 141

    (32) parameter -> all_type ID .

    )               reduce using rule 32 (parameter -> all_type ID .)
    ,               reduce using rule 32 (parameter -> all_type ID .)


state 142

    (28) function_def -> FUNC_DEFINE all_type ID ( parameters ) . block
    (13) block -> . OPEN_BLOCK statements CLOSE_BLOCK

    OPEN_BLOCK      shift and go to state 27

    block                          shift and go to state 147

state 143

    (30) parameters -> parameters , . parameter
    (32) parameter -> . all_type ID
    (24) all_type -> . TYPE
    (25) all_type -> . STRING_TYPE
    (26) all_type -> . ARRAY_TYPE ( TYPE )

    TYPE            shift and go to state 74
    STRING_TYPE     shift and go to state 75
    ARRAY_TYPE      shift and go to state 76

    parameter                      shift and go to state 148
    all_type                       shift and go to state 133

state 144

    (29) function_def -> FUNC_DEFINE all_type ID ( ) block .

    ;               reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    [               reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    STRING_LITERAL  reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    (               reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    !               reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    COMMAND_PRINT   reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    COMMAND_RANDOM  reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    VAL_LITERAL     reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    -               reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    CHAR_LITERAL    reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    TYPE            reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    ARRAY_TYPE      reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    STRING_TYPE     reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    OPEN_BLOCK      reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    COMMAND_IF      reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    COMMAND_WHILE   reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    COMMAND_BREAK   reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    FUNC_RETURN     reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    FUNC_DEFINE     reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    ID              reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    $end            reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    CLOSE_BLOCK     reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)
    COMMAND_ELSE    reduce using rule 29 (function_def -> FUNC_DEFINE all_type ID ( ) block .)


state 145

    (21) declaration -> ARRAY_TYPE ( TYPE ) ID = expr .
    (38) expr -> expr . AR_METHOD_SIZE ( )
    (39) expr -> expr . AR_METHOD_SIZE ( expr )
    (40) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . ASSIGN_ADD expr
    (48) expr -> expr . ASSIGN_SUB expr
    (49) expr -> expr . ASSIGN_MULT expr
    (50) expr -> expr . ASSIGN_DIV expr
    (52) expr -> expr . COMP_EQU expr
    (53) expr -> expr . COMP_NEQU expr
    (54) expr -> expr . < expr
    (55) expr -> expr . COMP_LTE expr
    (56) expr -> expr . > expr
    (57) expr -> expr . COMP_GTE expr
    (58) expr -> expr . BOOL_AND expr
    (59) expr -> expr . BOOL_OR expr

    ;               reduce using rule 21 (declaration -> ARRAY_TYPE ( TYPE ) ID = expr .)
    AR_METHOD_SIZE  shift and go to state 34
    AR_METHOD_RESIZE shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 41
    ASSIGN_MULT     shift and go to state 42
    ASSIGN_DIV      shift and go to state 43
    COMP_EQU        shift and go to state 44
    COMP_NEQU       shift and go to state 45
    <               shift and go to state 46
    COMP_LTE        shift and go to state 47
    >               shift and go to state 48
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 146

    (15) if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .

    ;               reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    [               reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    STRING_LITERAL  reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    (               reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    !               reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_PRINT   reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_RANDOM  reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    VAL_LITERAL     reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    -               reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    CHAR_LITERAL    reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    TYPE            reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    ARRAY_TYPE      reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    STRING_TYPE     reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    OPEN_BLOCK      reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_IF      reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_WHILE   reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_BREAK   reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    FUNC_RETURN     reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    FUNC_DEFINE     reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    ID              reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    $end            reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    CLOSE_BLOCK     reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_ELSE    reduce using rule 15 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)


state 147

    (28) function_def -> FUNC_DEFINE all_type ID ( parameters ) block .

    ;               reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    [               reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    STRING_LITERAL  reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    (               reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    !               reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    COMMAND_PRINT   reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    COMMAND_RANDOM  reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    VAL_LITERAL     reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    -               reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    CHAR_LITERAL    reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    TYPE            reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    ARRAY_TYPE      reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    STRING_TYPE     reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    OPEN_BLOCK      reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    COMMAND_IF      reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    COMMAND_WHILE   reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    COMMAND_BREAK   reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    FUNC_RETURN     reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    FUNC_DEFINE     reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    ID              reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    $end            reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    CLOSE_BLOCK     reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)
    COMMAND_ELSE    reduce using rule 28 (function_def -> FUNC_DEFINE all_type ID ( parameters ) block .)


state 148

    (30) parameters -> parameters , parameter .

    )               reduce using rule 30 (parameters -> parameters , parameter .)
    ,               reduce using rule 30 (parameters -> parameters , parameter .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AR_METHOD_SIZE in state 83 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_RESIZE in state 83 resolved as shift
WARNING: shift/reduce conflict for + in state 83 resolved as shift
WARNING: shift/reduce conflict for - in state 83 resolved as shift
WARNING: shift/reduce conflict for * in state 83 resolved as shift
WARNING: shift/reduce conflict for / in state 83 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 83 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 83 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 83 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 83 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 83 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 83 resolved as shift
WARNING: shift/reduce conflict for < in state 83 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 83 resolved as shift
WARNING: shift/reduce conflict for > in state 83 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 83 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 83 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 83 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_SIZE in state 84 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_RESIZE in state 84 resolved as shift
WARNING: shift/reduce conflict for + in state 84 resolved as shift
WARNING: shift/reduce conflict for - in state 84 resolved as shift
WARNING: shift/reduce conflict for * in state 84 resolved as shift
WARNING: shift/reduce conflict for / in state 84 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 84 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 84 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 84 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 84 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 84 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 84 resolved as shift
WARNING: shift/reduce conflict for < in state 84 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 84 resolved as shift
WARNING: shift/reduce conflict for > in state 84 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 84 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 84 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 84 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_SIZE in state 85 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_RESIZE in state 85 resolved as shift
WARNING: shift/reduce conflict for + in state 85 resolved as shift
WARNING: shift/reduce conflict for - in state 85 resolved as shift
WARNING: shift/reduce conflict for * in state 85 resolved as shift
WARNING: shift/reduce conflict for / in state 85 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 85 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 85 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 85 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 85 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 85 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 85 resolved as shift
WARNING: shift/reduce conflict for < in state 85 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 85 resolved as shift
WARNING: shift/reduce conflict for > in state 85 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 85 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 85 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 85 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_SIZE in state 86 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_RESIZE in state 86 resolved as shift
WARNING: shift/reduce conflict for + in state 86 resolved as shift
WARNING: shift/reduce conflict for - in state 86 resolved as shift
WARNING: shift/reduce conflict for * in state 86 resolved as shift
WARNING: shift/reduce conflict for / in state 86 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 86 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 86 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 86 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 86 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 86 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 86 resolved as shift
WARNING: shift/reduce conflict for < in state 86 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 86 resolved as shift
WARNING: shift/reduce conflict for > in state 86 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 86 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 86 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 86 resolved as shift
WARNING: shift/reduce conflict for COMMAND_ELSE in state 131 resolved as shift
