
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "right=leftBOOL_ORleftBOOL_ANDleft<>COMP_EQUCOMP_NEQUCOMP_LTECOMP_GTEleft+-left*/right!rightAR_METHOD_SIZEAR_METHOD_RESIZETYPE COMMAND_PRINT COMMAND_RANDOM ID VAL_LITERAL CHAR_LITERAL ASSIGN_ADD ASSIGN_SUB ASSIGN_MULT ASSIGN_DIV COMP_EQU COMP_NEQU COMP_LTE COMP_GTE BOOL_AND BOOL_OR WHITESPACE COMMENT COMMAND_IF COMMAND_ELSE COMMAND_WHILE COMMAND_BREAK ARRAY_TYPE STRING_TYPE STRING_LITERAL AR_METHOD_SIZE AR_METHOD_RESIZE FUNC_DEFINE FUNC_RETURN\n    program : statements\n    \n    statements : statements statement\n               |\n    \n    statement : expr ';'\n              | declaration ';'\n              | block\n              | if_block\n              | while_loop\n              | break ';'\n              | return_statement ';'\n              | function_def\n    \n    statement : ';'\n    \n    block : open_block statements close_block\n    \n    open_block : '{'\n    \n    close_block : '}'\n    \n    if_block : COMMAND_IF '(' expr ')' statement\n             | COMMAND_IF '(' expr ')' statement COMMAND_ELSE statement\n    \n    break : COMMAND_BREAK\n    \n    while_loop : COMMAND_WHILE '(' expr ')' statement\n    \n    declaration : TYPE ID\n                | TYPE ID '=' expr\n    \n    declaration : ARRAY_TYPE '(' TYPE ')' ID\n                | ARRAY_TYPE '(' TYPE ')' ID '=' expr\n    \n    declaration : STRING_TYPE ID\n                | STRING_TYPE ID '=' expr\n    \n    all_type : TYPE\n             | STRING_TYPE\n             | ARRAY_TYPE '(' TYPE ')'\n    \n    return_statement : FUNC_RETURN expr\n    \n    function_def : func_signature statement\n    \n    func_signature : FUNC_DEFINE all_type ID '(' parameters ')'\n                   | FUNC_DEFINE all_type ID '(' ')'\n    \n    parameters : parameters ',' parameter\n               | parameter\n    \n    parameter : all_type ID\n    \n    expr : ID '(' arguments ')'\n         | ID '(' ')'\n    \n    expr : '[' elements ']'\n         | '[' ']'\n         | STRING_LITERAL\n    \n    elements : expr\n             | elements ',' expr\n    \n    expr : expr AR_METHOD_SIZE '(' ')'\n         | expr AR_METHOD_SIZE '(' expr ')'\n    \n    expr : expr AR_METHOD_RESIZE '(' arguments ')'\n    \n    expr : variable '[' expr ']'\n         | variable '[' expr ']' '=' expr\n    \n    expr : expr '+' expr\n    \n    expr : expr '-' expr\n    \n    expr : expr '*' expr\n    \n    expr : expr '/' expr\n    \n    expr : expr ASSIGN_ADD expr\n    \n    expr : expr ASSIGN_SUB expr\n    \n    expr : expr ASSIGN_MULT expr\n    \n    expr : expr ASSIGN_DIV expr\n    \n    expr : '(' expr ')'\n    \n    expr : expr COMP_EQU expr\n    \n    expr : expr COMP_NEQU expr\n    \n    expr : expr '<' expr\n    \n    expr : expr COMP_LTE expr\n    \n    expr : expr '>' expr\n    \n    expr : expr COMP_GTE expr\n    \n    expr : expr BOOL_AND expr\n    \n    expr : expr BOOL_OR expr\n    \n    expr : '!' expr\n    \n    expr : COMMAND_PRINT '(' arguments ')'\n    \n    arguments : expr\n              | arguments ',' expr\n    \n    expr : COMMAND_RANDOM '(' expr ')'\n    \n    expr : VAL_LITERAL\n         | '-' VAL_LITERAL\n    \n    expr : CHAR_LITERAL\n    \n    expr : variable\n         | '-' variable\n    \n    expr : variable '=' expr\n    \n    variable : ID\n    "
    
_lr_action_items = {';':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,17,22,23,27,30,32,33,35,54,55,56,60,64,65,66,67,70,72,73,76,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,103,104,107,113,114,120,122,125,126,127,128,130,131,132,135,136,139,140,141,144,147,149,151,153,154,],[-3,5,-2,35,-12,54,-6,-7,-8,55,56,-11,-76,-40,-73,-70,-72,-3,-18,5,-14,-4,-5,-9,-10,-39,-71,-74,-76,-65,-20,-24,5,-29,-30,-48,-49,-50,-51,-52,-53,-54,-55,-57,-58,-59,-60,-61,-62,-63,-64,-37,-56,-38,-75,-13,-15,-43,-36,-46,-66,-69,-21,-25,5,5,-44,-45,-22,-16,-19,-32,-47,5,-31,-23,-17,]),'ID':([0,2,3,5,7,8,9,12,14,15,18,19,24,26,27,31,32,33,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,62,63,68,69,73,74,75,77,78,79,80,82,83,105,110,112,113,114,123,129,131,132,138,140,141,142,144,146,148,149,151,154,],[-3,13,-2,-12,-6,-7,-8,-11,13,13,66,13,70,72,-3,13,13,-14,-4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-5,-9,-10,13,13,13,13,13,13,13,13,-30,117,-26,-27,13,13,13,13,13,-13,-15,13,139,13,13,13,-16,-19,150,-32,-28,13,13,-31,-17,]),'[':([0,2,3,5,7,8,9,12,13,14,15,17,19,27,31,32,33,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,62,63,68,69,73,74,75,77,82,83,105,110,112,113,114,123,131,132,138,140,141,144,148,149,151,154,],[-3,15,-2,-12,-6,-7,-8,-11,-76,15,15,62,15,-3,15,15,-14,-4,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-5,-9,-10,15,15,15,15,15,15,15,15,-30,15,15,15,15,15,-13,-15,15,15,15,15,-16,-19,-32,15,15,-31,-17,]),'STRING_LITERAL':([0,2,3,5,7,8,9,12,14,15,19,27,31,32,33,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,62,63,68,69,73,74,75,77,82,83,105,110,112,113,114,123,131,132,138,140,141,144,148,149,151,154,],[-3,16,-2,-12,-6,-7,-8,-11,16,16,16,-3,16,16,-14,-4,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-5,-9,-10,16,16,16,16,16,16,16,16,-30,16,16,16,16,16,-13,-15,16,16,16,16,-16,-19,-32,16,16,-31,-17,]),'(':([0,2,3,5,7,8,9,12,13,14,15,19,20,21,25,27,28,29,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,62,63,68,69,73,74,75,77,81,82,83,105,110,112,113,114,117,123,131,132,138,140,141,144,148,149,151,154,],[-3,14,-2,-12,-6,-7,-8,-11,57,14,14,14,68,69,71,-3,74,75,14,14,-14,-4,82,83,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-5,-9,-10,14,14,14,14,14,14,14,14,-30,118,14,14,14,14,14,-13,-15,133,14,14,14,14,-16,-19,-32,14,14,-31,-17,]),'!':([0,2,3,5,7,8,9,12,14,15,19,27,31,32,33,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,62,63,68,69,73,74,75,77,82,83,105,110,112,113,114,123,131,132,138,140,141,144,148,149,151,154,],[-3,19,-2,-12,-6,-7,-8,-11,19,19,19,-3,19,19,-14,-4,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-5,-9,-10,19,19,19,19,19,19,19,19,-30,19,19,19,19,19,-13,-15,19,19,19,19,-16,-19,-32,19,19,-31,-17,]),'COMMAND_PRINT':([0,2,3,5,7,8,9,12,14,15,19,27,31,32,33,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,62,63,68,69,73,74,75,77,82,83,105,110,112,113,114,123,131,132,138,140,141,144,148,149,151,154,],[-3,20,-2,-12,-6,-7,-8,-11,20,20,20,-3,20,20,-14,-4,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-5,-9,-10,20,20,20,20,20,20,20,20,-30,20,20,20,20,20,-13,-15,20,20,20,20,-16,-19,-32,20,20,-31,-17,]),'COMMAND_RANDOM':([0,2,3,5,7,8,9,12,14,15,19,27,31,32,33,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,62,63,68,69,73,74,75,77,82,83,105,110,112,113,114,123,131,132,138,140,141,144,148,149,151,154,],[-3,21,-2,-12,-6,-7,-8,-11,21,21,21,-3,21,21,-14,-4,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-5,-9,-10,21,21,21,21,21,21,21,21,-30,21,21,21,21,21,-13,-15,21,21,21,21,-16,-19,-32,21,21,-31,-17,]),'VAL_LITERAL':([0,2,3,5,7,8,9,12,14,15,18,19,27,31,32,33,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,62,63,68,69,73,74,75,77,82,83,105,110,112,113,114,123,131,132,138,140,141,144,148,149,151,154,],[-3,22,-2,-12,-6,-7,-8,-11,22,22,64,22,-3,22,22,-14,-4,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-5,-9,-10,22,22,22,22,22,22,22,22,-30,22,22,22,22,22,-13,-15,22,22,22,22,-16,-19,-32,22,22,-31,-17,]),'-':([0,2,3,4,5,7,8,9,12,13,14,15,16,17,19,22,23,27,31,32,33,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,73,74,75,76,77,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,109,110,112,113,114,115,116,119,120,122,123,124,125,126,127,128,130,131,132,135,136,137,138,140,141,144,147,148,149,151,153,154,],[-3,18,-2,39,-12,-6,-7,-8,-11,-76,18,18,-40,-73,18,-70,-72,-3,18,18,-14,-4,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-5,-9,-10,18,39,-39,39,18,18,-71,-74,-76,-65,18,18,18,18,18,39,-30,18,18,-48,-49,-50,-51,39,39,39,39,39,39,39,39,39,39,39,39,-37,39,-56,-38,18,39,39,39,18,18,-13,-15,39,39,39,-43,-36,18,39,-46,-66,-69,39,39,18,18,-44,-45,39,18,-16,-19,-32,39,18,18,-31,39,-17,]),'CHAR_LITERAL':([0,2,3,5,7,8,9,12,14,15,19,27,31,32,33,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,62,63,68,69,73,74,75,77,82,83,105,110,112,113,114,123,131,132,138,140,141,144,148,149,151,154,],[-3,23,-2,-12,-6,-7,-8,-11,23,23,23,-3,23,23,-14,-4,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-5,-9,-10,23,23,23,23,23,23,23,23,-30,23,23,23,23,23,-13,-15,23,23,23,23,-16,-19,-32,23,23,-31,-17,]),'TYPE':([0,2,3,5,7,8,9,12,27,32,33,34,35,54,55,56,71,73,77,113,114,118,131,132,133,140,141,144,149,151,152,154,],[-3,24,-2,-12,-6,-7,-8,-11,-3,24,-14,79,-4,-5,-9,-10,111,24,-30,-13,-15,134,24,24,79,-16,-19,-32,24,-31,79,-17,]),'ARRAY_TYPE':([0,2,3,5,7,8,9,12,27,32,33,34,35,54,55,56,73,77,113,114,131,132,133,140,141,144,149,151,152,154,],[-3,25,-2,-12,-6,-7,-8,-11,-3,25,-14,81,-4,-5,-9,-10,25,-30,-13,-15,25,25,81,-16,-19,-32,25,-31,81,-17,]),'STRING_TYPE':([0,2,3,5,7,8,9,12,27,32,33,34,35,54,55,56,73,77,113,114,131,132,133,140,141,144,149,151,152,154,],[-3,26,-2,-12,-6,-7,-8,-11,-3,26,-14,80,-4,-5,-9,-10,26,-30,-13,-15,26,26,80,-16,-19,-32,26,-31,80,-17,]),'COMMAND_IF':([0,2,3,5,7,8,9,12,27,32,33,35,54,55,56,73,77,113,114,131,132,140,141,144,149,151,154,],[-3,28,-2,-12,-6,-7,-8,-11,-3,28,-14,-4,-5,-9,-10,28,-30,-13,-15,28,28,-16,-19,-32,28,-31,-17,]),'COMMAND_WHILE':([0,2,3,5,7,8,9,12,27,32,33,35,54,55,56,73,77,113,114,131,132,140,141,144,149,151,154,],[-3,29,-2,-12,-6,-7,-8,-11,-3,29,-14,-4,-5,-9,-10,29,-30,-13,-15,29,29,-16,-19,-32,29,-31,-17,]),'COMMAND_BREAK':([0,2,3,5,7,8,9,12,27,32,33,35,54,55,56,73,77,113,114,131,132,140,141,144,149,151,154,],[-3,30,-2,-12,-6,-7,-8,-11,-3,30,-14,-4,-5,-9,-10,30,-30,-13,-15,30,30,-16,-19,-32,30,-31,-17,]),'FUNC_RETURN':([0,2,3,5,7,8,9,12,27,32,33,35,54,55,56,73,77,113,114,131,132,140,141,144,149,151,154,],[-3,31,-2,-12,-6,-7,-8,-11,-3,31,-14,-4,-5,-9,-10,31,-30,-13,-15,31,31,-16,-19,-32,31,-31,-17,]),'{':([0,2,3,5,7,8,9,12,27,32,33,35,54,55,56,73,77,113,114,131,132,140,141,144,149,151,154,],[-3,33,-2,-12,-6,-7,-8,-11,-3,33,-14,-4,-5,-9,-10,33,-30,-13,-15,33,33,-16,-19,-32,33,-31,-17,]),'FUNC_DEFINE':([0,2,3,5,7,8,9,12,27,32,33,35,54,55,56,73,77,113,114,131,132,140,141,144,149,151,154,],[-3,34,-2,-12,-6,-7,-8,-11,-3,34,-14,-4,-5,-9,-10,34,-30,-13,-15,34,34,-16,-19,-32,34,-31,-17,]),'$end':([0,1,2,3,5,7,8,9,12,35,54,55,56,77,113,114,140,141,154,],[-3,0,-1,-2,-12,-6,-7,-8,-11,-4,-5,-9,-10,-30,-13,-15,-16,-19,-17,]),'}':([3,5,7,8,9,12,27,33,35,54,55,56,73,77,113,114,140,141,154,],[-2,-12,-6,-7,-8,-11,-3,-14,-4,-5,-9,-10,114,-30,-13,-15,-16,-19,-17,]),'AR_METHOD_SIZE':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[36,-76,-40,-73,-70,-72,36,-39,36,-71,-74,-76,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-37,36,-56,-38,36,36,36,36,36,36,-43,-36,36,-46,-66,-69,36,36,-44,-45,36,36,36,]),'AR_METHOD_RESIZE':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[37,-76,-40,-73,-70,-72,37,-39,37,-71,-74,-76,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-37,37,-56,-38,37,37,37,37,37,37,-43,-36,37,-46,-66,-69,37,37,-44,-45,37,37,37,]),'+':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[38,-76,-40,-73,-70,-72,38,-39,38,-71,-74,-76,-65,38,-48,-49,-50,-51,38,38,38,38,38,38,38,38,38,38,38,38,-37,38,-56,-38,38,38,38,38,38,38,-43,-36,38,-46,-66,-69,38,38,-44,-45,38,38,38,]),'*':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[40,-76,-40,-73,-70,-72,40,-39,40,-71,-74,-76,-65,40,40,40,-50,-51,40,40,40,40,40,40,40,40,40,40,40,40,-37,40,-56,-38,40,40,40,40,40,40,-43,-36,40,-46,-66,-69,40,40,-44,-45,40,40,40,]),'/':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[41,-76,-40,-73,-70,-72,41,-39,41,-71,-74,-76,-65,41,41,41,-50,-51,41,41,41,41,41,41,41,41,41,41,41,41,-37,41,-56,-38,41,41,41,41,41,41,-43,-36,41,-46,-66,-69,41,41,-44,-45,41,41,41,]),'ASSIGN_ADD':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[42,-76,-40,-73,-70,-72,42,-39,42,-71,-74,-76,-65,42,-48,-49,-50,-51,42,42,42,42,-57,-58,-59,-60,-61,-62,-63,-64,-37,42,-56,-38,42,-75,42,42,42,42,-43,-36,42,-46,-66,-69,42,42,-44,-45,42,-47,42,]),'ASSIGN_SUB':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[43,-76,-40,-73,-70,-72,43,-39,43,-71,-74,-76,-65,43,-48,-49,-50,-51,43,43,43,43,-57,-58,-59,-60,-61,-62,-63,-64,-37,43,-56,-38,43,-75,43,43,43,43,-43,-36,43,-46,-66,-69,43,43,-44,-45,43,-47,43,]),'ASSIGN_MULT':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[44,-76,-40,-73,-70,-72,44,-39,44,-71,-74,-76,-65,44,-48,-49,-50,-51,44,44,44,44,-57,-58,-59,-60,-61,-62,-63,-64,-37,44,-56,-38,44,-75,44,44,44,44,-43,-36,44,-46,-66,-69,44,44,-44,-45,44,-47,44,]),'ASSIGN_DIV':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[45,-76,-40,-73,-70,-72,45,-39,45,-71,-74,-76,-65,45,-48,-49,-50,-51,45,45,45,45,-57,-58,-59,-60,-61,-62,-63,-64,-37,45,-56,-38,45,-75,45,45,45,45,-43,-36,45,-46,-66,-69,45,45,-44,-45,45,-47,45,]),'COMP_EQU':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[46,-76,-40,-73,-70,-72,46,-39,46,-71,-74,-76,-65,46,-48,-49,-50,-51,46,46,46,46,-57,-58,-59,-60,-61,-62,46,46,-37,46,-56,-38,46,46,46,46,46,46,-43,-36,46,-46,-66,-69,46,46,-44,-45,46,46,46,]),'COMP_NEQU':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[47,-76,-40,-73,-70,-72,47,-39,47,-71,-74,-76,-65,47,-48,-49,-50,-51,47,47,47,47,-57,-58,-59,-60,-61,-62,47,47,-37,47,-56,-38,47,47,47,47,47,47,-43,-36,47,-46,-66,-69,47,47,-44,-45,47,47,47,]),'<':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[48,-76,-40,-73,-70,-72,48,-39,48,-71,-74,-76,-65,48,-48,-49,-50,-51,48,48,48,48,-57,-58,-59,-60,-61,-62,48,48,-37,48,-56,-38,48,48,48,48,48,48,-43,-36,48,-46,-66,-69,48,48,-44,-45,48,48,48,]),'COMP_LTE':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[49,-76,-40,-73,-70,-72,49,-39,49,-71,-74,-76,-65,49,-48,-49,-50,-51,49,49,49,49,-57,-58,-59,-60,-61,-62,49,49,-37,49,-56,-38,49,49,49,49,49,49,-43,-36,49,-46,-66,-69,49,49,-44,-45,49,49,49,]),'>':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[50,-76,-40,-73,-70,-72,50,-39,50,-71,-74,-76,-65,50,-48,-49,-50,-51,50,50,50,50,-57,-58,-59,-60,-61,-62,50,50,-37,50,-56,-38,50,50,50,50,50,50,-43,-36,50,-46,-66,-69,50,50,-44,-45,50,50,50,]),'COMP_GTE':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[51,-76,-40,-73,-70,-72,51,-39,51,-71,-74,-76,-65,51,-48,-49,-50,-51,51,51,51,51,-57,-58,-59,-60,-61,-62,51,51,-37,51,-56,-38,51,51,51,51,51,51,-43,-36,51,-46,-66,-69,51,51,-44,-45,51,51,51,]),'BOOL_AND':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[52,-76,-40,-73,-70,-72,52,-39,52,-71,-74,-76,-65,52,-48,-49,-50,-51,52,52,52,52,-57,-58,-59,-60,-61,-62,-63,52,-37,52,-56,-38,52,52,52,52,52,52,-43,-36,52,-46,-66,-69,52,52,-44,-45,52,52,52,]),'BOOL_OR':([4,13,16,17,22,23,58,60,61,64,65,66,67,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,106,107,109,115,116,119,120,122,124,125,126,127,128,130,135,136,137,147,153,],[53,-76,-40,-73,-70,-72,53,-39,53,-71,-74,-76,-65,53,-48,-49,-50,-51,53,53,53,53,-57,-58,-59,-60,-61,-62,-63,-64,-37,53,-56,-38,53,53,53,53,53,53,-43,-36,53,-46,-66,-69,53,53,-44,-45,53,53,53,]),'COMMAND_ELSE':([5,7,8,9,12,35,54,55,56,77,113,114,140,141,154,],[-12,-6,-7,-8,-11,-4,-5,-9,-10,-30,-13,-15,149,-19,-17,]),'=':([13,17,70,72,125,139,],[-76,63,110,112,138,148,]),')':([13,16,17,22,23,57,58,60,64,65,66,67,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,111,115,116,119,120,121,122,125,126,127,133,134,135,136,137,143,145,147,150,155,],[-76,-40,-73,-70,-72,101,103,-39,-71,-74,-76,-65,120,-48,-49,-50,-51,-52,-53,-54,-55,-57,-58,-59,-60,-61,-62,-63,-64,122,-37,-67,-56,-38,-75,126,127,129,131,132,135,-43,136,-36,-46,-66,-69,144,146,-44,-45,-68,151,-34,-47,-35,-33,]),']':([13,15,16,17,22,23,59,60,61,64,65,66,67,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,103,104,106,107,120,122,124,125,126,127,135,136,147,],[-76,60,-40,-73,-70,-72,104,-39,-41,-71,-74,-76,-65,-48,-49,-50,-51,-52,-53,-54,-55,-57,-58,-59,-60,-61,-62,-63,-64,-37,-56,-38,125,-75,-43,-36,-42,-46,-66,-69,-44,-45,-47,]),',':([13,16,17,22,23,59,60,61,64,65,66,67,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,120,121,122,124,125,126,127,135,136,137,143,145,147,150,155,],[-76,-40,-73,-70,-72,105,-39,-41,-71,-74,-76,-65,-48,-49,-50,-51,-52,-53,-54,-55,-57,-58,-59,-60,-61,-62,-63,-64,123,-37,-67,-56,-38,-75,123,-43,123,-36,-42,-46,-66,-69,-44,-45,-68,152,-34,-47,-35,-33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,27,],[2,73,]),'statement':([2,32,73,131,132,149,],[3,77,3,140,141,154,]),'expr':([2,14,15,19,31,32,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,57,62,63,68,69,73,74,75,82,83,105,110,112,123,131,132,138,148,149,],[4,58,61,67,76,4,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,106,107,102,109,4,115,116,119,102,124,128,130,137,4,4,147,153,4,]),'declaration':([2,32,73,131,132,149,],[6,6,6,6,6,6,]),'block':([2,32,73,131,132,149,],[7,7,7,7,7,7,]),'if_block':([2,32,73,131,132,149,],[8,8,8,8,8,8,]),'while_loop':([2,32,73,131,132,149,],[9,9,9,9,9,9,]),'break':([2,32,73,131,132,149,],[10,10,10,10,10,10,]),'return_statement':([2,32,73,131,132,149,],[11,11,11,11,11,11,]),'function_def':([2,32,73,131,132,149,],[12,12,12,12,12,12,]),'variable':([2,14,15,18,19,31,32,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,57,62,63,68,69,73,74,75,82,83,105,110,112,123,131,132,138,148,149,],[17,17,17,65,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'open_block':([2,32,73,131,132,149,],[27,27,27,27,27,27,]),'func_signature':([2,32,73,131,132,149,],[32,32,32,32,32,32,]),'elements':([15,],[59,]),'all_type':([34,133,152,],[78,142,142,]),'arguments':([57,68,83,],[100,108,121,]),'close_block':([73,],[113,]),'parameters':([133,],[143,]),'parameter':([133,152,],[145,155,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','project.py',601),
  ('statements -> statements statement','statements',2,'p_statements','project.py',617),
  ('statements -> <empty>','statements',0,'p_statements','project.py',618),
  ('statement -> expr ;','statement',2,'p_statement','project.py',630),
  ('statement -> declaration ;','statement',2,'p_statement','project.py',631),
  ('statement -> block','statement',1,'p_statement','project.py',632),
  ('statement -> if_block','statement',1,'p_statement','project.py',633),
  ('statement -> while_loop','statement',1,'p_statement','project.py',634),
  ('statement -> break ;','statement',2,'p_statement','project.py',635),
  ('statement -> return_statement ;','statement',2,'p_statement','project.py',636),
  ('statement -> function_def','statement',1,'p_statement','project.py',637),
  ('statement -> ;','statement',1,'p_empty_statement','project.py',643),
  ('block -> open_block statements close_block','block',3,'p_block','project.py',649),
  ('open_block -> {','open_block',1,'p_open_block','project.py',656),
  ('close_block -> }','close_block',1,'p_close_block','project.py',666),
  ('if_block -> COMMAND_IF ( expr ) statement','if_block',5,'p_if_block','project.py',677),
  ('if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement','if_block',7,'p_if_block','project.py',678),
  ('break -> COMMAND_BREAK','break',1,'p_break','project.py',687),
  ('while_loop -> COMMAND_WHILE ( expr ) statement','while_loop',5,'p_while_loop','project.py',694),
  ('declaration -> TYPE ID','declaration',2,'p_declaration','project.py',701),
  ('declaration -> TYPE ID = expr','declaration',4,'p_declaration','project.py',702),
  ('declaration -> ARRAY_TYPE ( TYPE ) ID','declaration',5,'p_declaration_array','project.py',716),
  ('declaration -> ARRAY_TYPE ( TYPE ) ID = expr','declaration',7,'p_declaration_array','project.py',717),
  ('declaration -> STRING_TYPE ID','declaration',2,'p_declaration_string','project.py',732),
  ('declaration -> STRING_TYPE ID = expr','declaration',4,'p_declaration_string','project.py',733),
  ('all_type -> TYPE','all_type',1,'p_all_type','project.py',749),
  ('all_type -> STRING_TYPE','all_type',1,'p_all_type','project.py',750),
  ('all_type -> ARRAY_TYPE ( TYPE )','all_type',4,'p_all_type','project.py',751),
  ('return_statement -> FUNC_RETURN expr','return_statement',2,'p_return_statement','project.py',761),
  ('function_def -> func_signature statement','function_def',2,'p_function_def','project.py',784),
  ('func_signature -> FUNC_DEFINE all_type ID ( parameters )','func_signature',6,'p_func_signature','project.py',802),
  ('func_signature -> FUNC_DEFINE all_type ID ( )','func_signature',5,'p_func_signature','project.py',803),
  ('parameters -> parameters , parameter','parameters',3,'p_prameters','project.py',834),
  ('parameters -> parameter','parameters',1,'p_prameters','project.py',835),
  ('parameter -> all_type ID','parameter',2,'p_parameter','project.py',845),
  ('expr -> ID ( arguments )','expr',4,'p_expr_function_call','project.py',854),
  ('expr -> ID ( )','expr',3,'p_expr_function_call','project.py',855),
  ('expr -> [ elements ]','expr',3,'p_expr_ar_literal','project.py',892),
  ('expr -> [ ]','expr',2,'p_expr_ar_literal','project.py',893),
  ('expr -> STRING_LITERAL','expr',1,'p_expr_ar_literal','project.py',894),
  ('elements -> expr','elements',1,'p_elements','project.py',925),
  ('elements -> elements , expr','elements',3,'p_elements','project.py',926),
  ('expr -> expr AR_METHOD_SIZE ( )','expr',4,'p_ar_method_size','project.py',940),
  ('expr -> expr AR_METHOD_SIZE ( expr )','expr',5,'p_ar_method_size','project.py',941),
  ('expr -> expr AR_METHOD_RESIZE ( arguments )','expr',5,'p_ar_method_resize','project.py',950),
  ('expr -> variable [ expr ]','expr',4,'p_ar_index','project.py',959),
  ('expr -> variable [ expr ] = expr','expr',6,'p_ar_index','project.py',960),
  ('expr -> expr + expr','expr',3,'p_expr_addition','project.py',972),
  ('expr -> expr - expr','expr',3,'p_expr_subtraction','project.py',978),
  ('expr -> expr * expr','expr',3,'p_expr_multiplication','project.py',984),
  ('expr -> expr / expr','expr',3,'p_expr_division','project.py',991),
  ('expr -> expr ASSIGN_ADD expr','expr',3,'p_expr_comp_addition','project.py',998),
  ('expr -> expr ASSIGN_SUB expr','expr',3,'p_expr_comp_subtraction','project.py',1004),
  ('expr -> expr ASSIGN_MULT expr','expr',3,'p_expr_comp_multiplication','project.py',1010),
  ('expr -> expr ASSIGN_DIV expr','expr',3,'p_expr_comp_division','project.py',1017),
  ('expr -> ( expr )','expr',3,'p_expr_prethesis','project.py',1023),
  ('expr -> expr COMP_EQU expr','expr',3,'p_expr_eq','project.py',1029),
  ('expr -> expr COMP_NEQU expr','expr',3,'p_expr_neq','project.py',1036),
  ('expr -> expr < expr','expr',3,'p_expr_LT','project.py',1043),
  ('expr -> expr COMP_LTE expr','expr',3,'p_expr_LE','project.py',1049),
  ('expr -> expr > expr','expr',3,'p_expr_GT','project.py',1055),
  ('expr -> expr COMP_GTE expr','expr',3,'p_expr_GE','project.py',1061),
  ('expr -> expr BOOL_AND expr','expr',3,'p_expr_and','project.py',1067),
  ('expr -> expr BOOL_OR expr','expr',3,'p_expr_or','project.py',1073),
  ('expr -> ! expr','expr',2,'p_expr_not','project.py',1079),
  ('expr -> COMMAND_PRINT ( arguments )','expr',4,'p_expr_print','project.py',1086),
  ('arguments -> expr','arguments',1,'p_expr_print_args','project.py',1092),
  ('arguments -> arguments , expr','arguments',3,'p_expr_print_args','project.py',1093),
  ('expr -> COMMAND_RANDOM ( expr )','expr',4,'p_expr_random','project.py',1103),
  ('expr -> VAL_LITERAL','expr',1,'p_expr_simple_val','project.py',1110),
  ('expr -> - VAL_LITERAL','expr',2,'p_expr_simple_val','project.py',1111),
  ('expr -> CHAR_LITERAL','expr',1,'p_expr_simple_char','project.py',1120),
  ('expr -> variable','expr',1,'p_expr_simple_var','project.py',1126),
  ('expr -> - variable','expr',2,'p_expr_simple_var','project.py',1127),
  ('expr -> variable = expr','expr',3,'p_assignment','project.py',1138),
  ('variable -> ID','variable',1,'p_check_ID','project.py',1145),
]
