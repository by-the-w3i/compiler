Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    WHITESPACE
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> <empty>
Rule 4     statement -> expr ;
Rule 5     statement -> declaration ;
Rule 6     statement -> block
Rule 7     statement -> if_block
Rule 8     statement -> while_loop
Rule 9     statement -> break ;
Rule 10    statement -> return_statement ;
Rule 11    statement -> function_def
Rule 12    statement -> ;
Rule 13    block -> open_block statements close_block
Rule 14    open_block -> {
Rule 15    close_block -> }
Rule 16    if_block -> COMMAND_IF ( expr ) statement
Rule 17    if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement
Rule 18    break -> COMMAND_BREAK
Rule 19    while_loop -> COMMAND_WHILE ( expr ) statement
Rule 20    declaration -> TYPE ID
Rule 21    declaration -> TYPE ID = expr
Rule 22    declaration -> ARRAY_TYPE ( TYPE ) ID
Rule 23    declaration -> ARRAY_TYPE ( TYPE ) ID = expr
Rule 24    declaration -> STRING_TYPE ID
Rule 25    declaration -> STRING_TYPE ID = expr
Rule 26    all_type -> TYPE
Rule 27    all_type -> STRING_TYPE
Rule 28    all_type -> ARRAY_TYPE ( TYPE )
Rule 29    return_statement -> FUNC_RETURN expr
Rule 30    function_def -> func_signature statement
Rule 31    func_signature -> FUNC_DEFINE all_type ID ( parameters )
Rule 32    func_signature -> FUNC_DEFINE all_type ID ( )
Rule 33    parameters -> parameters , parameter
Rule 34    parameters -> parameter
Rule 35    parameter -> all_type ID
Rule 36    expr -> ID ( arguments )
Rule 37    expr -> ID ( )
Rule 38    expr -> [ elements ]
Rule 39    expr -> [ ]
Rule 40    expr -> STRING_LITERAL
Rule 41    elements -> expr
Rule 42    elements -> elements , expr
Rule 43    expr -> expr AR_METHOD_SIZE ( )
Rule 44    expr -> expr AR_METHOD_SIZE ( expr )
Rule 45    expr -> expr AR_METHOD_RESIZE ( arguments )
Rule 46    expr -> variable [ expr ]
Rule 47    expr -> variable [ expr ] = expr
Rule 48    expr -> expr + expr
Rule 49    expr -> expr - expr
Rule 50    expr -> expr * expr
Rule 51    expr -> expr / expr
Rule 52    expr -> expr ASSIGN_ADD expr
Rule 53    expr -> expr ASSIGN_SUB expr
Rule 54    expr -> expr ASSIGN_MULT expr
Rule 55    expr -> expr ASSIGN_DIV expr
Rule 56    expr -> ( expr )
Rule 57    expr -> expr COMP_EQU expr
Rule 58    expr -> expr COMP_NEQU expr
Rule 59    expr -> expr < expr
Rule 60    expr -> expr COMP_LTE expr
Rule 61    expr -> expr > expr
Rule 62    expr -> expr COMP_GTE expr
Rule 63    expr -> expr BOOL_AND expr
Rule 64    expr -> expr BOOL_OR expr
Rule 65    expr -> ! expr
Rule 66    expr -> COMMAND_PRINT ( arguments )
Rule 67    arguments -> expr
Rule 68    arguments -> arguments , expr
Rule 69    expr -> COMMAND_RANDOM ( expr )
Rule 70    expr -> VAL_LITERAL
Rule 71    expr -> - VAL_LITERAL
Rule 72    expr -> CHAR_LITERAL
Rule 73    expr -> variable
Rule 74    expr -> - variable
Rule 75    expr -> variable = expr
Rule 76    variable -> ID

Terminals, with rules where they appear

!                    : 65
(                    : 16 17 19 22 23 28 31 32 36 37 43 44 45 56 66 69
)                    : 16 17 19 22 23 28 31 32 36 37 43 44 45 56 66 69
*                    : 50
+                    : 48
,                    : 33 42 68
-                    : 49 71 74
/                    : 51
;                    : 4 5 9 10 12
<                    : 59
=                    : 21 23 25 47 75
>                    : 61
ARRAY_TYPE           : 22 23 28
AR_METHOD_RESIZE     : 45
AR_METHOD_SIZE       : 43 44
ASSIGN_ADD           : 52
ASSIGN_DIV           : 55
ASSIGN_MULT          : 54
ASSIGN_SUB           : 53
BOOL_AND             : 63
BOOL_OR              : 64
CHAR_LITERAL         : 72
COMMAND_BREAK        : 18
COMMAND_ELSE         : 17
COMMAND_IF           : 16 17
COMMAND_PRINT        : 66
COMMAND_RANDOM       : 69
COMMAND_WHILE        : 19
COMMENT              : 
COMP_EQU             : 57
COMP_GTE             : 62
COMP_LTE             : 60
COMP_NEQU            : 58
FUNC_DEFINE          : 31 32
FUNC_RETURN          : 29
ID                   : 20 21 22 23 24 25 31 32 35 36 37 76
STRING_LITERAL       : 40
STRING_TYPE          : 24 25 27
TYPE                 : 20 21 22 23 26 28
VAL_LITERAL          : 70 71
WHITESPACE           : 
[                    : 38 39 46 47
]                    : 38 39 46 47
error                : 
{                    : 14
}                    : 15

Nonterminals, with rules where they appear

all_type             : 31 32 35
arguments            : 36 45 66 68
block                : 6
break                : 9
close_block          : 13
declaration          : 5
elements             : 38 42
expr                 : 4 16 17 19 21 23 25 29 41 42 43 44 44 45 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 67 68 69 75
func_signature       : 30
function_def         : 11
if_block             : 7
open_block           : 13
parameter            : 33 34
parameters           : 31 33
program              : 0
return_statement     : 10
statement            : 2 16 17 17 19 30
statements           : 1 2 13
variable             : 46 47 73 74 75
while_loop           : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> .

    ;               reduce using rule 3 (statements -> .)
    ID              reduce using rule 3 (statements -> .)
    [               reduce using rule 3 (statements -> .)
    STRING_LITERAL  reduce using rule 3 (statements -> .)
    (               reduce using rule 3 (statements -> .)
    !               reduce using rule 3 (statements -> .)
    COMMAND_PRINT   reduce using rule 3 (statements -> .)
    COMMAND_RANDOM  reduce using rule 3 (statements -> .)
    VAL_LITERAL     reduce using rule 3 (statements -> .)
    -               reduce using rule 3 (statements -> .)
    CHAR_LITERAL    reduce using rule 3 (statements -> .)
    TYPE            reduce using rule 3 (statements -> .)
    ARRAY_TYPE      reduce using rule 3 (statements -> .)
    STRING_TYPE     reduce using rule 3 (statements -> .)
    COMMAND_IF      reduce using rule 3 (statements -> .)
    COMMAND_WHILE   reduce using rule 3 (statements -> .)
    COMMAND_BREAK   reduce using rule 3 (statements -> .)
    FUNC_RETURN     reduce using rule 3 (statements -> .)
    {               reduce using rule 3 (statements -> .)
    FUNC_DEFINE     reduce using rule 3 (statements -> .)
    $end            reduce using rule 3 (statements -> .)

    program                        shift and go to state 1
    statements                     shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . return_statement ;
    (11) statement -> . function_def
    (12) statement -> . ;
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (20) declaration -> . TYPE ID
    (21) declaration -> . TYPE ID = expr
    (22) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (23) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (24) declaration -> . STRING_TYPE ID
    (25) declaration -> . STRING_TYPE ID = expr
    (13) block -> . open_block statements close_block
    (16) if_block -> . COMMAND_IF ( expr ) statement
    (17) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (19) while_loop -> . COMMAND_WHILE ( expr ) statement
    (18) break -> . COMMAND_BREAK
    (29) return_statement -> . FUNC_RETURN expr
    (30) function_def -> . func_signature statement
    (76) variable -> . ID
    (14) open_block -> . {
    (31) func_signature -> . FUNC_DEFINE all_type ID ( parameters )
    (32) func_signature -> . FUNC_DEFINE all_type ID ( )

    $end            reduce using rule 1 (program -> statements .)
    ;               shift and go to state 5
    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23
    TYPE            shift and go to state 24
    ARRAY_TYPE      shift and go to state 25
    STRING_TYPE     shift and go to state 26
    COMMAND_IF      shift and go to state 28
    COMMAND_WHILE   shift and go to state 29
    COMMAND_BREAK   shift and go to state 30
    FUNC_RETURN     shift and go to state 31
    {               shift and go to state 33
    FUNC_DEFINE     shift and go to state 34

    statement                      shift and go to state 3
    expr                           shift and go to state 4
    declaration                    shift and go to state 6
    block                          shift and go to state 7
    if_block                       shift and go to state 8
    while_loop                     shift and go to state 9
    break                          shift and go to state 10
    return_statement               shift and go to state 11
    function_def                   shift and go to state 12
    variable                       shift and go to state 17
    open_block                     shift and go to state 27
    func_signature                 shift and go to state 32

state 3

    (2) statements -> statements statement .

    ;               reduce using rule 2 (statements -> statements statement .)
    ID              reduce using rule 2 (statements -> statements statement .)
    [               reduce using rule 2 (statements -> statements statement .)
    STRING_LITERAL  reduce using rule 2 (statements -> statements statement .)
    (               reduce using rule 2 (statements -> statements statement .)
    !               reduce using rule 2 (statements -> statements statement .)
    COMMAND_PRINT   reduce using rule 2 (statements -> statements statement .)
    COMMAND_RANDOM  reduce using rule 2 (statements -> statements statement .)
    VAL_LITERAL     reduce using rule 2 (statements -> statements statement .)
    -               reduce using rule 2 (statements -> statements statement .)
    CHAR_LITERAL    reduce using rule 2 (statements -> statements statement .)
    TYPE            reduce using rule 2 (statements -> statements statement .)
    ARRAY_TYPE      reduce using rule 2 (statements -> statements statement .)
    STRING_TYPE     reduce using rule 2 (statements -> statements statement .)
    COMMAND_IF      reduce using rule 2 (statements -> statements statement .)
    COMMAND_WHILE   reduce using rule 2 (statements -> statements statement .)
    COMMAND_BREAK   reduce using rule 2 (statements -> statements statement .)
    FUNC_RETURN     reduce using rule 2 (statements -> statements statement .)
    {               reduce using rule 2 (statements -> statements statement .)
    FUNC_DEFINE     reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    }               reduce using rule 2 (statements -> statements statement .)


state 4

    (4) statement -> expr . ;
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               shift and go to state 35
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53


state 5

    (12) statement -> ; .

    ;               reduce using rule 12 (statement -> ; .)
    ID              reduce using rule 12 (statement -> ; .)
    [               reduce using rule 12 (statement -> ; .)
    STRING_LITERAL  reduce using rule 12 (statement -> ; .)
    (               reduce using rule 12 (statement -> ; .)
    !               reduce using rule 12 (statement -> ; .)
    COMMAND_PRINT   reduce using rule 12 (statement -> ; .)
    COMMAND_RANDOM  reduce using rule 12 (statement -> ; .)
    VAL_LITERAL     reduce using rule 12 (statement -> ; .)
    -               reduce using rule 12 (statement -> ; .)
    CHAR_LITERAL    reduce using rule 12 (statement -> ; .)
    TYPE            reduce using rule 12 (statement -> ; .)
    ARRAY_TYPE      reduce using rule 12 (statement -> ; .)
    STRING_TYPE     reduce using rule 12 (statement -> ; .)
    COMMAND_IF      reduce using rule 12 (statement -> ; .)
    COMMAND_WHILE   reduce using rule 12 (statement -> ; .)
    COMMAND_BREAK   reduce using rule 12 (statement -> ; .)
    FUNC_RETURN     reduce using rule 12 (statement -> ; .)
    {               reduce using rule 12 (statement -> ; .)
    FUNC_DEFINE     reduce using rule 12 (statement -> ; .)
    $end            reduce using rule 12 (statement -> ; .)
    }               reduce using rule 12 (statement -> ; .)
    COMMAND_ELSE    reduce using rule 12 (statement -> ; .)


state 6

    (5) statement -> declaration . ;

    ;               shift and go to state 54


state 7

    (6) statement -> block .

    ;               reduce using rule 6 (statement -> block .)
    ID              reduce using rule 6 (statement -> block .)
    [               reduce using rule 6 (statement -> block .)
    STRING_LITERAL  reduce using rule 6 (statement -> block .)
    (               reduce using rule 6 (statement -> block .)
    !               reduce using rule 6 (statement -> block .)
    COMMAND_PRINT   reduce using rule 6 (statement -> block .)
    COMMAND_RANDOM  reduce using rule 6 (statement -> block .)
    VAL_LITERAL     reduce using rule 6 (statement -> block .)
    -               reduce using rule 6 (statement -> block .)
    CHAR_LITERAL    reduce using rule 6 (statement -> block .)
    TYPE            reduce using rule 6 (statement -> block .)
    ARRAY_TYPE      reduce using rule 6 (statement -> block .)
    STRING_TYPE     reduce using rule 6 (statement -> block .)
    COMMAND_IF      reduce using rule 6 (statement -> block .)
    COMMAND_WHILE   reduce using rule 6 (statement -> block .)
    COMMAND_BREAK   reduce using rule 6 (statement -> block .)
    FUNC_RETURN     reduce using rule 6 (statement -> block .)
    {               reduce using rule 6 (statement -> block .)
    FUNC_DEFINE     reduce using rule 6 (statement -> block .)
    $end            reduce using rule 6 (statement -> block .)
    }               reduce using rule 6 (statement -> block .)
    COMMAND_ELSE    reduce using rule 6 (statement -> block .)


state 8

    (7) statement -> if_block .

    ;               reduce using rule 7 (statement -> if_block .)
    ID              reduce using rule 7 (statement -> if_block .)
    [               reduce using rule 7 (statement -> if_block .)
    STRING_LITERAL  reduce using rule 7 (statement -> if_block .)
    (               reduce using rule 7 (statement -> if_block .)
    !               reduce using rule 7 (statement -> if_block .)
    COMMAND_PRINT   reduce using rule 7 (statement -> if_block .)
    COMMAND_RANDOM  reduce using rule 7 (statement -> if_block .)
    VAL_LITERAL     reduce using rule 7 (statement -> if_block .)
    -               reduce using rule 7 (statement -> if_block .)
    CHAR_LITERAL    reduce using rule 7 (statement -> if_block .)
    TYPE            reduce using rule 7 (statement -> if_block .)
    ARRAY_TYPE      reduce using rule 7 (statement -> if_block .)
    STRING_TYPE     reduce using rule 7 (statement -> if_block .)
    COMMAND_IF      reduce using rule 7 (statement -> if_block .)
    COMMAND_WHILE   reduce using rule 7 (statement -> if_block .)
    COMMAND_BREAK   reduce using rule 7 (statement -> if_block .)
    FUNC_RETURN     reduce using rule 7 (statement -> if_block .)
    {               reduce using rule 7 (statement -> if_block .)
    FUNC_DEFINE     reduce using rule 7 (statement -> if_block .)
    $end            reduce using rule 7 (statement -> if_block .)
    }               reduce using rule 7 (statement -> if_block .)
    COMMAND_ELSE    reduce using rule 7 (statement -> if_block .)


state 9

    (8) statement -> while_loop .

    ;               reduce using rule 8 (statement -> while_loop .)
    ID              reduce using rule 8 (statement -> while_loop .)
    [               reduce using rule 8 (statement -> while_loop .)
    STRING_LITERAL  reduce using rule 8 (statement -> while_loop .)
    (               reduce using rule 8 (statement -> while_loop .)
    !               reduce using rule 8 (statement -> while_loop .)
    COMMAND_PRINT   reduce using rule 8 (statement -> while_loop .)
    COMMAND_RANDOM  reduce using rule 8 (statement -> while_loop .)
    VAL_LITERAL     reduce using rule 8 (statement -> while_loop .)
    -               reduce using rule 8 (statement -> while_loop .)
    CHAR_LITERAL    reduce using rule 8 (statement -> while_loop .)
    TYPE            reduce using rule 8 (statement -> while_loop .)
    ARRAY_TYPE      reduce using rule 8 (statement -> while_loop .)
    STRING_TYPE     reduce using rule 8 (statement -> while_loop .)
    COMMAND_IF      reduce using rule 8 (statement -> while_loop .)
    COMMAND_WHILE   reduce using rule 8 (statement -> while_loop .)
    COMMAND_BREAK   reduce using rule 8 (statement -> while_loop .)
    FUNC_RETURN     reduce using rule 8 (statement -> while_loop .)
    {               reduce using rule 8 (statement -> while_loop .)
    FUNC_DEFINE     reduce using rule 8 (statement -> while_loop .)
    $end            reduce using rule 8 (statement -> while_loop .)
    }               reduce using rule 8 (statement -> while_loop .)
    COMMAND_ELSE    reduce using rule 8 (statement -> while_loop .)


state 10

    (9) statement -> break . ;

    ;               shift and go to state 55


state 11

    (10) statement -> return_statement . ;

    ;               shift and go to state 56


state 12

    (11) statement -> function_def .

    ;               reduce using rule 11 (statement -> function_def .)
    ID              reduce using rule 11 (statement -> function_def .)
    [               reduce using rule 11 (statement -> function_def .)
    STRING_LITERAL  reduce using rule 11 (statement -> function_def .)
    (               reduce using rule 11 (statement -> function_def .)
    !               reduce using rule 11 (statement -> function_def .)
    COMMAND_PRINT   reduce using rule 11 (statement -> function_def .)
    COMMAND_RANDOM  reduce using rule 11 (statement -> function_def .)
    VAL_LITERAL     reduce using rule 11 (statement -> function_def .)
    -               reduce using rule 11 (statement -> function_def .)
    CHAR_LITERAL    reduce using rule 11 (statement -> function_def .)
    TYPE            reduce using rule 11 (statement -> function_def .)
    ARRAY_TYPE      reduce using rule 11 (statement -> function_def .)
    STRING_TYPE     reduce using rule 11 (statement -> function_def .)
    COMMAND_IF      reduce using rule 11 (statement -> function_def .)
    COMMAND_WHILE   reduce using rule 11 (statement -> function_def .)
    COMMAND_BREAK   reduce using rule 11 (statement -> function_def .)
    FUNC_RETURN     reduce using rule 11 (statement -> function_def .)
    {               reduce using rule 11 (statement -> function_def .)
    FUNC_DEFINE     reduce using rule 11 (statement -> function_def .)
    $end            reduce using rule 11 (statement -> function_def .)
    }               reduce using rule 11 (statement -> function_def .)
    COMMAND_ELSE    reduce using rule 11 (statement -> function_def .)


state 13

    (36) expr -> ID . ( arguments )
    (37) expr -> ID . ( )
    (76) variable -> ID .

    (               shift and go to state 57
    [               reduce using rule 76 (variable -> ID .)
    =               reduce using rule 76 (variable -> ID .)
    ;               reduce using rule 76 (variable -> ID .)
    AR_METHOD_SIZE  reduce using rule 76 (variable -> ID .)
    AR_METHOD_RESIZE reduce using rule 76 (variable -> ID .)
    +               reduce using rule 76 (variable -> ID .)
    -               reduce using rule 76 (variable -> ID .)
    *               reduce using rule 76 (variable -> ID .)
    /               reduce using rule 76 (variable -> ID .)
    ASSIGN_ADD      reduce using rule 76 (variable -> ID .)
    ASSIGN_SUB      reduce using rule 76 (variable -> ID .)
    ASSIGN_MULT     reduce using rule 76 (variable -> ID .)
    ASSIGN_DIV      reduce using rule 76 (variable -> ID .)
    COMP_EQU        reduce using rule 76 (variable -> ID .)
    COMP_NEQU       reduce using rule 76 (variable -> ID .)
    <               reduce using rule 76 (variable -> ID .)
    COMP_LTE        reduce using rule 76 (variable -> ID .)
    >               reduce using rule 76 (variable -> ID .)
    COMP_GTE        reduce using rule 76 (variable -> ID .)
    BOOL_AND        reduce using rule 76 (variable -> ID .)
    BOOL_OR         reduce using rule 76 (variable -> ID .)
    )               reduce using rule 76 (variable -> ID .)
    ]               reduce using rule 76 (variable -> ID .)
    ,               reduce using rule 76 (variable -> ID .)


state 14

    (56) expr -> ( . expr )
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 58
    variable                       shift and go to state 17

state 15

    (38) expr -> [ . elements ]
    (39) expr -> [ . ]
    (41) elements -> . expr
    (42) elements -> . elements , expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ]               shift and go to state 60
    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    elements                       shift and go to state 59
    expr                           shift and go to state 61
    variable                       shift and go to state 17

state 16

    (40) expr -> STRING_LITERAL .

    ;               reduce using rule 40 (expr -> STRING_LITERAL .)
    AR_METHOD_SIZE  reduce using rule 40 (expr -> STRING_LITERAL .)
    AR_METHOD_RESIZE reduce using rule 40 (expr -> STRING_LITERAL .)
    +               reduce using rule 40 (expr -> STRING_LITERAL .)
    -               reduce using rule 40 (expr -> STRING_LITERAL .)
    *               reduce using rule 40 (expr -> STRING_LITERAL .)
    /               reduce using rule 40 (expr -> STRING_LITERAL .)
    ASSIGN_ADD      reduce using rule 40 (expr -> STRING_LITERAL .)
    ASSIGN_SUB      reduce using rule 40 (expr -> STRING_LITERAL .)
    ASSIGN_MULT     reduce using rule 40 (expr -> STRING_LITERAL .)
    ASSIGN_DIV      reduce using rule 40 (expr -> STRING_LITERAL .)
    COMP_EQU        reduce using rule 40 (expr -> STRING_LITERAL .)
    COMP_NEQU       reduce using rule 40 (expr -> STRING_LITERAL .)
    <               reduce using rule 40 (expr -> STRING_LITERAL .)
    COMP_LTE        reduce using rule 40 (expr -> STRING_LITERAL .)
    >               reduce using rule 40 (expr -> STRING_LITERAL .)
    COMP_GTE        reduce using rule 40 (expr -> STRING_LITERAL .)
    BOOL_AND        reduce using rule 40 (expr -> STRING_LITERAL .)
    BOOL_OR         reduce using rule 40 (expr -> STRING_LITERAL .)
    )               reduce using rule 40 (expr -> STRING_LITERAL .)
    ]               reduce using rule 40 (expr -> STRING_LITERAL .)
    ,               reduce using rule 40 (expr -> STRING_LITERAL .)


state 17

    (46) expr -> variable . [ expr ]
    (47) expr -> variable . [ expr ] = expr
    (73) expr -> variable .
    (75) expr -> variable . = expr

    [               shift and go to state 62
    ;               reduce using rule 73 (expr -> variable .)
    AR_METHOD_SIZE  reduce using rule 73 (expr -> variable .)
    AR_METHOD_RESIZE reduce using rule 73 (expr -> variable .)
    +               reduce using rule 73 (expr -> variable .)
    -               reduce using rule 73 (expr -> variable .)
    *               reduce using rule 73 (expr -> variable .)
    /               reduce using rule 73 (expr -> variable .)
    ASSIGN_ADD      reduce using rule 73 (expr -> variable .)
    ASSIGN_SUB      reduce using rule 73 (expr -> variable .)
    ASSIGN_MULT     reduce using rule 73 (expr -> variable .)
    ASSIGN_DIV      reduce using rule 73 (expr -> variable .)
    COMP_EQU        reduce using rule 73 (expr -> variable .)
    COMP_NEQU       reduce using rule 73 (expr -> variable .)
    <               reduce using rule 73 (expr -> variable .)
    COMP_LTE        reduce using rule 73 (expr -> variable .)
    >               reduce using rule 73 (expr -> variable .)
    COMP_GTE        reduce using rule 73 (expr -> variable .)
    BOOL_AND        reduce using rule 73 (expr -> variable .)
    BOOL_OR         reduce using rule 73 (expr -> variable .)
    )               reduce using rule 73 (expr -> variable .)
    ]               reduce using rule 73 (expr -> variable .)
    ,               reduce using rule 73 (expr -> variable .)
    =               shift and go to state 63


state 18

    (71) expr -> - . VAL_LITERAL
    (74) expr -> - . variable
    (76) variable -> . ID

    VAL_LITERAL     shift and go to state 64
    ID              shift and go to state 66

    variable                       shift and go to state 65

state 19

    (65) expr -> ! . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 67
    variable                       shift and go to state 17

state 20

    (66) expr -> COMMAND_PRINT . ( arguments )

    (               shift and go to state 68


state 21

    (69) expr -> COMMAND_RANDOM . ( expr )

    (               shift and go to state 69


state 22

    (70) expr -> VAL_LITERAL .

    ;               reduce using rule 70 (expr -> VAL_LITERAL .)
    AR_METHOD_SIZE  reduce using rule 70 (expr -> VAL_LITERAL .)
    AR_METHOD_RESIZE reduce using rule 70 (expr -> VAL_LITERAL .)
    +               reduce using rule 70 (expr -> VAL_LITERAL .)
    -               reduce using rule 70 (expr -> VAL_LITERAL .)
    *               reduce using rule 70 (expr -> VAL_LITERAL .)
    /               reduce using rule 70 (expr -> VAL_LITERAL .)
    ASSIGN_ADD      reduce using rule 70 (expr -> VAL_LITERAL .)
    ASSIGN_SUB      reduce using rule 70 (expr -> VAL_LITERAL .)
    ASSIGN_MULT     reduce using rule 70 (expr -> VAL_LITERAL .)
    ASSIGN_DIV      reduce using rule 70 (expr -> VAL_LITERAL .)
    COMP_EQU        reduce using rule 70 (expr -> VAL_LITERAL .)
    COMP_NEQU       reduce using rule 70 (expr -> VAL_LITERAL .)
    <               reduce using rule 70 (expr -> VAL_LITERAL .)
    COMP_LTE        reduce using rule 70 (expr -> VAL_LITERAL .)
    >               reduce using rule 70 (expr -> VAL_LITERAL .)
    COMP_GTE        reduce using rule 70 (expr -> VAL_LITERAL .)
    BOOL_AND        reduce using rule 70 (expr -> VAL_LITERAL .)
    BOOL_OR         reduce using rule 70 (expr -> VAL_LITERAL .)
    )               reduce using rule 70 (expr -> VAL_LITERAL .)
    ]               reduce using rule 70 (expr -> VAL_LITERAL .)
    ,               reduce using rule 70 (expr -> VAL_LITERAL .)


state 23

    (72) expr -> CHAR_LITERAL .

    ;               reduce using rule 72 (expr -> CHAR_LITERAL .)
    AR_METHOD_SIZE  reduce using rule 72 (expr -> CHAR_LITERAL .)
    AR_METHOD_RESIZE reduce using rule 72 (expr -> CHAR_LITERAL .)
    +               reduce using rule 72 (expr -> CHAR_LITERAL .)
    -               reduce using rule 72 (expr -> CHAR_LITERAL .)
    *               reduce using rule 72 (expr -> CHAR_LITERAL .)
    /               reduce using rule 72 (expr -> CHAR_LITERAL .)
    ASSIGN_ADD      reduce using rule 72 (expr -> CHAR_LITERAL .)
    ASSIGN_SUB      reduce using rule 72 (expr -> CHAR_LITERAL .)
    ASSIGN_MULT     reduce using rule 72 (expr -> CHAR_LITERAL .)
    ASSIGN_DIV      reduce using rule 72 (expr -> CHAR_LITERAL .)
    COMP_EQU        reduce using rule 72 (expr -> CHAR_LITERAL .)
    COMP_NEQU       reduce using rule 72 (expr -> CHAR_LITERAL .)
    <               reduce using rule 72 (expr -> CHAR_LITERAL .)
    COMP_LTE        reduce using rule 72 (expr -> CHAR_LITERAL .)
    >               reduce using rule 72 (expr -> CHAR_LITERAL .)
    COMP_GTE        reduce using rule 72 (expr -> CHAR_LITERAL .)
    BOOL_AND        reduce using rule 72 (expr -> CHAR_LITERAL .)
    BOOL_OR         reduce using rule 72 (expr -> CHAR_LITERAL .)
    )               reduce using rule 72 (expr -> CHAR_LITERAL .)
    ]               reduce using rule 72 (expr -> CHAR_LITERAL .)
    ,               reduce using rule 72 (expr -> CHAR_LITERAL .)


state 24

    (20) declaration -> TYPE . ID
    (21) declaration -> TYPE . ID = expr

    ID              shift and go to state 70


state 25

    (22) declaration -> ARRAY_TYPE . ( TYPE ) ID
    (23) declaration -> ARRAY_TYPE . ( TYPE ) ID = expr

    (               shift and go to state 71


state 26

    (24) declaration -> STRING_TYPE . ID
    (25) declaration -> STRING_TYPE . ID = expr

    ID              shift and go to state 72


state 27

    (13) block -> open_block . statements close_block
    (2) statements -> . statements statement
    (3) statements -> .

    }               reduce using rule 3 (statements -> .)
    ;               reduce using rule 3 (statements -> .)
    ID              reduce using rule 3 (statements -> .)
    [               reduce using rule 3 (statements -> .)
    STRING_LITERAL  reduce using rule 3 (statements -> .)
    (               reduce using rule 3 (statements -> .)
    !               reduce using rule 3 (statements -> .)
    COMMAND_PRINT   reduce using rule 3 (statements -> .)
    COMMAND_RANDOM  reduce using rule 3 (statements -> .)
    VAL_LITERAL     reduce using rule 3 (statements -> .)
    -               reduce using rule 3 (statements -> .)
    CHAR_LITERAL    reduce using rule 3 (statements -> .)
    TYPE            reduce using rule 3 (statements -> .)
    ARRAY_TYPE      reduce using rule 3 (statements -> .)
    STRING_TYPE     reduce using rule 3 (statements -> .)
    COMMAND_IF      reduce using rule 3 (statements -> .)
    COMMAND_WHILE   reduce using rule 3 (statements -> .)
    COMMAND_BREAK   reduce using rule 3 (statements -> .)
    FUNC_RETURN     reduce using rule 3 (statements -> .)
    {               reduce using rule 3 (statements -> .)
    FUNC_DEFINE     reduce using rule 3 (statements -> .)

    statements                     shift and go to state 73

state 28

    (16) if_block -> COMMAND_IF . ( expr ) statement
    (17) if_block -> COMMAND_IF . ( expr ) statement COMMAND_ELSE statement

    (               shift and go to state 74


state 29

    (19) while_loop -> COMMAND_WHILE . ( expr ) statement

    (               shift and go to state 75


state 30

    (18) break -> COMMAND_BREAK .

    ;               reduce using rule 18 (break -> COMMAND_BREAK .)


state 31

    (29) return_statement -> FUNC_RETURN . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 76
    variable                       shift and go to state 17

state 32

    (30) function_def -> func_signature . statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . return_statement ;
    (11) statement -> . function_def
    (12) statement -> . ;
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (20) declaration -> . TYPE ID
    (21) declaration -> . TYPE ID = expr
    (22) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (23) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (24) declaration -> . STRING_TYPE ID
    (25) declaration -> . STRING_TYPE ID = expr
    (13) block -> . open_block statements close_block
    (16) if_block -> . COMMAND_IF ( expr ) statement
    (17) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (19) while_loop -> . COMMAND_WHILE ( expr ) statement
    (18) break -> . COMMAND_BREAK
    (29) return_statement -> . FUNC_RETURN expr
    (30) function_def -> . func_signature statement
    (76) variable -> . ID
    (14) open_block -> . {
    (31) func_signature -> . FUNC_DEFINE all_type ID ( parameters )
    (32) func_signature -> . FUNC_DEFINE all_type ID ( )

    ;               shift and go to state 5
    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23
    TYPE            shift and go to state 24
    ARRAY_TYPE      shift and go to state 25
    STRING_TYPE     shift and go to state 26
    COMMAND_IF      shift and go to state 28
    COMMAND_WHILE   shift and go to state 29
    COMMAND_BREAK   shift and go to state 30
    FUNC_RETURN     shift and go to state 31
    {               shift and go to state 33
    FUNC_DEFINE     shift and go to state 34

    func_signature                 shift and go to state 32
    statement                      shift and go to state 77
    expr                           shift and go to state 4
    declaration                    shift and go to state 6
    block                          shift and go to state 7
    if_block                       shift and go to state 8
    while_loop                     shift and go to state 9
    break                          shift and go to state 10
    return_statement               shift and go to state 11
    function_def                   shift and go to state 12
    variable                       shift and go to state 17
    open_block                     shift and go to state 27

state 33

    (14) open_block -> { .

    }               reduce using rule 14 (open_block -> { .)
    ;               reduce using rule 14 (open_block -> { .)
    ID              reduce using rule 14 (open_block -> { .)
    [               reduce using rule 14 (open_block -> { .)
    STRING_LITERAL  reduce using rule 14 (open_block -> { .)
    (               reduce using rule 14 (open_block -> { .)
    !               reduce using rule 14 (open_block -> { .)
    COMMAND_PRINT   reduce using rule 14 (open_block -> { .)
    COMMAND_RANDOM  reduce using rule 14 (open_block -> { .)
    VAL_LITERAL     reduce using rule 14 (open_block -> { .)
    -               reduce using rule 14 (open_block -> { .)
    CHAR_LITERAL    reduce using rule 14 (open_block -> { .)
    TYPE            reduce using rule 14 (open_block -> { .)
    ARRAY_TYPE      reduce using rule 14 (open_block -> { .)
    STRING_TYPE     reduce using rule 14 (open_block -> { .)
    COMMAND_IF      reduce using rule 14 (open_block -> { .)
    COMMAND_WHILE   reduce using rule 14 (open_block -> { .)
    COMMAND_BREAK   reduce using rule 14 (open_block -> { .)
    FUNC_RETURN     reduce using rule 14 (open_block -> { .)
    {               reduce using rule 14 (open_block -> { .)
    FUNC_DEFINE     reduce using rule 14 (open_block -> { .)


state 34

    (31) func_signature -> FUNC_DEFINE . all_type ID ( parameters )
    (32) func_signature -> FUNC_DEFINE . all_type ID ( )
    (26) all_type -> . TYPE
    (27) all_type -> . STRING_TYPE
    (28) all_type -> . ARRAY_TYPE ( TYPE )

    TYPE            shift and go to state 79
    STRING_TYPE     shift and go to state 80
    ARRAY_TYPE      shift and go to state 81

    all_type                       shift and go to state 78

state 35

    (4) statement -> expr ; .

    ;               reduce using rule 4 (statement -> expr ; .)
    ID              reduce using rule 4 (statement -> expr ; .)
    [               reduce using rule 4 (statement -> expr ; .)
    STRING_LITERAL  reduce using rule 4 (statement -> expr ; .)
    (               reduce using rule 4 (statement -> expr ; .)
    !               reduce using rule 4 (statement -> expr ; .)
    COMMAND_PRINT   reduce using rule 4 (statement -> expr ; .)
    COMMAND_RANDOM  reduce using rule 4 (statement -> expr ; .)
    VAL_LITERAL     reduce using rule 4 (statement -> expr ; .)
    -               reduce using rule 4 (statement -> expr ; .)
    CHAR_LITERAL    reduce using rule 4 (statement -> expr ; .)
    TYPE            reduce using rule 4 (statement -> expr ; .)
    ARRAY_TYPE      reduce using rule 4 (statement -> expr ; .)
    STRING_TYPE     reduce using rule 4 (statement -> expr ; .)
    COMMAND_IF      reduce using rule 4 (statement -> expr ; .)
    COMMAND_WHILE   reduce using rule 4 (statement -> expr ; .)
    COMMAND_BREAK   reduce using rule 4 (statement -> expr ; .)
    FUNC_RETURN     reduce using rule 4 (statement -> expr ; .)
    {               reduce using rule 4 (statement -> expr ; .)
    FUNC_DEFINE     reduce using rule 4 (statement -> expr ; .)
    $end            reduce using rule 4 (statement -> expr ; .)
    }               reduce using rule 4 (statement -> expr ; .)
    COMMAND_ELSE    reduce using rule 4 (statement -> expr ; .)


state 36

    (43) expr -> expr AR_METHOD_SIZE . ( )
    (44) expr -> expr AR_METHOD_SIZE . ( expr )

    (               shift and go to state 82


state 37

    (45) expr -> expr AR_METHOD_RESIZE . ( arguments )

    (               shift and go to state 83


state 38

    (48) expr -> expr + . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 84
    variable                       shift and go to state 17

state 39

    (49) expr -> expr - . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 85
    variable                       shift and go to state 17

state 40

    (50) expr -> expr * . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 86
    variable                       shift and go to state 17

state 41

    (51) expr -> expr / . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 87
    variable                       shift and go to state 17

state 42

    (52) expr -> expr ASSIGN_ADD . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 88
    variable                       shift and go to state 17

state 43

    (53) expr -> expr ASSIGN_SUB . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 89
    variable                       shift and go to state 17

state 44

    (54) expr -> expr ASSIGN_MULT . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 90
    variable                       shift and go to state 17

state 45

    (55) expr -> expr ASSIGN_DIV . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 91
    variable                       shift and go to state 17

state 46

    (57) expr -> expr COMP_EQU . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 92
    variable                       shift and go to state 17

state 47

    (58) expr -> expr COMP_NEQU . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 93
    variable                       shift and go to state 17

state 48

    (59) expr -> expr < . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 94
    variable                       shift and go to state 17

state 49

    (60) expr -> expr COMP_LTE . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 95
    variable                       shift and go to state 17

state 50

    (61) expr -> expr > . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 96
    variable                       shift and go to state 17

state 51

    (62) expr -> expr COMP_GTE . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 97
    variable                       shift and go to state 17

state 52

    (63) expr -> expr BOOL_AND . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 98
    variable                       shift and go to state 17

state 53

    (64) expr -> expr BOOL_OR . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 99
    variable                       shift and go to state 17

state 54

    (5) statement -> declaration ; .

    ;               reduce using rule 5 (statement -> declaration ; .)
    ID              reduce using rule 5 (statement -> declaration ; .)
    [               reduce using rule 5 (statement -> declaration ; .)
    STRING_LITERAL  reduce using rule 5 (statement -> declaration ; .)
    (               reduce using rule 5 (statement -> declaration ; .)
    !               reduce using rule 5 (statement -> declaration ; .)
    COMMAND_PRINT   reduce using rule 5 (statement -> declaration ; .)
    COMMAND_RANDOM  reduce using rule 5 (statement -> declaration ; .)
    VAL_LITERAL     reduce using rule 5 (statement -> declaration ; .)
    -               reduce using rule 5 (statement -> declaration ; .)
    CHAR_LITERAL    reduce using rule 5 (statement -> declaration ; .)
    TYPE            reduce using rule 5 (statement -> declaration ; .)
    ARRAY_TYPE      reduce using rule 5 (statement -> declaration ; .)
    STRING_TYPE     reduce using rule 5 (statement -> declaration ; .)
    COMMAND_IF      reduce using rule 5 (statement -> declaration ; .)
    COMMAND_WHILE   reduce using rule 5 (statement -> declaration ; .)
    COMMAND_BREAK   reduce using rule 5 (statement -> declaration ; .)
    FUNC_RETURN     reduce using rule 5 (statement -> declaration ; .)
    {               reduce using rule 5 (statement -> declaration ; .)
    FUNC_DEFINE     reduce using rule 5 (statement -> declaration ; .)
    $end            reduce using rule 5 (statement -> declaration ; .)
    }               reduce using rule 5 (statement -> declaration ; .)
    COMMAND_ELSE    reduce using rule 5 (statement -> declaration ; .)


state 55

    (9) statement -> break ; .

    ;               reduce using rule 9 (statement -> break ; .)
    ID              reduce using rule 9 (statement -> break ; .)
    [               reduce using rule 9 (statement -> break ; .)
    STRING_LITERAL  reduce using rule 9 (statement -> break ; .)
    (               reduce using rule 9 (statement -> break ; .)
    !               reduce using rule 9 (statement -> break ; .)
    COMMAND_PRINT   reduce using rule 9 (statement -> break ; .)
    COMMAND_RANDOM  reduce using rule 9 (statement -> break ; .)
    VAL_LITERAL     reduce using rule 9 (statement -> break ; .)
    -               reduce using rule 9 (statement -> break ; .)
    CHAR_LITERAL    reduce using rule 9 (statement -> break ; .)
    TYPE            reduce using rule 9 (statement -> break ; .)
    ARRAY_TYPE      reduce using rule 9 (statement -> break ; .)
    STRING_TYPE     reduce using rule 9 (statement -> break ; .)
    COMMAND_IF      reduce using rule 9 (statement -> break ; .)
    COMMAND_WHILE   reduce using rule 9 (statement -> break ; .)
    COMMAND_BREAK   reduce using rule 9 (statement -> break ; .)
    FUNC_RETURN     reduce using rule 9 (statement -> break ; .)
    {               reduce using rule 9 (statement -> break ; .)
    FUNC_DEFINE     reduce using rule 9 (statement -> break ; .)
    $end            reduce using rule 9 (statement -> break ; .)
    }               reduce using rule 9 (statement -> break ; .)
    COMMAND_ELSE    reduce using rule 9 (statement -> break ; .)


state 56

    (10) statement -> return_statement ; .

    ;               reduce using rule 10 (statement -> return_statement ; .)
    ID              reduce using rule 10 (statement -> return_statement ; .)
    [               reduce using rule 10 (statement -> return_statement ; .)
    STRING_LITERAL  reduce using rule 10 (statement -> return_statement ; .)
    (               reduce using rule 10 (statement -> return_statement ; .)
    !               reduce using rule 10 (statement -> return_statement ; .)
    COMMAND_PRINT   reduce using rule 10 (statement -> return_statement ; .)
    COMMAND_RANDOM  reduce using rule 10 (statement -> return_statement ; .)
    VAL_LITERAL     reduce using rule 10 (statement -> return_statement ; .)
    -               reduce using rule 10 (statement -> return_statement ; .)
    CHAR_LITERAL    reduce using rule 10 (statement -> return_statement ; .)
    TYPE            reduce using rule 10 (statement -> return_statement ; .)
    ARRAY_TYPE      reduce using rule 10 (statement -> return_statement ; .)
    STRING_TYPE     reduce using rule 10 (statement -> return_statement ; .)
    COMMAND_IF      reduce using rule 10 (statement -> return_statement ; .)
    COMMAND_WHILE   reduce using rule 10 (statement -> return_statement ; .)
    COMMAND_BREAK   reduce using rule 10 (statement -> return_statement ; .)
    FUNC_RETURN     reduce using rule 10 (statement -> return_statement ; .)
    {               reduce using rule 10 (statement -> return_statement ; .)
    FUNC_DEFINE     reduce using rule 10 (statement -> return_statement ; .)
    $end            reduce using rule 10 (statement -> return_statement ; .)
    }               reduce using rule 10 (statement -> return_statement ; .)
    COMMAND_ELSE    reduce using rule 10 (statement -> return_statement ; .)


state 57

    (36) expr -> ID ( . arguments )
    (37) expr -> ID ( . )
    (67) arguments -> . expr
    (68) arguments -> . arguments , expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    )               shift and go to state 101
    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    arguments                      shift and go to state 100
    expr                           shift and go to state 102
    variable                       shift and go to state 17

state 58

    (56) expr -> ( expr . )
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    )               shift and go to state 103
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53


state 59

    (38) expr -> [ elements . ]
    (42) elements -> elements . , expr

    ]               shift and go to state 104
    ,               shift and go to state 105


state 60

    (39) expr -> [ ] .

    ;               reduce using rule 39 (expr -> [ ] .)
    AR_METHOD_SIZE  reduce using rule 39 (expr -> [ ] .)
    AR_METHOD_RESIZE reduce using rule 39 (expr -> [ ] .)
    +               reduce using rule 39 (expr -> [ ] .)
    -               reduce using rule 39 (expr -> [ ] .)
    *               reduce using rule 39 (expr -> [ ] .)
    /               reduce using rule 39 (expr -> [ ] .)
    ASSIGN_ADD      reduce using rule 39 (expr -> [ ] .)
    ASSIGN_SUB      reduce using rule 39 (expr -> [ ] .)
    ASSIGN_MULT     reduce using rule 39 (expr -> [ ] .)
    ASSIGN_DIV      reduce using rule 39 (expr -> [ ] .)
    COMP_EQU        reduce using rule 39 (expr -> [ ] .)
    COMP_NEQU       reduce using rule 39 (expr -> [ ] .)
    <               reduce using rule 39 (expr -> [ ] .)
    COMP_LTE        reduce using rule 39 (expr -> [ ] .)
    >               reduce using rule 39 (expr -> [ ] .)
    COMP_GTE        reduce using rule 39 (expr -> [ ] .)
    BOOL_AND        reduce using rule 39 (expr -> [ ] .)
    BOOL_OR         reduce using rule 39 (expr -> [ ] .)
    )               reduce using rule 39 (expr -> [ ] .)
    ]               reduce using rule 39 (expr -> [ ] .)
    ,               reduce using rule 39 (expr -> [ ] .)


state 61

    (41) elements -> expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ]               reduce using rule 41 (elements -> expr .)
    ,               reduce using rule 41 (elements -> expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53


state 62

    (46) expr -> variable [ . expr ]
    (47) expr -> variable [ . expr ] = expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    variable                       shift and go to state 17
    expr                           shift and go to state 106

state 63

    (75) expr -> variable = . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    variable                       shift and go to state 17
    expr                           shift and go to state 107

state 64

    (71) expr -> - VAL_LITERAL .

    ;               reduce using rule 71 (expr -> - VAL_LITERAL .)
    AR_METHOD_SIZE  reduce using rule 71 (expr -> - VAL_LITERAL .)
    AR_METHOD_RESIZE reduce using rule 71 (expr -> - VAL_LITERAL .)
    +               reduce using rule 71 (expr -> - VAL_LITERAL .)
    -               reduce using rule 71 (expr -> - VAL_LITERAL .)
    *               reduce using rule 71 (expr -> - VAL_LITERAL .)
    /               reduce using rule 71 (expr -> - VAL_LITERAL .)
    ASSIGN_ADD      reduce using rule 71 (expr -> - VAL_LITERAL .)
    ASSIGN_SUB      reduce using rule 71 (expr -> - VAL_LITERAL .)
    ASSIGN_MULT     reduce using rule 71 (expr -> - VAL_LITERAL .)
    ASSIGN_DIV      reduce using rule 71 (expr -> - VAL_LITERAL .)
    COMP_EQU        reduce using rule 71 (expr -> - VAL_LITERAL .)
    COMP_NEQU       reduce using rule 71 (expr -> - VAL_LITERAL .)
    <               reduce using rule 71 (expr -> - VAL_LITERAL .)
    COMP_LTE        reduce using rule 71 (expr -> - VAL_LITERAL .)
    >               reduce using rule 71 (expr -> - VAL_LITERAL .)
    COMP_GTE        reduce using rule 71 (expr -> - VAL_LITERAL .)
    BOOL_AND        reduce using rule 71 (expr -> - VAL_LITERAL .)
    BOOL_OR         reduce using rule 71 (expr -> - VAL_LITERAL .)
    )               reduce using rule 71 (expr -> - VAL_LITERAL .)
    ]               reduce using rule 71 (expr -> - VAL_LITERAL .)
    ,               reduce using rule 71 (expr -> - VAL_LITERAL .)


state 65

    (74) expr -> - variable .

    ;               reduce using rule 74 (expr -> - variable .)
    AR_METHOD_SIZE  reduce using rule 74 (expr -> - variable .)
    AR_METHOD_RESIZE reduce using rule 74 (expr -> - variable .)
    +               reduce using rule 74 (expr -> - variable .)
    -               reduce using rule 74 (expr -> - variable .)
    *               reduce using rule 74 (expr -> - variable .)
    /               reduce using rule 74 (expr -> - variable .)
    ASSIGN_ADD      reduce using rule 74 (expr -> - variable .)
    ASSIGN_SUB      reduce using rule 74 (expr -> - variable .)
    ASSIGN_MULT     reduce using rule 74 (expr -> - variable .)
    ASSIGN_DIV      reduce using rule 74 (expr -> - variable .)
    COMP_EQU        reduce using rule 74 (expr -> - variable .)
    COMP_NEQU       reduce using rule 74 (expr -> - variable .)
    <               reduce using rule 74 (expr -> - variable .)
    COMP_LTE        reduce using rule 74 (expr -> - variable .)
    >               reduce using rule 74 (expr -> - variable .)
    COMP_GTE        reduce using rule 74 (expr -> - variable .)
    BOOL_AND        reduce using rule 74 (expr -> - variable .)
    BOOL_OR         reduce using rule 74 (expr -> - variable .)
    )               reduce using rule 74 (expr -> - variable .)
    ]               reduce using rule 74 (expr -> - variable .)
    ,               reduce using rule 74 (expr -> - variable .)


state 66

    (76) variable -> ID .

    ;               reduce using rule 76 (variable -> ID .)
    AR_METHOD_SIZE  reduce using rule 76 (variable -> ID .)
    AR_METHOD_RESIZE reduce using rule 76 (variable -> ID .)
    +               reduce using rule 76 (variable -> ID .)
    -               reduce using rule 76 (variable -> ID .)
    *               reduce using rule 76 (variable -> ID .)
    /               reduce using rule 76 (variable -> ID .)
    ASSIGN_ADD      reduce using rule 76 (variable -> ID .)
    ASSIGN_SUB      reduce using rule 76 (variable -> ID .)
    ASSIGN_MULT     reduce using rule 76 (variable -> ID .)
    ASSIGN_DIV      reduce using rule 76 (variable -> ID .)
    COMP_EQU        reduce using rule 76 (variable -> ID .)
    COMP_NEQU       reduce using rule 76 (variable -> ID .)
    <               reduce using rule 76 (variable -> ID .)
    COMP_LTE        reduce using rule 76 (variable -> ID .)
    >               reduce using rule 76 (variable -> ID .)
    COMP_GTE        reduce using rule 76 (variable -> ID .)
    BOOL_AND        reduce using rule 76 (variable -> ID .)
    BOOL_OR         reduce using rule 76 (variable -> ID .)
    )               reduce using rule 76 (variable -> ID .)
    ]               reduce using rule 76 (variable -> ID .)
    ,               reduce using rule 76 (variable -> ID .)


state 67

    (65) expr -> ! expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 65 (expr -> ! expr .)
    +               reduce using rule 65 (expr -> ! expr .)
    -               reduce using rule 65 (expr -> ! expr .)
    *               reduce using rule 65 (expr -> ! expr .)
    /               reduce using rule 65 (expr -> ! expr .)
    ASSIGN_ADD      reduce using rule 65 (expr -> ! expr .)
    ASSIGN_SUB      reduce using rule 65 (expr -> ! expr .)
    ASSIGN_MULT     reduce using rule 65 (expr -> ! expr .)
    ASSIGN_DIV      reduce using rule 65 (expr -> ! expr .)
    COMP_EQU        reduce using rule 65 (expr -> ! expr .)
    COMP_NEQU       reduce using rule 65 (expr -> ! expr .)
    <               reduce using rule 65 (expr -> ! expr .)
    COMP_LTE        reduce using rule 65 (expr -> ! expr .)
    >               reduce using rule 65 (expr -> ! expr .)
    COMP_GTE        reduce using rule 65 (expr -> ! expr .)
    BOOL_AND        reduce using rule 65 (expr -> ! expr .)
    BOOL_OR         reduce using rule 65 (expr -> ! expr .)
    )               reduce using rule 65 (expr -> ! expr .)
    ]               reduce using rule 65 (expr -> ! expr .)
    ,               reduce using rule 65 (expr -> ! expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37

  ! AR_METHOD_SIZE  [ reduce using rule 65 (expr -> ! expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 65 (expr -> ! expr .) ]
  ! +               [ shift and go to state 38 ]
  ! -               [ shift and go to state 39 ]
  ! *               [ shift and go to state 40 ]
  ! /               [ shift and go to state 41 ]
  ! ASSIGN_ADD      [ shift and go to state 42 ]
  ! ASSIGN_SUB      [ shift and go to state 43 ]
  ! ASSIGN_MULT     [ shift and go to state 44 ]
  ! ASSIGN_DIV      [ shift and go to state 45 ]
  ! COMP_EQU        [ shift and go to state 46 ]
  ! COMP_NEQU       [ shift and go to state 47 ]
  ! <               [ shift and go to state 48 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 50 ]
  ! COMP_GTE        [ shift and go to state 51 ]
  ! BOOL_AND        [ shift and go to state 52 ]
  ! BOOL_OR         [ shift and go to state 53 ]


state 68

    (66) expr -> COMMAND_PRINT ( . arguments )
    (67) arguments -> . expr
    (68) arguments -> . arguments , expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    arguments                      shift and go to state 108
    expr                           shift and go to state 102
    variable                       shift and go to state 17

state 69

    (69) expr -> COMMAND_RANDOM ( . expr )
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 109
    variable                       shift and go to state 17

state 70

    (20) declaration -> TYPE ID .
    (21) declaration -> TYPE ID . = expr

    ;               reduce using rule 20 (declaration -> TYPE ID .)
    =               shift and go to state 110


state 71

    (22) declaration -> ARRAY_TYPE ( . TYPE ) ID
    (23) declaration -> ARRAY_TYPE ( . TYPE ) ID = expr

    TYPE            shift and go to state 111


state 72

    (24) declaration -> STRING_TYPE ID .
    (25) declaration -> STRING_TYPE ID . = expr

    ;               reduce using rule 24 (declaration -> STRING_TYPE ID .)
    =               shift and go to state 112


state 73

    (13) block -> open_block statements . close_block
    (2) statements -> statements . statement
    (15) close_block -> . }
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . return_statement ;
    (11) statement -> . function_def
    (12) statement -> . ;
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (20) declaration -> . TYPE ID
    (21) declaration -> . TYPE ID = expr
    (22) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (23) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (24) declaration -> . STRING_TYPE ID
    (25) declaration -> . STRING_TYPE ID = expr
    (13) block -> . open_block statements close_block
    (16) if_block -> . COMMAND_IF ( expr ) statement
    (17) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (19) while_loop -> . COMMAND_WHILE ( expr ) statement
    (18) break -> . COMMAND_BREAK
    (29) return_statement -> . FUNC_RETURN expr
    (30) function_def -> . func_signature statement
    (76) variable -> . ID
    (14) open_block -> . {
    (31) func_signature -> . FUNC_DEFINE all_type ID ( parameters )
    (32) func_signature -> . FUNC_DEFINE all_type ID ( )

    }               shift and go to state 114
    ;               shift and go to state 5
    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23
    TYPE            shift and go to state 24
    ARRAY_TYPE      shift and go to state 25
    STRING_TYPE     shift and go to state 26
    COMMAND_IF      shift and go to state 28
    COMMAND_WHILE   shift and go to state 29
    COMMAND_BREAK   shift and go to state 30
    FUNC_RETURN     shift and go to state 31
    {               shift and go to state 33
    FUNC_DEFINE     shift and go to state 34

    open_block                     shift and go to state 27
    close_block                    shift and go to state 113
    statement                      shift and go to state 3
    expr                           shift and go to state 4
    declaration                    shift and go to state 6
    block                          shift and go to state 7
    if_block                       shift and go to state 8
    while_loop                     shift and go to state 9
    break                          shift and go to state 10
    return_statement               shift and go to state 11
    function_def                   shift and go to state 12
    variable                       shift and go to state 17
    func_signature                 shift and go to state 32

state 74

    (16) if_block -> COMMAND_IF ( . expr ) statement
    (17) if_block -> COMMAND_IF ( . expr ) statement COMMAND_ELSE statement
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 115
    variable                       shift and go to state 17

state 75

    (19) while_loop -> COMMAND_WHILE ( . expr ) statement
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 116
    variable                       shift and go to state 17

state 76

    (29) return_statement -> FUNC_RETURN expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 29 (return_statement -> FUNC_RETURN expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53


state 77

    (30) function_def -> func_signature statement .

    ;               reduce using rule 30 (function_def -> func_signature statement .)
    ID              reduce using rule 30 (function_def -> func_signature statement .)
    [               reduce using rule 30 (function_def -> func_signature statement .)
    STRING_LITERAL  reduce using rule 30 (function_def -> func_signature statement .)
    (               reduce using rule 30 (function_def -> func_signature statement .)
    !               reduce using rule 30 (function_def -> func_signature statement .)
    COMMAND_PRINT   reduce using rule 30 (function_def -> func_signature statement .)
    COMMAND_RANDOM  reduce using rule 30 (function_def -> func_signature statement .)
    VAL_LITERAL     reduce using rule 30 (function_def -> func_signature statement .)
    -               reduce using rule 30 (function_def -> func_signature statement .)
    CHAR_LITERAL    reduce using rule 30 (function_def -> func_signature statement .)
    TYPE            reduce using rule 30 (function_def -> func_signature statement .)
    ARRAY_TYPE      reduce using rule 30 (function_def -> func_signature statement .)
    STRING_TYPE     reduce using rule 30 (function_def -> func_signature statement .)
    COMMAND_IF      reduce using rule 30 (function_def -> func_signature statement .)
    COMMAND_WHILE   reduce using rule 30 (function_def -> func_signature statement .)
    COMMAND_BREAK   reduce using rule 30 (function_def -> func_signature statement .)
    FUNC_RETURN     reduce using rule 30 (function_def -> func_signature statement .)
    {               reduce using rule 30 (function_def -> func_signature statement .)
    FUNC_DEFINE     reduce using rule 30 (function_def -> func_signature statement .)
    $end            reduce using rule 30 (function_def -> func_signature statement .)
    }               reduce using rule 30 (function_def -> func_signature statement .)
    COMMAND_ELSE    reduce using rule 30 (function_def -> func_signature statement .)


state 78

    (31) func_signature -> FUNC_DEFINE all_type . ID ( parameters )
    (32) func_signature -> FUNC_DEFINE all_type . ID ( )

    ID              shift and go to state 117


state 79

    (26) all_type -> TYPE .

    ID              reduce using rule 26 (all_type -> TYPE .)


state 80

    (27) all_type -> STRING_TYPE .

    ID              reduce using rule 27 (all_type -> STRING_TYPE .)


state 81

    (28) all_type -> ARRAY_TYPE . ( TYPE )

    (               shift and go to state 118


state 82

    (43) expr -> expr AR_METHOD_SIZE ( . )
    (44) expr -> expr AR_METHOD_SIZE ( . expr )
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    )               shift and go to state 120
    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 119
    variable                       shift and go to state 17

state 83

    (45) expr -> expr AR_METHOD_RESIZE ( . arguments )
    (67) arguments -> . expr
    (68) arguments -> . arguments , expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 102
    arguments                      shift and go to state 121
    variable                       shift and go to state 17

state 84

    (48) expr -> expr + expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 48 (expr -> expr + expr .)
    +               reduce using rule 48 (expr -> expr + expr .)
    -               reduce using rule 48 (expr -> expr + expr .)
    ASSIGN_ADD      reduce using rule 48 (expr -> expr + expr .)
    ASSIGN_SUB      reduce using rule 48 (expr -> expr + expr .)
    ASSIGN_MULT     reduce using rule 48 (expr -> expr + expr .)
    ASSIGN_DIV      reduce using rule 48 (expr -> expr + expr .)
    COMP_EQU        reduce using rule 48 (expr -> expr + expr .)
    COMP_NEQU       reduce using rule 48 (expr -> expr + expr .)
    <               reduce using rule 48 (expr -> expr + expr .)
    COMP_LTE        reduce using rule 48 (expr -> expr + expr .)
    >               reduce using rule 48 (expr -> expr + expr .)
    COMP_GTE        reduce using rule 48 (expr -> expr + expr .)
    BOOL_AND        reduce using rule 48 (expr -> expr + expr .)
    BOOL_OR         reduce using rule 48 (expr -> expr + expr .)
    )               reduce using rule 48 (expr -> expr + expr .)
    ]               reduce using rule 48 (expr -> expr + expr .)
    ,               reduce using rule 48 (expr -> expr + expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    *               shift and go to state 40
    /               shift and go to state 41

  ! AR_METHOD_SIZE  [ reduce using rule 48 (expr -> expr + expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 48 (expr -> expr + expr .) ]
  ! *               [ reduce using rule 48 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 48 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 38 ]
  ! -               [ shift and go to state 39 ]
  ! ASSIGN_ADD      [ shift and go to state 42 ]
  ! ASSIGN_SUB      [ shift and go to state 43 ]
  ! ASSIGN_MULT     [ shift and go to state 44 ]
  ! ASSIGN_DIV      [ shift and go to state 45 ]
  ! COMP_EQU        [ shift and go to state 46 ]
  ! COMP_NEQU       [ shift and go to state 47 ]
  ! <               [ shift and go to state 48 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 50 ]
  ! COMP_GTE        [ shift and go to state 51 ]
  ! BOOL_AND        [ shift and go to state 52 ]
  ! BOOL_OR         [ shift and go to state 53 ]


state 85

    (49) expr -> expr - expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 49 (expr -> expr - expr .)
    +               reduce using rule 49 (expr -> expr - expr .)
    -               reduce using rule 49 (expr -> expr - expr .)
    ASSIGN_ADD      reduce using rule 49 (expr -> expr - expr .)
    ASSIGN_SUB      reduce using rule 49 (expr -> expr - expr .)
    ASSIGN_MULT     reduce using rule 49 (expr -> expr - expr .)
    ASSIGN_DIV      reduce using rule 49 (expr -> expr - expr .)
    COMP_EQU        reduce using rule 49 (expr -> expr - expr .)
    COMP_NEQU       reduce using rule 49 (expr -> expr - expr .)
    <               reduce using rule 49 (expr -> expr - expr .)
    COMP_LTE        reduce using rule 49 (expr -> expr - expr .)
    >               reduce using rule 49 (expr -> expr - expr .)
    COMP_GTE        reduce using rule 49 (expr -> expr - expr .)
    BOOL_AND        reduce using rule 49 (expr -> expr - expr .)
    BOOL_OR         reduce using rule 49 (expr -> expr - expr .)
    )               reduce using rule 49 (expr -> expr - expr .)
    ]               reduce using rule 49 (expr -> expr - expr .)
    ,               reduce using rule 49 (expr -> expr - expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    *               shift and go to state 40
    /               shift and go to state 41

  ! AR_METHOD_SIZE  [ reduce using rule 49 (expr -> expr - expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 49 (expr -> expr - expr .) ]
  ! *               [ reduce using rule 49 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 49 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 38 ]
  ! -               [ shift and go to state 39 ]
  ! ASSIGN_ADD      [ shift and go to state 42 ]
  ! ASSIGN_SUB      [ shift and go to state 43 ]
  ! ASSIGN_MULT     [ shift and go to state 44 ]
  ! ASSIGN_DIV      [ shift and go to state 45 ]
  ! COMP_EQU        [ shift and go to state 46 ]
  ! COMP_NEQU       [ shift and go to state 47 ]
  ! <               [ shift and go to state 48 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 50 ]
  ! COMP_GTE        [ shift and go to state 51 ]
  ! BOOL_AND        [ shift and go to state 52 ]
  ! BOOL_OR         [ shift and go to state 53 ]


state 86

    (50) expr -> expr * expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 50 (expr -> expr * expr .)
    +               reduce using rule 50 (expr -> expr * expr .)
    -               reduce using rule 50 (expr -> expr * expr .)
    *               reduce using rule 50 (expr -> expr * expr .)
    /               reduce using rule 50 (expr -> expr * expr .)
    ASSIGN_ADD      reduce using rule 50 (expr -> expr * expr .)
    ASSIGN_SUB      reduce using rule 50 (expr -> expr * expr .)
    ASSIGN_MULT     reduce using rule 50 (expr -> expr * expr .)
    ASSIGN_DIV      reduce using rule 50 (expr -> expr * expr .)
    COMP_EQU        reduce using rule 50 (expr -> expr * expr .)
    COMP_NEQU       reduce using rule 50 (expr -> expr * expr .)
    <               reduce using rule 50 (expr -> expr * expr .)
    COMP_LTE        reduce using rule 50 (expr -> expr * expr .)
    >               reduce using rule 50 (expr -> expr * expr .)
    COMP_GTE        reduce using rule 50 (expr -> expr * expr .)
    BOOL_AND        reduce using rule 50 (expr -> expr * expr .)
    BOOL_OR         reduce using rule 50 (expr -> expr * expr .)
    )               reduce using rule 50 (expr -> expr * expr .)
    ]               reduce using rule 50 (expr -> expr * expr .)
    ,               reduce using rule 50 (expr -> expr * expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37

  ! AR_METHOD_SIZE  [ reduce using rule 50 (expr -> expr * expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 50 (expr -> expr * expr .) ]
  ! +               [ shift and go to state 38 ]
  ! -               [ shift and go to state 39 ]
  ! *               [ shift and go to state 40 ]
  ! /               [ shift and go to state 41 ]
  ! ASSIGN_ADD      [ shift and go to state 42 ]
  ! ASSIGN_SUB      [ shift and go to state 43 ]
  ! ASSIGN_MULT     [ shift and go to state 44 ]
  ! ASSIGN_DIV      [ shift and go to state 45 ]
  ! COMP_EQU        [ shift and go to state 46 ]
  ! COMP_NEQU       [ shift and go to state 47 ]
  ! <               [ shift and go to state 48 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 50 ]
  ! COMP_GTE        [ shift and go to state 51 ]
  ! BOOL_AND        [ shift and go to state 52 ]
  ! BOOL_OR         [ shift and go to state 53 ]


state 87

    (51) expr -> expr / expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 51 (expr -> expr / expr .)
    +               reduce using rule 51 (expr -> expr / expr .)
    -               reduce using rule 51 (expr -> expr / expr .)
    *               reduce using rule 51 (expr -> expr / expr .)
    /               reduce using rule 51 (expr -> expr / expr .)
    ASSIGN_ADD      reduce using rule 51 (expr -> expr / expr .)
    ASSIGN_SUB      reduce using rule 51 (expr -> expr / expr .)
    ASSIGN_MULT     reduce using rule 51 (expr -> expr / expr .)
    ASSIGN_DIV      reduce using rule 51 (expr -> expr / expr .)
    COMP_EQU        reduce using rule 51 (expr -> expr / expr .)
    COMP_NEQU       reduce using rule 51 (expr -> expr / expr .)
    <               reduce using rule 51 (expr -> expr / expr .)
    COMP_LTE        reduce using rule 51 (expr -> expr / expr .)
    >               reduce using rule 51 (expr -> expr / expr .)
    COMP_GTE        reduce using rule 51 (expr -> expr / expr .)
    BOOL_AND        reduce using rule 51 (expr -> expr / expr .)
    BOOL_OR         reduce using rule 51 (expr -> expr / expr .)
    )               reduce using rule 51 (expr -> expr / expr .)
    ]               reduce using rule 51 (expr -> expr / expr .)
    ,               reduce using rule 51 (expr -> expr / expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37

  ! AR_METHOD_SIZE  [ reduce using rule 51 (expr -> expr / expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 51 (expr -> expr / expr .) ]
  ! +               [ shift and go to state 38 ]
  ! -               [ shift and go to state 39 ]
  ! *               [ shift and go to state 40 ]
  ! /               [ shift and go to state 41 ]
  ! ASSIGN_ADD      [ shift and go to state 42 ]
  ! ASSIGN_SUB      [ shift and go to state 43 ]
  ! ASSIGN_MULT     [ shift and go to state 44 ]
  ! ASSIGN_DIV      [ shift and go to state 45 ]
  ! COMP_EQU        [ shift and go to state 46 ]
  ! COMP_NEQU       [ shift and go to state 47 ]
  ! <               [ shift and go to state 48 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 50 ]
  ! COMP_GTE        [ shift and go to state 51 ]
  ! BOOL_AND        [ shift and go to state 52 ]
  ! BOOL_OR         [ shift and go to state 53 ]


state 88

    (52) expr -> expr ASSIGN_ADD expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for AR_METHOD_SIZE resolved as shift
  ! shift/reduce conflict for AR_METHOD_RESIZE resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 52 (expr -> expr ASSIGN_ADD expr .)
    )               reduce using rule 52 (expr -> expr ASSIGN_ADD expr .)
    ]               reduce using rule 52 (expr -> expr ASSIGN_ADD expr .)
    ,               reduce using rule 52 (expr -> expr ASSIGN_ADD expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53

  ! AR_METHOD_SIZE  [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! +               [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! -               [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! *               [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! /               [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_EQU        [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_NEQU       [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! <               [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_LTE        [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! >               [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_GTE        [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! BOOL_AND        [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]
  ! BOOL_OR         [ reduce using rule 52 (expr -> expr ASSIGN_ADD expr .) ]


state 89

    (53) expr -> expr ASSIGN_SUB expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for AR_METHOD_SIZE resolved as shift
  ! shift/reduce conflict for AR_METHOD_RESIZE resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 53 (expr -> expr ASSIGN_SUB expr .)
    )               reduce using rule 53 (expr -> expr ASSIGN_SUB expr .)
    ]               reduce using rule 53 (expr -> expr ASSIGN_SUB expr .)
    ,               reduce using rule 53 (expr -> expr ASSIGN_SUB expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53

  ! AR_METHOD_SIZE  [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! +               [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! -               [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! *               [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! /               [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_EQU        [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_NEQU       [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! <               [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_LTE        [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! >               [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_GTE        [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! BOOL_AND        [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]
  ! BOOL_OR         [ reduce using rule 53 (expr -> expr ASSIGN_SUB expr .) ]


state 90

    (54) expr -> expr ASSIGN_MULT expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for AR_METHOD_SIZE resolved as shift
  ! shift/reduce conflict for AR_METHOD_RESIZE resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 54 (expr -> expr ASSIGN_MULT expr .)
    )               reduce using rule 54 (expr -> expr ASSIGN_MULT expr .)
    ]               reduce using rule 54 (expr -> expr ASSIGN_MULT expr .)
    ,               reduce using rule 54 (expr -> expr ASSIGN_MULT expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53

  ! AR_METHOD_SIZE  [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! +               [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! -               [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! *               [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! /               [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_EQU        [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_NEQU       [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! <               [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_LTE        [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! >               [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_GTE        [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! BOOL_AND        [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]
  ! BOOL_OR         [ reduce using rule 54 (expr -> expr ASSIGN_MULT expr .) ]


state 91

    (55) expr -> expr ASSIGN_DIV expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for AR_METHOD_SIZE resolved as shift
  ! shift/reduce conflict for AR_METHOD_RESIZE resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 55 (expr -> expr ASSIGN_DIV expr .)
    )               reduce using rule 55 (expr -> expr ASSIGN_DIV expr .)
    ]               reduce using rule 55 (expr -> expr ASSIGN_DIV expr .)
    ,               reduce using rule 55 (expr -> expr ASSIGN_DIV expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53

  ! AR_METHOD_SIZE  [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! +               [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! -               [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! *               [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! /               [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_EQU        [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_NEQU       [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! <               [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_LTE        [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! >               [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_GTE        [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! BOOL_AND        [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]
  ! BOOL_OR         [ reduce using rule 55 (expr -> expr ASSIGN_DIV expr .) ]


state 92

    (57) expr -> expr COMP_EQU expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 57 (expr -> expr COMP_EQU expr .)
    ASSIGN_ADD      reduce using rule 57 (expr -> expr COMP_EQU expr .)
    ASSIGN_SUB      reduce using rule 57 (expr -> expr COMP_EQU expr .)
    ASSIGN_MULT     reduce using rule 57 (expr -> expr COMP_EQU expr .)
    ASSIGN_DIV      reduce using rule 57 (expr -> expr COMP_EQU expr .)
    COMP_EQU        reduce using rule 57 (expr -> expr COMP_EQU expr .)
    COMP_NEQU       reduce using rule 57 (expr -> expr COMP_EQU expr .)
    <               reduce using rule 57 (expr -> expr COMP_EQU expr .)
    COMP_LTE        reduce using rule 57 (expr -> expr COMP_EQU expr .)
    >               reduce using rule 57 (expr -> expr COMP_EQU expr .)
    COMP_GTE        reduce using rule 57 (expr -> expr COMP_EQU expr .)
    BOOL_AND        reduce using rule 57 (expr -> expr COMP_EQU expr .)
    BOOL_OR         reduce using rule 57 (expr -> expr COMP_EQU expr .)
    )               reduce using rule 57 (expr -> expr COMP_EQU expr .)
    ]               reduce using rule 57 (expr -> expr COMP_EQU expr .)
    ,               reduce using rule 57 (expr -> expr COMP_EQU expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41

  ! AR_METHOD_SIZE  [ reduce using rule 57 (expr -> expr COMP_EQU expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 57 (expr -> expr COMP_EQU expr .) ]
  ! +               [ reduce using rule 57 (expr -> expr COMP_EQU expr .) ]
  ! -               [ reduce using rule 57 (expr -> expr COMP_EQU expr .) ]
  ! *               [ reduce using rule 57 (expr -> expr COMP_EQU expr .) ]
  ! /               [ reduce using rule 57 (expr -> expr COMP_EQU expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 42 ]
  ! ASSIGN_SUB      [ shift and go to state 43 ]
  ! ASSIGN_MULT     [ shift and go to state 44 ]
  ! ASSIGN_DIV      [ shift and go to state 45 ]
  ! COMP_EQU        [ shift and go to state 46 ]
  ! COMP_NEQU       [ shift and go to state 47 ]
  ! <               [ shift and go to state 48 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 50 ]
  ! COMP_GTE        [ shift and go to state 51 ]
  ! BOOL_AND        [ shift and go to state 52 ]
  ! BOOL_OR         [ shift and go to state 53 ]


state 93

    (58) expr -> expr COMP_NEQU expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    ASSIGN_ADD      reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    ASSIGN_SUB      reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    ASSIGN_MULT     reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    ASSIGN_DIV      reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    COMP_EQU        reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    COMP_NEQU       reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    <               reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    COMP_LTE        reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    >               reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    COMP_GTE        reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    BOOL_AND        reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    BOOL_OR         reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    )               reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    ]               reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    ,               reduce using rule 58 (expr -> expr COMP_NEQU expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41

  ! AR_METHOD_SIZE  [ reduce using rule 58 (expr -> expr COMP_NEQU expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 58 (expr -> expr COMP_NEQU expr .) ]
  ! +               [ reduce using rule 58 (expr -> expr COMP_NEQU expr .) ]
  ! -               [ reduce using rule 58 (expr -> expr COMP_NEQU expr .) ]
  ! *               [ reduce using rule 58 (expr -> expr COMP_NEQU expr .) ]
  ! /               [ reduce using rule 58 (expr -> expr COMP_NEQU expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 42 ]
  ! ASSIGN_SUB      [ shift and go to state 43 ]
  ! ASSIGN_MULT     [ shift and go to state 44 ]
  ! ASSIGN_DIV      [ shift and go to state 45 ]
  ! COMP_EQU        [ shift and go to state 46 ]
  ! COMP_NEQU       [ shift and go to state 47 ]
  ! <               [ shift and go to state 48 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 50 ]
  ! COMP_GTE        [ shift and go to state 51 ]
  ! BOOL_AND        [ shift and go to state 52 ]
  ! BOOL_OR         [ shift and go to state 53 ]


state 94

    (59) expr -> expr < expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 59 (expr -> expr < expr .)
    ASSIGN_ADD      reduce using rule 59 (expr -> expr < expr .)
    ASSIGN_SUB      reduce using rule 59 (expr -> expr < expr .)
    ASSIGN_MULT     reduce using rule 59 (expr -> expr < expr .)
    ASSIGN_DIV      reduce using rule 59 (expr -> expr < expr .)
    COMP_EQU        reduce using rule 59 (expr -> expr < expr .)
    COMP_NEQU       reduce using rule 59 (expr -> expr < expr .)
    <               reduce using rule 59 (expr -> expr < expr .)
    COMP_LTE        reduce using rule 59 (expr -> expr < expr .)
    >               reduce using rule 59 (expr -> expr < expr .)
    COMP_GTE        reduce using rule 59 (expr -> expr < expr .)
    BOOL_AND        reduce using rule 59 (expr -> expr < expr .)
    BOOL_OR         reduce using rule 59 (expr -> expr < expr .)
    )               reduce using rule 59 (expr -> expr < expr .)
    ]               reduce using rule 59 (expr -> expr < expr .)
    ,               reduce using rule 59 (expr -> expr < expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41

  ! AR_METHOD_SIZE  [ reduce using rule 59 (expr -> expr < expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 59 (expr -> expr < expr .) ]
  ! +               [ reduce using rule 59 (expr -> expr < expr .) ]
  ! -               [ reduce using rule 59 (expr -> expr < expr .) ]
  ! *               [ reduce using rule 59 (expr -> expr < expr .) ]
  ! /               [ reduce using rule 59 (expr -> expr < expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 42 ]
  ! ASSIGN_SUB      [ shift and go to state 43 ]
  ! ASSIGN_MULT     [ shift and go to state 44 ]
  ! ASSIGN_DIV      [ shift and go to state 45 ]
  ! COMP_EQU        [ shift and go to state 46 ]
  ! COMP_NEQU       [ shift and go to state 47 ]
  ! <               [ shift and go to state 48 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 50 ]
  ! COMP_GTE        [ shift and go to state 51 ]
  ! BOOL_AND        [ shift and go to state 52 ]
  ! BOOL_OR         [ shift and go to state 53 ]


state 95

    (60) expr -> expr COMP_LTE expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 60 (expr -> expr COMP_LTE expr .)
    ASSIGN_ADD      reduce using rule 60 (expr -> expr COMP_LTE expr .)
    ASSIGN_SUB      reduce using rule 60 (expr -> expr COMP_LTE expr .)
    ASSIGN_MULT     reduce using rule 60 (expr -> expr COMP_LTE expr .)
    ASSIGN_DIV      reduce using rule 60 (expr -> expr COMP_LTE expr .)
    COMP_EQU        reduce using rule 60 (expr -> expr COMP_LTE expr .)
    COMP_NEQU       reduce using rule 60 (expr -> expr COMP_LTE expr .)
    <               reduce using rule 60 (expr -> expr COMP_LTE expr .)
    COMP_LTE        reduce using rule 60 (expr -> expr COMP_LTE expr .)
    >               reduce using rule 60 (expr -> expr COMP_LTE expr .)
    COMP_GTE        reduce using rule 60 (expr -> expr COMP_LTE expr .)
    BOOL_AND        reduce using rule 60 (expr -> expr COMP_LTE expr .)
    BOOL_OR         reduce using rule 60 (expr -> expr COMP_LTE expr .)
    )               reduce using rule 60 (expr -> expr COMP_LTE expr .)
    ]               reduce using rule 60 (expr -> expr COMP_LTE expr .)
    ,               reduce using rule 60 (expr -> expr COMP_LTE expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41

  ! AR_METHOD_SIZE  [ reduce using rule 60 (expr -> expr COMP_LTE expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 60 (expr -> expr COMP_LTE expr .) ]
  ! +               [ reduce using rule 60 (expr -> expr COMP_LTE expr .) ]
  ! -               [ reduce using rule 60 (expr -> expr COMP_LTE expr .) ]
  ! *               [ reduce using rule 60 (expr -> expr COMP_LTE expr .) ]
  ! /               [ reduce using rule 60 (expr -> expr COMP_LTE expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 42 ]
  ! ASSIGN_SUB      [ shift and go to state 43 ]
  ! ASSIGN_MULT     [ shift and go to state 44 ]
  ! ASSIGN_DIV      [ shift and go to state 45 ]
  ! COMP_EQU        [ shift and go to state 46 ]
  ! COMP_NEQU       [ shift and go to state 47 ]
  ! <               [ shift and go to state 48 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 50 ]
  ! COMP_GTE        [ shift and go to state 51 ]
  ! BOOL_AND        [ shift and go to state 52 ]
  ! BOOL_OR         [ shift and go to state 53 ]


state 96

    (61) expr -> expr > expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 61 (expr -> expr > expr .)
    ASSIGN_ADD      reduce using rule 61 (expr -> expr > expr .)
    ASSIGN_SUB      reduce using rule 61 (expr -> expr > expr .)
    ASSIGN_MULT     reduce using rule 61 (expr -> expr > expr .)
    ASSIGN_DIV      reduce using rule 61 (expr -> expr > expr .)
    COMP_EQU        reduce using rule 61 (expr -> expr > expr .)
    COMP_NEQU       reduce using rule 61 (expr -> expr > expr .)
    <               reduce using rule 61 (expr -> expr > expr .)
    COMP_LTE        reduce using rule 61 (expr -> expr > expr .)
    >               reduce using rule 61 (expr -> expr > expr .)
    COMP_GTE        reduce using rule 61 (expr -> expr > expr .)
    BOOL_AND        reduce using rule 61 (expr -> expr > expr .)
    BOOL_OR         reduce using rule 61 (expr -> expr > expr .)
    )               reduce using rule 61 (expr -> expr > expr .)
    ]               reduce using rule 61 (expr -> expr > expr .)
    ,               reduce using rule 61 (expr -> expr > expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41

  ! AR_METHOD_SIZE  [ reduce using rule 61 (expr -> expr > expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 61 (expr -> expr > expr .) ]
  ! +               [ reduce using rule 61 (expr -> expr > expr .) ]
  ! -               [ reduce using rule 61 (expr -> expr > expr .) ]
  ! *               [ reduce using rule 61 (expr -> expr > expr .) ]
  ! /               [ reduce using rule 61 (expr -> expr > expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 42 ]
  ! ASSIGN_SUB      [ shift and go to state 43 ]
  ! ASSIGN_MULT     [ shift and go to state 44 ]
  ! ASSIGN_DIV      [ shift and go to state 45 ]
  ! COMP_EQU        [ shift and go to state 46 ]
  ! COMP_NEQU       [ shift and go to state 47 ]
  ! <               [ shift and go to state 48 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 50 ]
  ! COMP_GTE        [ shift and go to state 51 ]
  ! BOOL_AND        [ shift and go to state 52 ]
  ! BOOL_OR         [ shift and go to state 53 ]


state 97

    (62) expr -> expr COMP_GTE expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 62 (expr -> expr COMP_GTE expr .)
    ASSIGN_ADD      reduce using rule 62 (expr -> expr COMP_GTE expr .)
    ASSIGN_SUB      reduce using rule 62 (expr -> expr COMP_GTE expr .)
    ASSIGN_MULT     reduce using rule 62 (expr -> expr COMP_GTE expr .)
    ASSIGN_DIV      reduce using rule 62 (expr -> expr COMP_GTE expr .)
    COMP_EQU        reduce using rule 62 (expr -> expr COMP_GTE expr .)
    COMP_NEQU       reduce using rule 62 (expr -> expr COMP_GTE expr .)
    <               reduce using rule 62 (expr -> expr COMP_GTE expr .)
    COMP_LTE        reduce using rule 62 (expr -> expr COMP_GTE expr .)
    >               reduce using rule 62 (expr -> expr COMP_GTE expr .)
    COMP_GTE        reduce using rule 62 (expr -> expr COMP_GTE expr .)
    BOOL_AND        reduce using rule 62 (expr -> expr COMP_GTE expr .)
    BOOL_OR         reduce using rule 62 (expr -> expr COMP_GTE expr .)
    )               reduce using rule 62 (expr -> expr COMP_GTE expr .)
    ]               reduce using rule 62 (expr -> expr COMP_GTE expr .)
    ,               reduce using rule 62 (expr -> expr COMP_GTE expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41

  ! AR_METHOD_SIZE  [ reduce using rule 62 (expr -> expr COMP_GTE expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 62 (expr -> expr COMP_GTE expr .) ]
  ! +               [ reduce using rule 62 (expr -> expr COMP_GTE expr .) ]
  ! -               [ reduce using rule 62 (expr -> expr COMP_GTE expr .) ]
  ! *               [ reduce using rule 62 (expr -> expr COMP_GTE expr .) ]
  ! /               [ reduce using rule 62 (expr -> expr COMP_GTE expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 42 ]
  ! ASSIGN_SUB      [ shift and go to state 43 ]
  ! ASSIGN_MULT     [ shift and go to state 44 ]
  ! ASSIGN_DIV      [ shift and go to state 45 ]
  ! COMP_EQU        [ shift and go to state 46 ]
  ! COMP_NEQU       [ shift and go to state 47 ]
  ! <               [ shift and go to state 48 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 50 ]
  ! COMP_GTE        [ shift and go to state 51 ]
  ! BOOL_AND        [ shift and go to state 52 ]
  ! BOOL_OR         [ shift and go to state 53 ]


state 98

    (63) expr -> expr BOOL_AND expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 63 (expr -> expr BOOL_AND expr .)
    ASSIGN_ADD      reduce using rule 63 (expr -> expr BOOL_AND expr .)
    ASSIGN_SUB      reduce using rule 63 (expr -> expr BOOL_AND expr .)
    ASSIGN_MULT     reduce using rule 63 (expr -> expr BOOL_AND expr .)
    ASSIGN_DIV      reduce using rule 63 (expr -> expr BOOL_AND expr .)
    BOOL_AND        reduce using rule 63 (expr -> expr BOOL_AND expr .)
    BOOL_OR         reduce using rule 63 (expr -> expr BOOL_AND expr .)
    )               reduce using rule 63 (expr -> expr BOOL_AND expr .)
    ]               reduce using rule 63 (expr -> expr BOOL_AND expr .)
    ,               reduce using rule 63 (expr -> expr BOOL_AND expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51

  ! AR_METHOD_SIZE  [ reduce using rule 63 (expr -> expr BOOL_AND expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 63 (expr -> expr BOOL_AND expr .) ]
  ! +               [ reduce using rule 63 (expr -> expr BOOL_AND expr .) ]
  ! -               [ reduce using rule 63 (expr -> expr BOOL_AND expr .) ]
  ! *               [ reduce using rule 63 (expr -> expr BOOL_AND expr .) ]
  ! /               [ reduce using rule 63 (expr -> expr BOOL_AND expr .) ]
  ! COMP_EQU        [ reduce using rule 63 (expr -> expr BOOL_AND expr .) ]
  ! COMP_NEQU       [ reduce using rule 63 (expr -> expr BOOL_AND expr .) ]
  ! <               [ reduce using rule 63 (expr -> expr BOOL_AND expr .) ]
  ! COMP_LTE        [ reduce using rule 63 (expr -> expr BOOL_AND expr .) ]
  ! >               [ reduce using rule 63 (expr -> expr BOOL_AND expr .) ]
  ! COMP_GTE        [ reduce using rule 63 (expr -> expr BOOL_AND expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 42 ]
  ! ASSIGN_SUB      [ shift and go to state 43 ]
  ! ASSIGN_MULT     [ shift and go to state 44 ]
  ! ASSIGN_DIV      [ shift and go to state 45 ]
  ! BOOL_AND        [ shift and go to state 52 ]
  ! BOOL_OR         [ shift and go to state 53 ]


state 99

    (64) expr -> expr BOOL_OR expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 64 (expr -> expr BOOL_OR expr .)
    ASSIGN_ADD      reduce using rule 64 (expr -> expr BOOL_OR expr .)
    ASSIGN_SUB      reduce using rule 64 (expr -> expr BOOL_OR expr .)
    ASSIGN_MULT     reduce using rule 64 (expr -> expr BOOL_OR expr .)
    ASSIGN_DIV      reduce using rule 64 (expr -> expr BOOL_OR expr .)
    BOOL_OR         reduce using rule 64 (expr -> expr BOOL_OR expr .)
    )               reduce using rule 64 (expr -> expr BOOL_OR expr .)
    ]               reduce using rule 64 (expr -> expr BOOL_OR expr .)
    ,               reduce using rule 64 (expr -> expr BOOL_OR expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52

  ! AR_METHOD_SIZE  [ reduce using rule 64 (expr -> expr BOOL_OR expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 64 (expr -> expr BOOL_OR expr .) ]
  ! +               [ reduce using rule 64 (expr -> expr BOOL_OR expr .) ]
  ! -               [ reduce using rule 64 (expr -> expr BOOL_OR expr .) ]
  ! *               [ reduce using rule 64 (expr -> expr BOOL_OR expr .) ]
  ! /               [ reduce using rule 64 (expr -> expr BOOL_OR expr .) ]
  ! COMP_EQU        [ reduce using rule 64 (expr -> expr BOOL_OR expr .) ]
  ! COMP_NEQU       [ reduce using rule 64 (expr -> expr BOOL_OR expr .) ]
  ! <               [ reduce using rule 64 (expr -> expr BOOL_OR expr .) ]
  ! COMP_LTE        [ reduce using rule 64 (expr -> expr BOOL_OR expr .) ]
  ! >               [ reduce using rule 64 (expr -> expr BOOL_OR expr .) ]
  ! COMP_GTE        [ reduce using rule 64 (expr -> expr BOOL_OR expr .) ]
  ! BOOL_AND        [ reduce using rule 64 (expr -> expr BOOL_OR expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 42 ]
  ! ASSIGN_SUB      [ shift and go to state 43 ]
  ! ASSIGN_MULT     [ shift and go to state 44 ]
  ! ASSIGN_DIV      [ shift and go to state 45 ]
  ! BOOL_OR         [ shift and go to state 53 ]


state 100

    (36) expr -> ID ( arguments . )
    (68) arguments -> arguments . , expr

    )               shift and go to state 122
    ,               shift and go to state 123


state 101

    (37) expr -> ID ( ) .

    ;               reduce using rule 37 (expr -> ID ( ) .)
    AR_METHOD_SIZE  reduce using rule 37 (expr -> ID ( ) .)
    AR_METHOD_RESIZE reduce using rule 37 (expr -> ID ( ) .)
    +               reduce using rule 37 (expr -> ID ( ) .)
    -               reduce using rule 37 (expr -> ID ( ) .)
    *               reduce using rule 37 (expr -> ID ( ) .)
    /               reduce using rule 37 (expr -> ID ( ) .)
    ASSIGN_ADD      reduce using rule 37 (expr -> ID ( ) .)
    ASSIGN_SUB      reduce using rule 37 (expr -> ID ( ) .)
    ASSIGN_MULT     reduce using rule 37 (expr -> ID ( ) .)
    ASSIGN_DIV      reduce using rule 37 (expr -> ID ( ) .)
    COMP_EQU        reduce using rule 37 (expr -> ID ( ) .)
    COMP_NEQU       reduce using rule 37 (expr -> ID ( ) .)
    <               reduce using rule 37 (expr -> ID ( ) .)
    COMP_LTE        reduce using rule 37 (expr -> ID ( ) .)
    >               reduce using rule 37 (expr -> ID ( ) .)
    COMP_GTE        reduce using rule 37 (expr -> ID ( ) .)
    BOOL_AND        reduce using rule 37 (expr -> ID ( ) .)
    BOOL_OR         reduce using rule 37 (expr -> ID ( ) .)
    )               reduce using rule 37 (expr -> ID ( ) .)
    ]               reduce using rule 37 (expr -> ID ( ) .)
    ,               reduce using rule 37 (expr -> ID ( ) .)


state 102

    (67) arguments -> expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    )               reduce using rule 67 (arguments -> expr .)
    ,               reduce using rule 67 (arguments -> expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53


state 103

    (56) expr -> ( expr ) .

    ;               reduce using rule 56 (expr -> ( expr ) .)
    AR_METHOD_SIZE  reduce using rule 56 (expr -> ( expr ) .)
    AR_METHOD_RESIZE reduce using rule 56 (expr -> ( expr ) .)
    +               reduce using rule 56 (expr -> ( expr ) .)
    -               reduce using rule 56 (expr -> ( expr ) .)
    *               reduce using rule 56 (expr -> ( expr ) .)
    /               reduce using rule 56 (expr -> ( expr ) .)
    ASSIGN_ADD      reduce using rule 56 (expr -> ( expr ) .)
    ASSIGN_SUB      reduce using rule 56 (expr -> ( expr ) .)
    ASSIGN_MULT     reduce using rule 56 (expr -> ( expr ) .)
    ASSIGN_DIV      reduce using rule 56 (expr -> ( expr ) .)
    COMP_EQU        reduce using rule 56 (expr -> ( expr ) .)
    COMP_NEQU       reduce using rule 56 (expr -> ( expr ) .)
    <               reduce using rule 56 (expr -> ( expr ) .)
    COMP_LTE        reduce using rule 56 (expr -> ( expr ) .)
    >               reduce using rule 56 (expr -> ( expr ) .)
    COMP_GTE        reduce using rule 56 (expr -> ( expr ) .)
    BOOL_AND        reduce using rule 56 (expr -> ( expr ) .)
    BOOL_OR         reduce using rule 56 (expr -> ( expr ) .)
    )               reduce using rule 56 (expr -> ( expr ) .)
    ]               reduce using rule 56 (expr -> ( expr ) .)
    ,               reduce using rule 56 (expr -> ( expr ) .)


state 104

    (38) expr -> [ elements ] .

    ;               reduce using rule 38 (expr -> [ elements ] .)
    AR_METHOD_SIZE  reduce using rule 38 (expr -> [ elements ] .)
    AR_METHOD_RESIZE reduce using rule 38 (expr -> [ elements ] .)
    +               reduce using rule 38 (expr -> [ elements ] .)
    -               reduce using rule 38 (expr -> [ elements ] .)
    *               reduce using rule 38 (expr -> [ elements ] .)
    /               reduce using rule 38 (expr -> [ elements ] .)
    ASSIGN_ADD      reduce using rule 38 (expr -> [ elements ] .)
    ASSIGN_SUB      reduce using rule 38 (expr -> [ elements ] .)
    ASSIGN_MULT     reduce using rule 38 (expr -> [ elements ] .)
    ASSIGN_DIV      reduce using rule 38 (expr -> [ elements ] .)
    COMP_EQU        reduce using rule 38 (expr -> [ elements ] .)
    COMP_NEQU       reduce using rule 38 (expr -> [ elements ] .)
    <               reduce using rule 38 (expr -> [ elements ] .)
    COMP_LTE        reduce using rule 38 (expr -> [ elements ] .)
    >               reduce using rule 38 (expr -> [ elements ] .)
    COMP_GTE        reduce using rule 38 (expr -> [ elements ] .)
    BOOL_AND        reduce using rule 38 (expr -> [ elements ] .)
    BOOL_OR         reduce using rule 38 (expr -> [ elements ] .)
    )               reduce using rule 38 (expr -> [ elements ] .)
    ]               reduce using rule 38 (expr -> [ elements ] .)
    ,               reduce using rule 38 (expr -> [ elements ] .)


state 105

    (42) elements -> elements , . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 124
    variable                       shift and go to state 17

state 106

    (46) expr -> variable [ expr . ]
    (47) expr -> variable [ expr . ] = expr
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ]               shift and go to state 125
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53


state 107

    (75) expr -> variable = expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 75 (expr -> variable = expr .)
    ASSIGN_ADD      reduce using rule 75 (expr -> variable = expr .)
    ASSIGN_SUB      reduce using rule 75 (expr -> variable = expr .)
    ASSIGN_MULT     reduce using rule 75 (expr -> variable = expr .)
    ASSIGN_DIV      reduce using rule 75 (expr -> variable = expr .)
    )               reduce using rule 75 (expr -> variable = expr .)
    ]               reduce using rule 75 (expr -> variable = expr .)
    ,               reduce using rule 75 (expr -> variable = expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53

  ! AR_METHOD_SIZE  [ reduce using rule 75 (expr -> variable = expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 75 (expr -> variable = expr .) ]
  ! +               [ reduce using rule 75 (expr -> variable = expr .) ]
  ! -               [ reduce using rule 75 (expr -> variable = expr .) ]
  ! *               [ reduce using rule 75 (expr -> variable = expr .) ]
  ! /               [ reduce using rule 75 (expr -> variable = expr .) ]
  ! COMP_EQU        [ reduce using rule 75 (expr -> variable = expr .) ]
  ! COMP_NEQU       [ reduce using rule 75 (expr -> variable = expr .) ]
  ! <               [ reduce using rule 75 (expr -> variable = expr .) ]
  ! COMP_LTE        [ reduce using rule 75 (expr -> variable = expr .) ]
  ! >               [ reduce using rule 75 (expr -> variable = expr .) ]
  ! COMP_GTE        [ reduce using rule 75 (expr -> variable = expr .) ]
  ! BOOL_AND        [ reduce using rule 75 (expr -> variable = expr .) ]
  ! BOOL_OR         [ reduce using rule 75 (expr -> variable = expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 42 ]
  ! ASSIGN_SUB      [ shift and go to state 43 ]
  ! ASSIGN_MULT     [ shift and go to state 44 ]
  ! ASSIGN_DIV      [ shift and go to state 45 ]


state 108

    (66) expr -> COMMAND_PRINT ( arguments . )
    (68) arguments -> arguments . , expr

    )               shift and go to state 126
    ,               shift and go to state 123


state 109

    (69) expr -> COMMAND_RANDOM ( expr . )
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    )               shift and go to state 127
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53


state 110

    (21) declaration -> TYPE ID = . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 128
    variable                       shift and go to state 17

state 111

    (22) declaration -> ARRAY_TYPE ( TYPE . ) ID
    (23) declaration -> ARRAY_TYPE ( TYPE . ) ID = expr

    )               shift and go to state 129


state 112

    (25) declaration -> STRING_TYPE ID = . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 130
    variable                       shift and go to state 17

state 113

    (13) block -> open_block statements close_block .

    ;               reduce using rule 13 (block -> open_block statements close_block .)
    ID              reduce using rule 13 (block -> open_block statements close_block .)
    [               reduce using rule 13 (block -> open_block statements close_block .)
    STRING_LITERAL  reduce using rule 13 (block -> open_block statements close_block .)
    (               reduce using rule 13 (block -> open_block statements close_block .)
    !               reduce using rule 13 (block -> open_block statements close_block .)
    COMMAND_PRINT   reduce using rule 13 (block -> open_block statements close_block .)
    COMMAND_RANDOM  reduce using rule 13 (block -> open_block statements close_block .)
    VAL_LITERAL     reduce using rule 13 (block -> open_block statements close_block .)
    -               reduce using rule 13 (block -> open_block statements close_block .)
    CHAR_LITERAL    reduce using rule 13 (block -> open_block statements close_block .)
    TYPE            reduce using rule 13 (block -> open_block statements close_block .)
    ARRAY_TYPE      reduce using rule 13 (block -> open_block statements close_block .)
    STRING_TYPE     reduce using rule 13 (block -> open_block statements close_block .)
    COMMAND_IF      reduce using rule 13 (block -> open_block statements close_block .)
    COMMAND_WHILE   reduce using rule 13 (block -> open_block statements close_block .)
    COMMAND_BREAK   reduce using rule 13 (block -> open_block statements close_block .)
    FUNC_RETURN     reduce using rule 13 (block -> open_block statements close_block .)
    {               reduce using rule 13 (block -> open_block statements close_block .)
    FUNC_DEFINE     reduce using rule 13 (block -> open_block statements close_block .)
    $end            reduce using rule 13 (block -> open_block statements close_block .)
    }               reduce using rule 13 (block -> open_block statements close_block .)
    COMMAND_ELSE    reduce using rule 13 (block -> open_block statements close_block .)


state 114

    (15) close_block -> } .

    ;               reduce using rule 15 (close_block -> } .)
    ID              reduce using rule 15 (close_block -> } .)
    [               reduce using rule 15 (close_block -> } .)
    STRING_LITERAL  reduce using rule 15 (close_block -> } .)
    (               reduce using rule 15 (close_block -> } .)
    !               reduce using rule 15 (close_block -> } .)
    COMMAND_PRINT   reduce using rule 15 (close_block -> } .)
    COMMAND_RANDOM  reduce using rule 15 (close_block -> } .)
    VAL_LITERAL     reduce using rule 15 (close_block -> } .)
    -               reduce using rule 15 (close_block -> } .)
    CHAR_LITERAL    reduce using rule 15 (close_block -> } .)
    TYPE            reduce using rule 15 (close_block -> } .)
    ARRAY_TYPE      reduce using rule 15 (close_block -> } .)
    STRING_TYPE     reduce using rule 15 (close_block -> } .)
    COMMAND_IF      reduce using rule 15 (close_block -> } .)
    COMMAND_WHILE   reduce using rule 15 (close_block -> } .)
    COMMAND_BREAK   reduce using rule 15 (close_block -> } .)
    FUNC_RETURN     reduce using rule 15 (close_block -> } .)
    {               reduce using rule 15 (close_block -> } .)
    FUNC_DEFINE     reduce using rule 15 (close_block -> } .)
    $end            reduce using rule 15 (close_block -> } .)
    }               reduce using rule 15 (close_block -> } .)
    COMMAND_ELSE    reduce using rule 15 (close_block -> } .)


state 115

    (16) if_block -> COMMAND_IF ( expr . ) statement
    (17) if_block -> COMMAND_IF ( expr . ) statement COMMAND_ELSE statement
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    )               shift and go to state 131
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53


state 116

    (19) while_loop -> COMMAND_WHILE ( expr . ) statement
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    )               shift and go to state 132
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53


state 117

    (31) func_signature -> FUNC_DEFINE all_type ID . ( parameters )
    (32) func_signature -> FUNC_DEFINE all_type ID . ( )

    (               shift and go to state 133


state 118

    (28) all_type -> ARRAY_TYPE ( . TYPE )

    TYPE            shift and go to state 134


state 119

    (44) expr -> expr AR_METHOD_SIZE ( expr . )
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    )               shift and go to state 135
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53


state 120

    (43) expr -> expr AR_METHOD_SIZE ( ) .

    ;               reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    AR_METHOD_SIZE  reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    AR_METHOD_RESIZE reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    +               reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    -               reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    *               reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    /               reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    ASSIGN_ADD      reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    ASSIGN_SUB      reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    ASSIGN_MULT     reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    ASSIGN_DIV      reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    COMP_EQU        reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    COMP_NEQU       reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    <               reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    COMP_LTE        reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    >               reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    COMP_GTE        reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    BOOL_AND        reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    BOOL_OR         reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    )               reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    ]               reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)
    ,               reduce using rule 43 (expr -> expr AR_METHOD_SIZE ( ) .)


state 121

    (45) expr -> expr AR_METHOD_RESIZE ( arguments . )
    (68) arguments -> arguments . , expr

    )               shift and go to state 136
    ,               shift and go to state 123


state 122

    (36) expr -> ID ( arguments ) .

    ;               reduce using rule 36 (expr -> ID ( arguments ) .)
    AR_METHOD_SIZE  reduce using rule 36 (expr -> ID ( arguments ) .)
    AR_METHOD_RESIZE reduce using rule 36 (expr -> ID ( arguments ) .)
    +               reduce using rule 36 (expr -> ID ( arguments ) .)
    -               reduce using rule 36 (expr -> ID ( arguments ) .)
    *               reduce using rule 36 (expr -> ID ( arguments ) .)
    /               reduce using rule 36 (expr -> ID ( arguments ) .)
    ASSIGN_ADD      reduce using rule 36 (expr -> ID ( arguments ) .)
    ASSIGN_SUB      reduce using rule 36 (expr -> ID ( arguments ) .)
    ASSIGN_MULT     reduce using rule 36 (expr -> ID ( arguments ) .)
    ASSIGN_DIV      reduce using rule 36 (expr -> ID ( arguments ) .)
    COMP_EQU        reduce using rule 36 (expr -> ID ( arguments ) .)
    COMP_NEQU       reduce using rule 36 (expr -> ID ( arguments ) .)
    <               reduce using rule 36 (expr -> ID ( arguments ) .)
    COMP_LTE        reduce using rule 36 (expr -> ID ( arguments ) .)
    >               reduce using rule 36 (expr -> ID ( arguments ) .)
    COMP_GTE        reduce using rule 36 (expr -> ID ( arguments ) .)
    BOOL_AND        reduce using rule 36 (expr -> ID ( arguments ) .)
    BOOL_OR         reduce using rule 36 (expr -> ID ( arguments ) .)
    )               reduce using rule 36 (expr -> ID ( arguments ) .)
    ]               reduce using rule 36 (expr -> ID ( arguments ) .)
    ,               reduce using rule 36 (expr -> ID ( arguments ) .)


state 123

    (68) arguments -> arguments , . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 137
    variable                       shift and go to state 17

state 124

    (42) elements -> elements , expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ]               reduce using rule 42 (elements -> elements , expr .)
    ,               reduce using rule 42 (elements -> elements , expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53


state 125

    (46) expr -> variable [ expr ] .
    (47) expr -> variable [ expr ] . = expr

    ;               reduce using rule 46 (expr -> variable [ expr ] .)
    AR_METHOD_SIZE  reduce using rule 46 (expr -> variable [ expr ] .)
    AR_METHOD_RESIZE reduce using rule 46 (expr -> variable [ expr ] .)
    +               reduce using rule 46 (expr -> variable [ expr ] .)
    -               reduce using rule 46 (expr -> variable [ expr ] .)
    *               reduce using rule 46 (expr -> variable [ expr ] .)
    /               reduce using rule 46 (expr -> variable [ expr ] .)
    ASSIGN_ADD      reduce using rule 46 (expr -> variable [ expr ] .)
    ASSIGN_SUB      reduce using rule 46 (expr -> variable [ expr ] .)
    ASSIGN_MULT     reduce using rule 46 (expr -> variable [ expr ] .)
    ASSIGN_DIV      reduce using rule 46 (expr -> variable [ expr ] .)
    COMP_EQU        reduce using rule 46 (expr -> variable [ expr ] .)
    COMP_NEQU       reduce using rule 46 (expr -> variable [ expr ] .)
    <               reduce using rule 46 (expr -> variable [ expr ] .)
    COMP_LTE        reduce using rule 46 (expr -> variable [ expr ] .)
    >               reduce using rule 46 (expr -> variable [ expr ] .)
    COMP_GTE        reduce using rule 46 (expr -> variable [ expr ] .)
    BOOL_AND        reduce using rule 46 (expr -> variable [ expr ] .)
    BOOL_OR         reduce using rule 46 (expr -> variable [ expr ] .)
    )               reduce using rule 46 (expr -> variable [ expr ] .)
    ]               reduce using rule 46 (expr -> variable [ expr ] .)
    ,               reduce using rule 46 (expr -> variable [ expr ] .)
    =               shift and go to state 138


state 126

    (66) expr -> COMMAND_PRINT ( arguments ) .

    ;               reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    AR_METHOD_SIZE  reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    AR_METHOD_RESIZE reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    +               reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    -               reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    *               reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    /               reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_ADD      reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_SUB      reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_MULT     reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_DIV      reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_EQU        reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_NEQU       reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    <               reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_LTE        reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    >               reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_GTE        reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    BOOL_AND        reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    BOOL_OR         reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    )               reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    ]               reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)
    ,               reduce using rule 66 (expr -> COMMAND_PRINT ( arguments ) .)


state 127

    (69) expr -> COMMAND_RANDOM ( expr ) .

    ;               reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    AR_METHOD_SIZE  reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    AR_METHOD_RESIZE reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    +               reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    -               reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    *               reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    /               reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_ADD      reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_SUB      reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_MULT     reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_DIV      reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_EQU        reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_NEQU       reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    <               reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_LTE        reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    >               reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_GTE        reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    BOOL_AND        reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    BOOL_OR         reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    )               reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    ]               reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)
    ,               reduce using rule 69 (expr -> COMMAND_RANDOM ( expr ) .)


state 128

    (21) declaration -> TYPE ID = expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 21 (declaration -> TYPE ID = expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53


state 129

    (22) declaration -> ARRAY_TYPE ( TYPE ) . ID
    (23) declaration -> ARRAY_TYPE ( TYPE ) . ID = expr

    ID              shift and go to state 139


state 130

    (25) declaration -> STRING_TYPE ID = expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 25 (declaration -> STRING_TYPE ID = expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53


state 131

    (16) if_block -> COMMAND_IF ( expr ) . statement
    (17) if_block -> COMMAND_IF ( expr ) . statement COMMAND_ELSE statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . return_statement ;
    (11) statement -> . function_def
    (12) statement -> . ;
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (20) declaration -> . TYPE ID
    (21) declaration -> . TYPE ID = expr
    (22) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (23) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (24) declaration -> . STRING_TYPE ID
    (25) declaration -> . STRING_TYPE ID = expr
    (13) block -> . open_block statements close_block
    (16) if_block -> . COMMAND_IF ( expr ) statement
    (17) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (19) while_loop -> . COMMAND_WHILE ( expr ) statement
    (18) break -> . COMMAND_BREAK
    (29) return_statement -> . FUNC_RETURN expr
    (30) function_def -> . func_signature statement
    (76) variable -> . ID
    (14) open_block -> . {
    (31) func_signature -> . FUNC_DEFINE all_type ID ( parameters )
    (32) func_signature -> . FUNC_DEFINE all_type ID ( )

    ;               shift and go to state 5
    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23
    TYPE            shift and go to state 24
    ARRAY_TYPE      shift and go to state 25
    STRING_TYPE     shift and go to state 26
    COMMAND_IF      shift and go to state 28
    COMMAND_WHILE   shift and go to state 29
    COMMAND_BREAK   shift and go to state 30
    FUNC_RETURN     shift and go to state 31
    {               shift and go to state 33
    FUNC_DEFINE     shift and go to state 34

    expr                           shift and go to state 4
    statement                      shift and go to state 140
    declaration                    shift and go to state 6
    block                          shift and go to state 7
    if_block                       shift and go to state 8
    while_loop                     shift and go to state 9
    break                          shift and go to state 10
    return_statement               shift and go to state 11
    function_def                   shift and go to state 12
    variable                       shift and go to state 17
    open_block                     shift and go to state 27
    func_signature                 shift and go to state 32

state 132

    (19) while_loop -> COMMAND_WHILE ( expr ) . statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . return_statement ;
    (11) statement -> . function_def
    (12) statement -> . ;
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (20) declaration -> . TYPE ID
    (21) declaration -> . TYPE ID = expr
    (22) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (23) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (24) declaration -> . STRING_TYPE ID
    (25) declaration -> . STRING_TYPE ID = expr
    (13) block -> . open_block statements close_block
    (16) if_block -> . COMMAND_IF ( expr ) statement
    (17) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (19) while_loop -> . COMMAND_WHILE ( expr ) statement
    (18) break -> . COMMAND_BREAK
    (29) return_statement -> . FUNC_RETURN expr
    (30) function_def -> . func_signature statement
    (76) variable -> . ID
    (14) open_block -> . {
    (31) func_signature -> . FUNC_DEFINE all_type ID ( parameters )
    (32) func_signature -> . FUNC_DEFINE all_type ID ( )

    ;               shift and go to state 5
    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23
    TYPE            shift and go to state 24
    ARRAY_TYPE      shift and go to state 25
    STRING_TYPE     shift and go to state 26
    COMMAND_IF      shift and go to state 28
    COMMAND_WHILE   shift and go to state 29
    COMMAND_BREAK   shift and go to state 30
    FUNC_RETURN     shift and go to state 31
    {               shift and go to state 33
    FUNC_DEFINE     shift and go to state 34

    expr                           shift and go to state 4
    statement                      shift and go to state 141
    declaration                    shift and go to state 6
    block                          shift and go to state 7
    if_block                       shift and go to state 8
    while_loop                     shift and go to state 9
    break                          shift and go to state 10
    return_statement               shift and go to state 11
    function_def                   shift and go to state 12
    variable                       shift and go to state 17
    open_block                     shift and go to state 27
    func_signature                 shift and go to state 32

state 133

    (31) func_signature -> FUNC_DEFINE all_type ID ( . parameters )
    (32) func_signature -> FUNC_DEFINE all_type ID ( . )
    (33) parameters -> . parameters , parameter
    (34) parameters -> . parameter
    (35) parameter -> . all_type ID
    (26) all_type -> . TYPE
    (27) all_type -> . STRING_TYPE
    (28) all_type -> . ARRAY_TYPE ( TYPE )

    )               shift and go to state 144
    TYPE            shift and go to state 79
    STRING_TYPE     shift and go to state 80
    ARRAY_TYPE      shift and go to state 81

    all_type                       shift and go to state 142
    parameters                     shift and go to state 143
    parameter                      shift and go to state 145

state 134

    (28) all_type -> ARRAY_TYPE ( TYPE . )

    )               shift and go to state 146


state 135

    (44) expr -> expr AR_METHOD_SIZE ( expr ) .

    ;               reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    AR_METHOD_SIZE  reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    AR_METHOD_RESIZE reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    +               reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    -               reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    *               reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    /               reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ASSIGN_ADD      reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ASSIGN_SUB      reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ASSIGN_MULT     reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ASSIGN_DIV      reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    COMP_EQU        reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    COMP_NEQU       reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    <               reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    COMP_LTE        reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    >               reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    COMP_GTE        reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    BOOL_AND        reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    BOOL_OR         reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    )               reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ]               reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ,               reduce using rule 44 (expr -> expr AR_METHOD_SIZE ( expr ) .)


state 136

    (45) expr -> expr AR_METHOD_RESIZE ( arguments ) .

    ;               reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    AR_METHOD_SIZE  reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    AR_METHOD_RESIZE reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    +               reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    -               reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    *               reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    /               reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    ASSIGN_ADD      reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    ASSIGN_SUB      reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    ASSIGN_MULT     reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    ASSIGN_DIV      reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    COMP_EQU        reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    COMP_NEQU       reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    <               reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    COMP_LTE        reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    >               reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    COMP_GTE        reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    BOOL_AND        reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    BOOL_OR         reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    )               reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    ]               reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)
    ,               reduce using rule 45 (expr -> expr AR_METHOD_RESIZE ( arguments ) .)


state 137

    (68) arguments -> arguments , expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    )               reduce using rule 68 (arguments -> arguments , expr .)
    ,               reduce using rule 68 (arguments -> arguments , expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53


state 138

    (47) expr -> variable [ expr ] = . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    variable                       shift and go to state 17
    expr                           shift and go to state 147

state 139

    (22) declaration -> ARRAY_TYPE ( TYPE ) ID .
    (23) declaration -> ARRAY_TYPE ( TYPE ) ID . = expr

    ;               reduce using rule 22 (declaration -> ARRAY_TYPE ( TYPE ) ID .)
    =               shift and go to state 148


state 140

    (16) if_block -> COMMAND_IF ( expr ) statement .
    (17) if_block -> COMMAND_IF ( expr ) statement . COMMAND_ELSE statement

  ! shift/reduce conflict for COMMAND_ELSE resolved as shift
    ;               reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    ID              reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    [               reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    STRING_LITERAL  reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    (               reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    !               reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_PRINT   reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_RANDOM  reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    VAL_LITERAL     reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    -               reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    CHAR_LITERAL    reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    TYPE            reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    ARRAY_TYPE      reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    STRING_TYPE     reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_IF      reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_WHILE   reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_BREAK   reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    FUNC_RETURN     reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    {               reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    FUNC_DEFINE     reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    $end            reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    }               reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_ELSE    shift and go to state 149

  ! COMMAND_ELSE    [ reduce using rule 16 (if_block -> COMMAND_IF ( expr ) statement .) ]


state 141

    (19) while_loop -> COMMAND_WHILE ( expr ) statement .

    ;               reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    ID              reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    [               reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    STRING_LITERAL  reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    (               reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    !               reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_PRINT   reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_RANDOM  reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    VAL_LITERAL     reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    -               reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    CHAR_LITERAL    reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    TYPE            reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    ARRAY_TYPE      reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    STRING_TYPE     reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_IF      reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_WHILE   reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_BREAK   reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    FUNC_RETURN     reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    {               reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    FUNC_DEFINE     reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    $end            reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    }               reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_ELSE    reduce using rule 19 (while_loop -> COMMAND_WHILE ( expr ) statement .)


state 142

    (35) parameter -> all_type . ID

    ID              shift and go to state 150


state 143

    (31) func_signature -> FUNC_DEFINE all_type ID ( parameters . )
    (33) parameters -> parameters . , parameter

    )               shift and go to state 151
    ,               shift and go to state 152


state 144

    (32) func_signature -> FUNC_DEFINE all_type ID ( ) .

    ;               reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    ID              reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    [               reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    STRING_LITERAL  reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    (               reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    !               reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    COMMAND_PRINT   reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    COMMAND_RANDOM  reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    VAL_LITERAL     reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    -               reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    CHAR_LITERAL    reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    TYPE            reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    ARRAY_TYPE      reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    STRING_TYPE     reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    COMMAND_IF      reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    COMMAND_WHILE   reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    COMMAND_BREAK   reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    FUNC_RETURN     reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    {               reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)
    FUNC_DEFINE     reduce using rule 32 (func_signature -> FUNC_DEFINE all_type ID ( ) .)


state 145

    (34) parameters -> parameter .

    )               reduce using rule 34 (parameters -> parameter .)
    ,               reduce using rule 34 (parameters -> parameter .)


state 146

    (28) all_type -> ARRAY_TYPE ( TYPE ) .

    ID              reduce using rule 28 (all_type -> ARRAY_TYPE ( TYPE ) .)


state 147

    (47) expr -> variable [ expr ] = expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 47 (expr -> variable [ expr ] = expr .)
    ASSIGN_ADD      reduce using rule 47 (expr -> variable [ expr ] = expr .)
    ASSIGN_SUB      reduce using rule 47 (expr -> variable [ expr ] = expr .)
    ASSIGN_MULT     reduce using rule 47 (expr -> variable [ expr ] = expr .)
    ASSIGN_DIV      reduce using rule 47 (expr -> variable [ expr ] = expr .)
    )               reduce using rule 47 (expr -> variable [ expr ] = expr .)
    ]               reduce using rule 47 (expr -> variable [ expr ] = expr .)
    ,               reduce using rule 47 (expr -> variable [ expr ] = expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53

  ! AR_METHOD_SIZE  [ reduce using rule 47 (expr -> variable [ expr ] = expr .) ]
  ! AR_METHOD_RESIZE [ reduce using rule 47 (expr -> variable [ expr ] = expr .) ]
  ! +               [ reduce using rule 47 (expr -> variable [ expr ] = expr .) ]
  ! -               [ reduce using rule 47 (expr -> variable [ expr ] = expr .) ]
  ! *               [ reduce using rule 47 (expr -> variable [ expr ] = expr .) ]
  ! /               [ reduce using rule 47 (expr -> variable [ expr ] = expr .) ]
  ! COMP_EQU        [ reduce using rule 47 (expr -> variable [ expr ] = expr .) ]
  ! COMP_NEQU       [ reduce using rule 47 (expr -> variable [ expr ] = expr .) ]
  ! <               [ reduce using rule 47 (expr -> variable [ expr ] = expr .) ]
  ! COMP_LTE        [ reduce using rule 47 (expr -> variable [ expr ] = expr .) ]
  ! >               [ reduce using rule 47 (expr -> variable [ expr ] = expr .) ]
  ! COMP_GTE        [ reduce using rule 47 (expr -> variable [ expr ] = expr .) ]
  ! BOOL_AND        [ reduce using rule 47 (expr -> variable [ expr ] = expr .) ]
  ! BOOL_OR         [ reduce using rule 47 (expr -> variable [ expr ] = expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 42 ]
  ! ASSIGN_SUB      [ shift and go to state 43 ]
  ! ASSIGN_MULT     [ shift and go to state 44 ]
  ! ASSIGN_DIV      [ shift and go to state 45 ]


state 148

    (23) declaration -> ARRAY_TYPE ( TYPE ) ID = . expr
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (76) variable -> . ID

    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23

    expr                           shift and go to state 153
    variable                       shift and go to state 17

state 149

    (17) if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE . statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . return_statement ;
    (11) statement -> . function_def
    (12) statement -> . ;
    (36) expr -> . ID ( arguments )
    (37) expr -> . ID ( )
    (38) expr -> . [ elements ]
    (39) expr -> . [ ]
    (40) expr -> . STRING_LITERAL
    (43) expr -> . expr AR_METHOD_SIZE ( )
    (44) expr -> . expr AR_METHOD_SIZE ( expr )
    (45) expr -> . expr AR_METHOD_RESIZE ( arguments )
    (46) expr -> . variable [ expr ]
    (47) expr -> . variable [ expr ] = expr
    (48) expr -> . expr + expr
    (49) expr -> . expr - expr
    (50) expr -> . expr * expr
    (51) expr -> . expr / expr
    (52) expr -> . expr ASSIGN_ADD expr
    (53) expr -> . expr ASSIGN_SUB expr
    (54) expr -> . expr ASSIGN_MULT expr
    (55) expr -> . expr ASSIGN_DIV expr
    (56) expr -> . ( expr )
    (57) expr -> . expr COMP_EQU expr
    (58) expr -> . expr COMP_NEQU expr
    (59) expr -> . expr < expr
    (60) expr -> . expr COMP_LTE expr
    (61) expr -> . expr > expr
    (62) expr -> . expr COMP_GTE expr
    (63) expr -> . expr BOOL_AND expr
    (64) expr -> . expr BOOL_OR expr
    (65) expr -> . ! expr
    (66) expr -> . COMMAND_PRINT ( arguments )
    (69) expr -> . COMMAND_RANDOM ( expr )
    (70) expr -> . VAL_LITERAL
    (71) expr -> . - VAL_LITERAL
    (72) expr -> . CHAR_LITERAL
    (73) expr -> . variable
    (74) expr -> . - variable
    (75) expr -> . variable = expr
    (20) declaration -> . TYPE ID
    (21) declaration -> . TYPE ID = expr
    (22) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (23) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (24) declaration -> . STRING_TYPE ID
    (25) declaration -> . STRING_TYPE ID = expr
    (13) block -> . open_block statements close_block
    (16) if_block -> . COMMAND_IF ( expr ) statement
    (17) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (19) while_loop -> . COMMAND_WHILE ( expr ) statement
    (18) break -> . COMMAND_BREAK
    (29) return_statement -> . FUNC_RETURN expr
    (30) function_def -> . func_signature statement
    (76) variable -> . ID
    (14) open_block -> . {
    (31) func_signature -> . FUNC_DEFINE all_type ID ( parameters )
    (32) func_signature -> . FUNC_DEFINE all_type ID ( )

    ;               shift and go to state 5
    ID              shift and go to state 13
    [               shift and go to state 15
    STRING_LITERAL  shift and go to state 16
    (               shift and go to state 14
    !               shift and go to state 19
    COMMAND_PRINT   shift and go to state 20
    COMMAND_RANDOM  shift and go to state 21
    VAL_LITERAL     shift and go to state 22
    -               shift and go to state 18
    CHAR_LITERAL    shift and go to state 23
    TYPE            shift and go to state 24
    ARRAY_TYPE      shift and go to state 25
    STRING_TYPE     shift and go to state 26
    COMMAND_IF      shift and go to state 28
    COMMAND_WHILE   shift and go to state 29
    COMMAND_BREAK   shift and go to state 30
    FUNC_RETURN     shift and go to state 31
    {               shift and go to state 33
    FUNC_DEFINE     shift and go to state 34

    expr                           shift and go to state 4
    statement                      shift and go to state 154
    declaration                    shift and go to state 6
    block                          shift and go to state 7
    if_block                       shift and go to state 8
    while_loop                     shift and go to state 9
    break                          shift and go to state 10
    return_statement               shift and go to state 11
    function_def                   shift and go to state 12
    variable                       shift and go to state 17
    open_block                     shift and go to state 27
    func_signature                 shift and go to state 32

state 150

    (35) parameter -> all_type ID .

    )               reduce using rule 35 (parameter -> all_type ID .)
    ,               reduce using rule 35 (parameter -> all_type ID .)


state 151

    (31) func_signature -> FUNC_DEFINE all_type ID ( parameters ) .

    ;               reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    ID              reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    [               reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    STRING_LITERAL  reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    (               reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    !               reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    COMMAND_PRINT   reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    COMMAND_RANDOM  reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    VAL_LITERAL     reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    -               reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    CHAR_LITERAL    reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    TYPE            reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    ARRAY_TYPE      reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    STRING_TYPE     reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    COMMAND_IF      reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    COMMAND_WHILE   reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    COMMAND_BREAK   reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    FUNC_RETURN     reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    {               reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)
    FUNC_DEFINE     reduce using rule 31 (func_signature -> FUNC_DEFINE all_type ID ( parameters ) .)


state 152

    (33) parameters -> parameters , . parameter
    (35) parameter -> . all_type ID
    (26) all_type -> . TYPE
    (27) all_type -> . STRING_TYPE
    (28) all_type -> . ARRAY_TYPE ( TYPE )

    TYPE            shift and go to state 79
    STRING_TYPE     shift and go to state 80
    ARRAY_TYPE      shift and go to state 81

    parameter                      shift and go to state 155
    all_type                       shift and go to state 142

state 153

    (23) declaration -> ARRAY_TYPE ( TYPE ) ID = expr .
    (43) expr -> expr . AR_METHOD_SIZE ( )
    (44) expr -> expr . AR_METHOD_SIZE ( expr )
    (45) expr -> expr . AR_METHOD_RESIZE ( arguments )
    (48) expr -> expr . + expr
    (49) expr -> expr . - expr
    (50) expr -> expr . * expr
    (51) expr -> expr . / expr
    (52) expr -> expr . ASSIGN_ADD expr
    (53) expr -> expr . ASSIGN_SUB expr
    (54) expr -> expr . ASSIGN_MULT expr
    (55) expr -> expr . ASSIGN_DIV expr
    (57) expr -> expr . COMP_EQU expr
    (58) expr -> expr . COMP_NEQU expr
    (59) expr -> expr . < expr
    (60) expr -> expr . COMP_LTE expr
    (61) expr -> expr . > expr
    (62) expr -> expr . COMP_GTE expr
    (63) expr -> expr . BOOL_AND expr
    (64) expr -> expr . BOOL_OR expr

    ;               reduce using rule 23 (declaration -> ARRAY_TYPE ( TYPE ) ID = expr .)
    AR_METHOD_SIZE  shift and go to state 36
    AR_METHOD_RESIZE shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41
    ASSIGN_ADD      shift and go to state 42
    ASSIGN_SUB      shift and go to state 43
    ASSIGN_MULT     shift and go to state 44
    ASSIGN_DIV      shift and go to state 45
    COMP_EQU        shift and go to state 46
    COMP_NEQU       shift and go to state 47
    <               shift and go to state 48
    COMP_LTE        shift and go to state 49
    >               shift and go to state 50
    COMP_GTE        shift and go to state 51
    BOOL_AND        shift and go to state 52
    BOOL_OR         shift and go to state 53


state 154

    (17) if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .

    ;               reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    ID              reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    [               reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    STRING_LITERAL  reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    (               reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    !               reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_PRINT   reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_RANDOM  reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    VAL_LITERAL     reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    -               reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    CHAR_LITERAL    reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    TYPE            reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    ARRAY_TYPE      reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    STRING_TYPE     reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_IF      reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_WHILE   reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_BREAK   reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    FUNC_RETURN     reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    {               reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    FUNC_DEFINE     reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    $end            reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    }               reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_ELSE    reduce using rule 17 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)


state 155

    (33) parameters -> parameters , parameter .

    )               reduce using rule 33 (parameters -> parameters , parameter .)
    ,               reduce using rule 33 (parameters -> parameters , parameter .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AR_METHOD_SIZE in state 88 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_RESIZE in state 88 resolved as shift
WARNING: shift/reduce conflict for + in state 88 resolved as shift
WARNING: shift/reduce conflict for - in state 88 resolved as shift
WARNING: shift/reduce conflict for * in state 88 resolved as shift
WARNING: shift/reduce conflict for / in state 88 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 88 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 88 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 88 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 88 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 88 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 88 resolved as shift
WARNING: shift/reduce conflict for < in state 88 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 88 resolved as shift
WARNING: shift/reduce conflict for > in state 88 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 88 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 88 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 88 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_SIZE in state 89 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_RESIZE in state 89 resolved as shift
WARNING: shift/reduce conflict for + in state 89 resolved as shift
WARNING: shift/reduce conflict for - in state 89 resolved as shift
WARNING: shift/reduce conflict for * in state 89 resolved as shift
WARNING: shift/reduce conflict for / in state 89 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 89 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 89 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 89 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 89 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 89 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 89 resolved as shift
WARNING: shift/reduce conflict for < in state 89 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 89 resolved as shift
WARNING: shift/reduce conflict for > in state 89 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 89 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 89 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 89 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_SIZE in state 90 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_RESIZE in state 90 resolved as shift
WARNING: shift/reduce conflict for + in state 90 resolved as shift
WARNING: shift/reduce conflict for - in state 90 resolved as shift
WARNING: shift/reduce conflict for * in state 90 resolved as shift
WARNING: shift/reduce conflict for / in state 90 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 90 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 90 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 90 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 90 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 90 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 90 resolved as shift
WARNING: shift/reduce conflict for < in state 90 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 90 resolved as shift
WARNING: shift/reduce conflict for > in state 90 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 90 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 90 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 90 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_SIZE in state 91 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_RESIZE in state 91 resolved as shift
WARNING: shift/reduce conflict for + in state 91 resolved as shift
WARNING: shift/reduce conflict for - in state 91 resolved as shift
WARNING: shift/reduce conflict for * in state 91 resolved as shift
WARNING: shift/reduce conflict for / in state 91 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 91 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 91 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 91 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 91 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 91 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 91 resolved as shift
WARNING: shift/reduce conflict for < in state 91 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 91 resolved as shift
WARNING: shift/reduce conflict for > in state 91 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 91 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 91 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 91 resolved as shift
WARNING: shift/reduce conflict for COMMAND_ELSE in state 140 resolved as shift
