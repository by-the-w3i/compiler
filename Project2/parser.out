Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    WHITESPACE
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> <empty>
Rule 4     statement -> expr ;
Rule 5     statement -> declaration ;
Rule 6     declaration -> TYPE ID
Rule 7     declaration -> TYPE ID = expr
Rule 8     expr -> expr + expr
Rule 9     expr -> expr - expr
Rule 10    expr -> expr * expr
Rule 11    expr -> expr / expr
Rule 12    expr -> expr ASSIGN_ADD expr
Rule 13    expr -> expr ASSIGN_SUB expr
Rule 14    expr -> expr ASSIGN_MULT expr
Rule 15    expr -> expr ASSIGN_DIV expr
Rule 16    expr -> ( expr )
Rule 17    expr -> expr COMP_EQU expr
Rule 18    expr -> expr COMP_NEQU expr
Rule 19    expr -> expr < expr
Rule 20    expr -> expr COMP_LTE expr
Rule 21    expr -> expr > expr
Rule 22    expr -> expr COMP_GTE expr
Rule 23    expr -> expr BOOL_AND expr
Rule 24    expr -> expr BOOL_OR expr
Rule 25    expr -> COMMAND_PRINT ( arguments )
Rule 26    arguments -> expr
Rule 27    arguments -> expr , arguments
Rule 28    expr -> COMMAND_RANDOM ( expr )
Rule 29    expr -> VAL_LITERAL
Rule 30    expr -> variable
Rule 31    expr -> - VAL_LITERAL
Rule 32    expr -> - variable
Rule 33    expr -> variable = expr
Rule 34    variable -> ID

Terminals, with rules where they appear

(                    : 16 25 28
)                    : 16 25 28
*                    : 10
+                    : 8
,                    : 27
-                    : 9 31 32
/                    : 11
;                    : 4 5
<                    : 19
=                    : 7 33
>                    : 21
ASSIGN_ADD           : 12
ASSIGN_DIV           : 15
ASSIGN_MULT          : 14
ASSIGN_SUB           : 13
BOOL_AND             : 23
BOOL_OR              : 24
COMMAND_PRINT        : 25
COMMAND_RANDOM       : 28
COMMENT              : 
COMP_EQU             : 17
COMP_GTE             : 22
COMP_LTE             : 20
COMP_NEQU            : 18
ID                   : 6 7 34
TYPE                 : 6 7
VAL_LITERAL          : 29 31
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

arguments            : 25 27
declaration          : 5
expr                 : 4 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 26 27 28 33
program              : 0
statement            : 2
statements           : 1 2
variable             : 30 32 33

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> .

    (               reduce using rule 3 (statements -> .)
    COMMAND_PRINT   reduce using rule 3 (statements -> .)
    COMMAND_RANDOM  reduce using rule 3 (statements -> .)
    VAL_LITERAL     reduce using rule 3 (statements -> .)
    -               reduce using rule 3 (statements -> .)
    TYPE            reduce using rule 3 (statements -> .)
    ID              reduce using rule 3 (statements -> .)
    $end            reduce using rule 3 (statements -> .)

    program                        shift and go to state 1
    statements                     shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (6) declaration -> . TYPE ID
    (7) declaration -> . TYPE ID = expr
    (34) variable -> . ID

    $end            reduce using rule 1 (program -> statements .)
    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    TYPE            shift and go to state 4
    ID              shift and go to state 13

    variable                       shift and go to state 12
    declaration                    shift and go to state 6
    expr                           shift and go to state 3
    statement                      shift and go to state 9

state 3

    (4) statement -> expr . ;
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

    ;               shift and go to state 19
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20


state 4

    (6) declaration -> TYPE . ID
    (7) declaration -> TYPE . ID = expr

    ID              shift and go to state 31


state 5

    (29) expr -> VAL_LITERAL .

    ;               reduce using rule 29 (expr -> VAL_LITERAL .)
    +               reduce using rule 29 (expr -> VAL_LITERAL .)
    -               reduce using rule 29 (expr -> VAL_LITERAL .)
    *               reduce using rule 29 (expr -> VAL_LITERAL .)
    /               reduce using rule 29 (expr -> VAL_LITERAL .)
    ASSIGN_ADD      reduce using rule 29 (expr -> VAL_LITERAL .)
    ASSIGN_SUB      reduce using rule 29 (expr -> VAL_LITERAL .)
    ASSIGN_MULT     reduce using rule 29 (expr -> VAL_LITERAL .)
    ASSIGN_DIV      reduce using rule 29 (expr -> VAL_LITERAL .)
    COMP_EQU        reduce using rule 29 (expr -> VAL_LITERAL .)
    COMP_NEQU       reduce using rule 29 (expr -> VAL_LITERAL .)
    <               reduce using rule 29 (expr -> VAL_LITERAL .)
    COMP_LTE        reduce using rule 29 (expr -> VAL_LITERAL .)
    >               reduce using rule 29 (expr -> VAL_LITERAL .)
    COMP_GTE        reduce using rule 29 (expr -> VAL_LITERAL .)
    BOOL_AND        reduce using rule 29 (expr -> VAL_LITERAL .)
    BOOL_OR         reduce using rule 29 (expr -> VAL_LITERAL .)
    )               reduce using rule 29 (expr -> VAL_LITERAL .)
    ,               reduce using rule 29 (expr -> VAL_LITERAL .)


state 6

    (5) statement -> declaration . ;

    ;               shift and go to state 32


state 7

    (28) expr -> COMMAND_RANDOM . ( expr )

    (               shift and go to state 33


state 8

    (31) expr -> - . VAL_LITERAL
    (32) expr -> - . variable
    (34) variable -> . ID

    VAL_LITERAL     shift and go to state 35
    ID              shift and go to state 13

    variable                       shift and go to state 34

state 9

    (2) statements -> statements statement .

    (               reduce using rule 2 (statements -> statements statement .)
    COMMAND_PRINT   reduce using rule 2 (statements -> statements statement .)
    COMMAND_RANDOM  reduce using rule 2 (statements -> statements statement .)
    VAL_LITERAL     reduce using rule 2 (statements -> statements statement .)
    -               reduce using rule 2 (statements -> statements statement .)
    TYPE            reduce using rule 2 (statements -> statements statement .)
    ID              reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 10

    (16) expr -> ( . expr )
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 36

state 11

    (25) expr -> COMMAND_PRINT . ( arguments )

    (               shift and go to state 37


state 12

    (30) expr -> variable .
    (33) expr -> variable . = expr

    ;               reduce using rule 30 (expr -> variable .)
    +               reduce using rule 30 (expr -> variable .)
    -               reduce using rule 30 (expr -> variable .)
    *               reduce using rule 30 (expr -> variable .)
    /               reduce using rule 30 (expr -> variable .)
    ASSIGN_ADD      reduce using rule 30 (expr -> variable .)
    ASSIGN_SUB      reduce using rule 30 (expr -> variable .)
    ASSIGN_MULT     reduce using rule 30 (expr -> variable .)
    ASSIGN_DIV      reduce using rule 30 (expr -> variable .)
    COMP_EQU        reduce using rule 30 (expr -> variable .)
    COMP_NEQU       reduce using rule 30 (expr -> variable .)
    <               reduce using rule 30 (expr -> variable .)
    COMP_LTE        reduce using rule 30 (expr -> variable .)
    >               reduce using rule 30 (expr -> variable .)
    COMP_GTE        reduce using rule 30 (expr -> variable .)
    BOOL_AND        reduce using rule 30 (expr -> variable .)
    BOOL_OR         reduce using rule 30 (expr -> variable .)
    )               reduce using rule 30 (expr -> variable .)
    ,               reduce using rule 30 (expr -> variable .)
    =               shift and go to state 38


state 13

    (34) variable -> ID .

    =               reduce using rule 34 (variable -> ID .)
    +               reduce using rule 34 (variable -> ID .)
    -               reduce using rule 34 (variable -> ID .)
    *               reduce using rule 34 (variable -> ID .)
    /               reduce using rule 34 (variable -> ID .)
    ASSIGN_ADD      reduce using rule 34 (variable -> ID .)
    ASSIGN_SUB      reduce using rule 34 (variable -> ID .)
    ASSIGN_MULT     reduce using rule 34 (variable -> ID .)
    ASSIGN_DIV      reduce using rule 34 (variable -> ID .)
    COMP_EQU        reduce using rule 34 (variable -> ID .)
    COMP_NEQU       reduce using rule 34 (variable -> ID .)
    <               reduce using rule 34 (variable -> ID .)
    COMP_LTE        reduce using rule 34 (variable -> ID .)
    >               reduce using rule 34 (variable -> ID .)
    COMP_GTE        reduce using rule 34 (variable -> ID .)
    BOOL_AND        reduce using rule 34 (variable -> ID .)
    BOOL_OR         reduce using rule 34 (variable -> ID .)
    ;               reduce using rule 34 (variable -> ID .)
    )               reduce using rule 34 (variable -> ID .)
    ,               reduce using rule 34 (variable -> ID .)


state 14

    (19) expr -> expr < . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 39

state 15

    (23) expr -> expr BOOL_AND . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 40

state 16

    (22) expr -> expr COMP_GTE . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 41

state 17

    (17) expr -> expr COMP_EQU . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 42

state 18

    (9) expr -> expr - . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 43

state 19

    (4) statement -> expr ; .

    (               reduce using rule 4 (statement -> expr ; .)
    COMMAND_PRINT   reduce using rule 4 (statement -> expr ; .)
    COMMAND_RANDOM  reduce using rule 4 (statement -> expr ; .)
    VAL_LITERAL     reduce using rule 4 (statement -> expr ; .)
    -               reduce using rule 4 (statement -> expr ; .)
    TYPE            reduce using rule 4 (statement -> expr ; .)
    ID              reduce using rule 4 (statement -> expr ; .)
    $end            reduce using rule 4 (statement -> expr ; .)


state 20

    (24) expr -> expr BOOL_OR . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 44

state 21

    (12) expr -> expr ASSIGN_ADD . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 45

state 22

    (13) expr -> expr ASSIGN_SUB . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 46

state 23

    (14) expr -> expr ASSIGN_MULT . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 47

state 24

    (8) expr -> expr + . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 48

state 25

    (10) expr -> expr * . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 49

state 26

    (20) expr -> expr COMP_LTE . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 50

state 27

    (15) expr -> expr ASSIGN_DIV . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 51

state 28

    (11) expr -> expr / . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 52

state 29

    (21) expr -> expr > . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 53

state 30

    (18) expr -> expr COMP_NEQU . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 54

state 31

    (6) declaration -> TYPE ID .
    (7) declaration -> TYPE ID . = expr

    ;               reduce using rule 6 (declaration -> TYPE ID .)
    =               shift and go to state 55


state 32

    (5) statement -> declaration ; .

    (               reduce using rule 5 (statement -> declaration ; .)
    COMMAND_PRINT   reduce using rule 5 (statement -> declaration ; .)
    COMMAND_RANDOM  reduce using rule 5 (statement -> declaration ; .)
    VAL_LITERAL     reduce using rule 5 (statement -> declaration ; .)
    -               reduce using rule 5 (statement -> declaration ; .)
    TYPE            reduce using rule 5 (statement -> declaration ; .)
    ID              reduce using rule 5 (statement -> declaration ; .)
    $end            reduce using rule 5 (statement -> declaration ; .)


state 33

    (28) expr -> COMMAND_RANDOM ( . expr )
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 56

state 34

    (32) expr -> - variable .

    ;               reduce using rule 32 (expr -> - variable .)
    +               reduce using rule 32 (expr -> - variable .)
    -               reduce using rule 32 (expr -> - variable .)
    *               reduce using rule 32 (expr -> - variable .)
    /               reduce using rule 32 (expr -> - variable .)
    ASSIGN_ADD      reduce using rule 32 (expr -> - variable .)
    ASSIGN_SUB      reduce using rule 32 (expr -> - variable .)
    ASSIGN_MULT     reduce using rule 32 (expr -> - variable .)
    ASSIGN_DIV      reduce using rule 32 (expr -> - variable .)
    COMP_EQU        reduce using rule 32 (expr -> - variable .)
    COMP_NEQU       reduce using rule 32 (expr -> - variable .)
    <               reduce using rule 32 (expr -> - variable .)
    COMP_LTE        reduce using rule 32 (expr -> - variable .)
    >               reduce using rule 32 (expr -> - variable .)
    COMP_GTE        reduce using rule 32 (expr -> - variable .)
    BOOL_AND        reduce using rule 32 (expr -> - variable .)
    BOOL_OR         reduce using rule 32 (expr -> - variable .)
    )               reduce using rule 32 (expr -> - variable .)
    ,               reduce using rule 32 (expr -> - variable .)


state 35

    (31) expr -> - VAL_LITERAL .

    ;               reduce using rule 31 (expr -> - VAL_LITERAL .)
    +               reduce using rule 31 (expr -> - VAL_LITERAL .)
    -               reduce using rule 31 (expr -> - VAL_LITERAL .)
    *               reduce using rule 31 (expr -> - VAL_LITERAL .)
    /               reduce using rule 31 (expr -> - VAL_LITERAL .)
    ASSIGN_ADD      reduce using rule 31 (expr -> - VAL_LITERAL .)
    ASSIGN_SUB      reduce using rule 31 (expr -> - VAL_LITERAL .)
    ASSIGN_MULT     reduce using rule 31 (expr -> - VAL_LITERAL .)
    ASSIGN_DIV      reduce using rule 31 (expr -> - VAL_LITERAL .)
    COMP_EQU        reduce using rule 31 (expr -> - VAL_LITERAL .)
    COMP_NEQU       reduce using rule 31 (expr -> - VAL_LITERAL .)
    <               reduce using rule 31 (expr -> - VAL_LITERAL .)
    COMP_LTE        reduce using rule 31 (expr -> - VAL_LITERAL .)
    >               reduce using rule 31 (expr -> - VAL_LITERAL .)
    COMP_GTE        reduce using rule 31 (expr -> - VAL_LITERAL .)
    BOOL_AND        reduce using rule 31 (expr -> - VAL_LITERAL .)
    BOOL_OR         reduce using rule 31 (expr -> - VAL_LITERAL .)
    )               reduce using rule 31 (expr -> - VAL_LITERAL .)
    ,               reduce using rule 31 (expr -> - VAL_LITERAL .)


state 36

    (16) expr -> ( expr . )
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

    )               shift and go to state 57
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20


state 37

    (25) expr -> COMMAND_PRINT ( . arguments )
    (26) arguments -> . expr
    (27) arguments -> . expr , arguments
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    arguments                      shift and go to state 59
    expr                           shift and go to state 58

state 38

    (33) expr -> variable = . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 60

state 39

    (19) expr -> expr < expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 19 (expr -> expr < expr .)
    )               reduce using rule 19 (expr -> expr < expr .)
    ,               reduce using rule 19 (expr -> expr < expr .)
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20

  ! +               [ reduce using rule 19 (expr -> expr < expr .) ]
  ! -               [ reduce using rule 19 (expr -> expr < expr .) ]
  ! *               [ reduce using rule 19 (expr -> expr < expr .) ]
  ! /               [ reduce using rule 19 (expr -> expr < expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 19 (expr -> expr < expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 19 (expr -> expr < expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 19 (expr -> expr < expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 19 (expr -> expr < expr .) ]
  ! COMP_EQU        [ reduce using rule 19 (expr -> expr < expr .) ]
  ! COMP_NEQU       [ reduce using rule 19 (expr -> expr < expr .) ]
  ! <               [ reduce using rule 19 (expr -> expr < expr .) ]
  ! COMP_LTE        [ reduce using rule 19 (expr -> expr < expr .) ]
  ! >               [ reduce using rule 19 (expr -> expr < expr .) ]
  ! COMP_GTE        [ reduce using rule 19 (expr -> expr < expr .) ]
  ! BOOL_AND        [ reduce using rule 19 (expr -> expr < expr .) ]
  ! BOOL_OR         [ reduce using rule 19 (expr -> expr < expr .) ]


state 40

    (23) expr -> expr BOOL_AND expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 23 (expr -> expr BOOL_AND expr .)
    )               reduce using rule 23 (expr -> expr BOOL_AND expr .)
    ,               reduce using rule 23 (expr -> expr BOOL_AND expr .)
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20

  ! +               [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]
  ! -               [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]
  ! *               [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]
  ! /               [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]
  ! COMP_EQU        [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]
  ! COMP_NEQU       [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]
  ! <               [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]
  ! COMP_LTE        [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]
  ! >               [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]
  ! COMP_GTE        [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]
  ! BOOL_AND        [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]
  ! BOOL_OR         [ reduce using rule 23 (expr -> expr BOOL_AND expr .) ]


state 41

    (22) expr -> expr COMP_GTE expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 22 (expr -> expr COMP_GTE expr .)
    )               reduce using rule 22 (expr -> expr COMP_GTE expr .)
    ,               reduce using rule 22 (expr -> expr COMP_GTE expr .)
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20

  ! +               [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]
  ! -               [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]
  ! *               [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]
  ! /               [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]
  ! COMP_EQU        [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]
  ! COMP_NEQU       [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]
  ! <               [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]
  ! COMP_LTE        [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]
  ! >               [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]
  ! COMP_GTE        [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]
  ! BOOL_AND        [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]
  ! BOOL_OR         [ reduce using rule 22 (expr -> expr COMP_GTE expr .) ]


state 42

    (17) expr -> expr COMP_EQU expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 17 (expr -> expr COMP_EQU expr .)
    )               reduce using rule 17 (expr -> expr COMP_EQU expr .)
    ,               reduce using rule 17 (expr -> expr COMP_EQU expr .)
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20

  ! +               [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]
  ! -               [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]
  ! *               [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]
  ! /               [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]
  ! COMP_EQU        [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]
  ! COMP_NEQU       [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]
  ! <               [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]
  ! COMP_LTE        [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]
  ! >               [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]
  ! COMP_GTE        [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]
  ! BOOL_AND        [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]
  ! BOOL_OR         [ reduce using rule 17 (expr -> expr COMP_EQU expr .) ]


state 43

    (9) expr -> expr - expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

    ;               reduce using rule 9 (expr -> expr - expr .)
    +               reduce using rule 9 (expr -> expr - expr .)
    -               reduce using rule 9 (expr -> expr - expr .)
    ASSIGN_ADD      reduce using rule 9 (expr -> expr - expr .)
    ASSIGN_SUB      reduce using rule 9 (expr -> expr - expr .)
    ASSIGN_MULT     reduce using rule 9 (expr -> expr - expr .)
    ASSIGN_DIV      reduce using rule 9 (expr -> expr - expr .)
    COMP_EQU        reduce using rule 9 (expr -> expr - expr .)
    COMP_NEQU       reduce using rule 9 (expr -> expr - expr .)
    <               reduce using rule 9 (expr -> expr - expr .)
    COMP_LTE        reduce using rule 9 (expr -> expr - expr .)
    >               reduce using rule 9 (expr -> expr - expr .)
    COMP_GTE        reduce using rule 9 (expr -> expr - expr .)
    BOOL_AND        reduce using rule 9 (expr -> expr - expr .)
    BOOL_OR         reduce using rule 9 (expr -> expr - expr .)
    )               reduce using rule 9 (expr -> expr - expr .)
    ,               reduce using rule 9 (expr -> expr - expr .)
    *               shift and go to state 25
    /               shift and go to state 28

  ! *               [ reduce using rule 9 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 9 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 18 ]
  ! ASSIGN_ADD      [ shift and go to state 21 ]
  ! ASSIGN_SUB      [ shift and go to state 22 ]
  ! ASSIGN_MULT     [ shift and go to state 23 ]
  ! ASSIGN_DIV      [ shift and go to state 27 ]
  ! COMP_EQU        [ shift and go to state 17 ]
  ! COMP_NEQU       [ shift and go to state 30 ]
  ! <               [ shift and go to state 14 ]
  ! COMP_LTE        [ shift and go to state 26 ]
  ! >               [ shift and go to state 29 ]
  ! COMP_GTE        [ shift and go to state 16 ]
  ! BOOL_AND        [ shift and go to state 15 ]
  ! BOOL_OR         [ shift and go to state 20 ]


state 44

    (24) expr -> expr BOOL_OR expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 24 (expr -> expr BOOL_OR expr .)
    )               reduce using rule 24 (expr -> expr BOOL_OR expr .)
    ,               reduce using rule 24 (expr -> expr BOOL_OR expr .)
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20

  ! +               [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]
  ! -               [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]
  ! *               [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]
  ! /               [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]
  ! COMP_EQU        [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]
  ! COMP_NEQU       [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]
  ! <               [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]
  ! COMP_LTE        [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]
  ! >               [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]
  ! COMP_GTE        [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]
  ! BOOL_AND        [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]
  ! BOOL_OR         [ reduce using rule 24 (expr -> expr BOOL_OR expr .) ]


state 45

    (12) expr -> expr ASSIGN_ADD expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 12 (expr -> expr ASSIGN_ADD expr .)
    )               reduce using rule 12 (expr -> expr ASSIGN_ADD expr .)
    ,               reduce using rule 12 (expr -> expr ASSIGN_ADD expr .)
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20

  ! +               [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]
  ! -               [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]
  ! *               [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]
  ! /               [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_EQU        [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_NEQU       [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]
  ! <               [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_LTE        [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]
  ! >               [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_GTE        [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]
  ! BOOL_AND        [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]
  ! BOOL_OR         [ reduce using rule 12 (expr -> expr ASSIGN_ADD expr .) ]


state 46

    (13) expr -> expr ASSIGN_SUB expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 13 (expr -> expr ASSIGN_SUB expr .)
    )               reduce using rule 13 (expr -> expr ASSIGN_SUB expr .)
    ,               reduce using rule 13 (expr -> expr ASSIGN_SUB expr .)
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20

  ! +               [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]
  ! -               [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]
  ! *               [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]
  ! /               [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_EQU        [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_NEQU       [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]
  ! <               [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_LTE        [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]
  ! >               [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_GTE        [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]
  ! BOOL_AND        [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]
  ! BOOL_OR         [ reduce using rule 13 (expr -> expr ASSIGN_SUB expr .) ]


state 47

    (14) expr -> expr ASSIGN_MULT expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 14 (expr -> expr ASSIGN_MULT expr .)
    )               reduce using rule 14 (expr -> expr ASSIGN_MULT expr .)
    ,               reduce using rule 14 (expr -> expr ASSIGN_MULT expr .)
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20

  ! +               [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]
  ! -               [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]
  ! *               [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]
  ! /               [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_EQU        [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_NEQU       [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]
  ! <               [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_LTE        [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]
  ! >               [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_GTE        [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]
  ! BOOL_AND        [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]
  ! BOOL_OR         [ reduce using rule 14 (expr -> expr ASSIGN_MULT expr .) ]


state 48

    (8) expr -> expr + expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

    ;               reduce using rule 8 (expr -> expr + expr .)
    +               reduce using rule 8 (expr -> expr + expr .)
    -               reduce using rule 8 (expr -> expr + expr .)
    ASSIGN_ADD      reduce using rule 8 (expr -> expr + expr .)
    ASSIGN_SUB      reduce using rule 8 (expr -> expr + expr .)
    ASSIGN_MULT     reduce using rule 8 (expr -> expr + expr .)
    ASSIGN_DIV      reduce using rule 8 (expr -> expr + expr .)
    COMP_EQU        reduce using rule 8 (expr -> expr + expr .)
    COMP_NEQU       reduce using rule 8 (expr -> expr + expr .)
    <               reduce using rule 8 (expr -> expr + expr .)
    COMP_LTE        reduce using rule 8 (expr -> expr + expr .)
    >               reduce using rule 8 (expr -> expr + expr .)
    COMP_GTE        reduce using rule 8 (expr -> expr + expr .)
    BOOL_AND        reduce using rule 8 (expr -> expr + expr .)
    BOOL_OR         reduce using rule 8 (expr -> expr + expr .)
    )               reduce using rule 8 (expr -> expr + expr .)
    ,               reduce using rule 8 (expr -> expr + expr .)
    *               shift and go to state 25
    /               shift and go to state 28

  ! *               [ reduce using rule 8 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 8 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 18 ]
  ! ASSIGN_ADD      [ shift and go to state 21 ]
  ! ASSIGN_SUB      [ shift and go to state 22 ]
  ! ASSIGN_MULT     [ shift and go to state 23 ]
  ! ASSIGN_DIV      [ shift and go to state 27 ]
  ! COMP_EQU        [ shift and go to state 17 ]
  ! COMP_NEQU       [ shift and go to state 30 ]
  ! <               [ shift and go to state 14 ]
  ! COMP_LTE        [ shift and go to state 26 ]
  ! >               [ shift and go to state 29 ]
  ! COMP_GTE        [ shift and go to state 16 ]
  ! BOOL_AND        [ shift and go to state 15 ]
  ! BOOL_OR         [ shift and go to state 20 ]


state 49

    (10) expr -> expr * expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

    ;               reduce using rule 10 (expr -> expr * expr .)
    +               reduce using rule 10 (expr -> expr * expr .)
    -               reduce using rule 10 (expr -> expr * expr .)
    *               reduce using rule 10 (expr -> expr * expr .)
    /               reduce using rule 10 (expr -> expr * expr .)
    ASSIGN_ADD      reduce using rule 10 (expr -> expr * expr .)
    ASSIGN_SUB      reduce using rule 10 (expr -> expr * expr .)
    ASSIGN_MULT     reduce using rule 10 (expr -> expr * expr .)
    ASSIGN_DIV      reduce using rule 10 (expr -> expr * expr .)
    COMP_EQU        reduce using rule 10 (expr -> expr * expr .)
    COMP_NEQU       reduce using rule 10 (expr -> expr * expr .)
    <               reduce using rule 10 (expr -> expr * expr .)
    COMP_LTE        reduce using rule 10 (expr -> expr * expr .)
    >               reduce using rule 10 (expr -> expr * expr .)
    COMP_GTE        reduce using rule 10 (expr -> expr * expr .)
    BOOL_AND        reduce using rule 10 (expr -> expr * expr .)
    BOOL_OR         reduce using rule 10 (expr -> expr * expr .)
    )               reduce using rule 10 (expr -> expr * expr .)
    ,               reduce using rule 10 (expr -> expr * expr .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 18 ]
  ! *               [ shift and go to state 25 ]
  ! /               [ shift and go to state 28 ]
  ! ASSIGN_ADD      [ shift and go to state 21 ]
  ! ASSIGN_SUB      [ shift and go to state 22 ]
  ! ASSIGN_MULT     [ shift and go to state 23 ]
  ! ASSIGN_DIV      [ shift and go to state 27 ]
  ! COMP_EQU        [ shift and go to state 17 ]
  ! COMP_NEQU       [ shift and go to state 30 ]
  ! <               [ shift and go to state 14 ]
  ! COMP_LTE        [ shift and go to state 26 ]
  ! >               [ shift and go to state 29 ]
  ! COMP_GTE        [ shift and go to state 16 ]
  ! BOOL_AND        [ shift and go to state 15 ]
  ! BOOL_OR         [ shift and go to state 20 ]


state 50

    (20) expr -> expr COMP_LTE expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 20 (expr -> expr COMP_LTE expr .)
    )               reduce using rule 20 (expr -> expr COMP_LTE expr .)
    ,               reduce using rule 20 (expr -> expr COMP_LTE expr .)
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20

  ! +               [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]
  ! -               [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]
  ! *               [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]
  ! /               [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]
  ! COMP_EQU        [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]
  ! COMP_NEQU       [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]
  ! <               [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]
  ! COMP_LTE        [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]
  ! >               [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]
  ! COMP_GTE        [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]
  ! BOOL_AND        [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]
  ! BOOL_OR         [ reduce using rule 20 (expr -> expr COMP_LTE expr .) ]


state 51

    (15) expr -> expr ASSIGN_DIV expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 15 (expr -> expr ASSIGN_DIV expr .)
    )               reduce using rule 15 (expr -> expr ASSIGN_DIV expr .)
    ,               reduce using rule 15 (expr -> expr ASSIGN_DIV expr .)
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20

  ! +               [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]
  ! -               [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]
  ! *               [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]
  ! /               [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_EQU        [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_NEQU       [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]
  ! <               [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_LTE        [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]
  ! >               [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_GTE        [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]
  ! BOOL_AND        [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]
  ! BOOL_OR         [ reduce using rule 15 (expr -> expr ASSIGN_DIV expr .) ]


state 52

    (11) expr -> expr / expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

    ;               reduce using rule 11 (expr -> expr / expr .)
    +               reduce using rule 11 (expr -> expr / expr .)
    -               reduce using rule 11 (expr -> expr / expr .)
    *               reduce using rule 11 (expr -> expr / expr .)
    /               reduce using rule 11 (expr -> expr / expr .)
    ASSIGN_ADD      reduce using rule 11 (expr -> expr / expr .)
    ASSIGN_SUB      reduce using rule 11 (expr -> expr / expr .)
    ASSIGN_MULT     reduce using rule 11 (expr -> expr / expr .)
    ASSIGN_DIV      reduce using rule 11 (expr -> expr / expr .)
    COMP_EQU        reduce using rule 11 (expr -> expr / expr .)
    COMP_NEQU       reduce using rule 11 (expr -> expr / expr .)
    <               reduce using rule 11 (expr -> expr / expr .)
    COMP_LTE        reduce using rule 11 (expr -> expr / expr .)
    >               reduce using rule 11 (expr -> expr / expr .)
    COMP_GTE        reduce using rule 11 (expr -> expr / expr .)
    BOOL_AND        reduce using rule 11 (expr -> expr / expr .)
    BOOL_OR         reduce using rule 11 (expr -> expr / expr .)
    )               reduce using rule 11 (expr -> expr / expr .)
    ,               reduce using rule 11 (expr -> expr / expr .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 18 ]
  ! *               [ shift and go to state 25 ]
  ! /               [ shift and go to state 28 ]
  ! ASSIGN_ADD      [ shift and go to state 21 ]
  ! ASSIGN_SUB      [ shift and go to state 22 ]
  ! ASSIGN_MULT     [ shift and go to state 23 ]
  ! ASSIGN_DIV      [ shift and go to state 27 ]
  ! COMP_EQU        [ shift and go to state 17 ]
  ! COMP_NEQU       [ shift and go to state 30 ]
  ! <               [ shift and go to state 14 ]
  ! COMP_LTE        [ shift and go to state 26 ]
  ! >               [ shift and go to state 29 ]
  ! COMP_GTE        [ shift and go to state 16 ]
  ! BOOL_AND        [ shift and go to state 15 ]
  ! BOOL_OR         [ shift and go to state 20 ]


state 53

    (21) expr -> expr > expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 21 (expr -> expr > expr .)
    )               reduce using rule 21 (expr -> expr > expr .)
    ,               reduce using rule 21 (expr -> expr > expr .)
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20

  ! +               [ reduce using rule 21 (expr -> expr > expr .) ]
  ! -               [ reduce using rule 21 (expr -> expr > expr .) ]
  ! *               [ reduce using rule 21 (expr -> expr > expr .) ]
  ! /               [ reduce using rule 21 (expr -> expr > expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 21 (expr -> expr > expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 21 (expr -> expr > expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 21 (expr -> expr > expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 21 (expr -> expr > expr .) ]
  ! COMP_EQU        [ reduce using rule 21 (expr -> expr > expr .) ]
  ! COMP_NEQU       [ reduce using rule 21 (expr -> expr > expr .) ]
  ! <               [ reduce using rule 21 (expr -> expr > expr .) ]
  ! COMP_LTE        [ reduce using rule 21 (expr -> expr > expr .) ]
  ! >               [ reduce using rule 21 (expr -> expr > expr .) ]
  ! COMP_GTE        [ reduce using rule 21 (expr -> expr > expr .) ]
  ! BOOL_AND        [ reduce using rule 21 (expr -> expr > expr .) ]
  ! BOOL_OR         [ reduce using rule 21 (expr -> expr > expr .) ]


state 54

    (18) expr -> expr COMP_NEQU expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 18 (expr -> expr COMP_NEQU expr .)
    )               reduce using rule 18 (expr -> expr COMP_NEQU expr .)
    ,               reduce using rule 18 (expr -> expr COMP_NEQU expr .)
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20

  ! +               [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]
  ! -               [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]
  ! *               [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]
  ! /               [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]
  ! COMP_EQU        [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]
  ! COMP_NEQU       [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]
  ! <               [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]
  ! COMP_LTE        [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]
  ! >               [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]
  ! COMP_GTE        [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]
  ! BOOL_AND        [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]
  ! BOOL_OR         [ reduce using rule 18 (expr -> expr COMP_NEQU expr .) ]


state 55

    (7) declaration -> TYPE ID = . expr
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    expr                           shift and go to state 61

state 56

    (28) expr -> COMMAND_RANDOM ( expr . )
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

    )               shift and go to state 62
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20


state 57

    (16) expr -> ( expr ) .

    ;               reduce using rule 16 (expr -> ( expr ) .)
    +               reduce using rule 16 (expr -> ( expr ) .)
    -               reduce using rule 16 (expr -> ( expr ) .)
    *               reduce using rule 16 (expr -> ( expr ) .)
    /               reduce using rule 16 (expr -> ( expr ) .)
    ASSIGN_ADD      reduce using rule 16 (expr -> ( expr ) .)
    ASSIGN_SUB      reduce using rule 16 (expr -> ( expr ) .)
    ASSIGN_MULT     reduce using rule 16 (expr -> ( expr ) .)
    ASSIGN_DIV      reduce using rule 16 (expr -> ( expr ) .)
    COMP_EQU        reduce using rule 16 (expr -> ( expr ) .)
    COMP_NEQU       reduce using rule 16 (expr -> ( expr ) .)
    <               reduce using rule 16 (expr -> ( expr ) .)
    COMP_LTE        reduce using rule 16 (expr -> ( expr ) .)
    >               reduce using rule 16 (expr -> ( expr ) .)
    COMP_GTE        reduce using rule 16 (expr -> ( expr ) .)
    BOOL_AND        reduce using rule 16 (expr -> ( expr ) .)
    BOOL_OR         reduce using rule 16 (expr -> ( expr ) .)
    )               reduce using rule 16 (expr -> ( expr ) .)
    ,               reduce using rule 16 (expr -> ( expr ) .)


state 58

    (26) arguments -> expr .
    (27) arguments -> expr . , arguments
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

    )               reduce using rule 26 (arguments -> expr .)
    ,               shift and go to state 63
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20


state 59

    (25) expr -> COMMAND_PRINT ( arguments . )

    )               shift and go to state 64


state 60

    (33) expr -> variable = expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

    ;               reduce using rule 33 (expr -> variable = expr .)
    ASSIGN_ADD      reduce using rule 33 (expr -> variable = expr .)
    ASSIGN_SUB      reduce using rule 33 (expr -> variable = expr .)
    ASSIGN_MULT     reduce using rule 33 (expr -> variable = expr .)
    ASSIGN_DIV      reduce using rule 33 (expr -> variable = expr .)
    COMP_EQU        reduce using rule 33 (expr -> variable = expr .)
    COMP_NEQU       reduce using rule 33 (expr -> variable = expr .)
    <               reduce using rule 33 (expr -> variable = expr .)
    COMP_LTE        reduce using rule 33 (expr -> variable = expr .)
    >               reduce using rule 33 (expr -> variable = expr .)
    COMP_GTE        reduce using rule 33 (expr -> variable = expr .)
    BOOL_AND        reduce using rule 33 (expr -> variable = expr .)
    BOOL_OR         reduce using rule 33 (expr -> variable = expr .)
    )               reduce using rule 33 (expr -> variable = expr .)
    ,               reduce using rule 33 (expr -> variable = expr .)
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28

  ! +               [ reduce using rule 33 (expr -> variable = expr .) ]
  ! -               [ reduce using rule 33 (expr -> variable = expr .) ]
  ! *               [ reduce using rule 33 (expr -> variable = expr .) ]
  ! /               [ reduce using rule 33 (expr -> variable = expr .) ]
  ! ASSIGN_ADD      [ shift and go to state 21 ]
  ! ASSIGN_SUB      [ shift and go to state 22 ]
  ! ASSIGN_MULT     [ shift and go to state 23 ]
  ! ASSIGN_DIV      [ shift and go to state 27 ]
  ! COMP_EQU        [ shift and go to state 17 ]
  ! COMP_NEQU       [ shift and go to state 30 ]
  ! <               [ shift and go to state 14 ]
  ! COMP_LTE        [ shift and go to state 26 ]
  ! >               [ shift and go to state 29 ]
  ! COMP_GTE        [ shift and go to state 16 ]
  ! BOOL_AND        [ shift and go to state 15 ]
  ! BOOL_OR         [ shift and go to state 20 ]


state 61

    (7) declaration -> TYPE ID = expr .
    (8) expr -> expr . + expr
    (9) expr -> expr . - expr
    (10) expr -> expr . * expr
    (11) expr -> expr . / expr
    (12) expr -> expr . ASSIGN_ADD expr
    (13) expr -> expr . ASSIGN_SUB expr
    (14) expr -> expr . ASSIGN_MULT expr
    (15) expr -> expr . ASSIGN_DIV expr
    (17) expr -> expr . COMP_EQU expr
    (18) expr -> expr . COMP_NEQU expr
    (19) expr -> expr . < expr
    (20) expr -> expr . COMP_LTE expr
    (21) expr -> expr . > expr
    (22) expr -> expr . COMP_GTE expr
    (23) expr -> expr . BOOL_AND expr
    (24) expr -> expr . BOOL_OR expr

    ;               reduce using rule 7 (declaration -> TYPE ID = expr .)
    +               shift and go to state 24
    -               shift and go to state 18
    *               shift and go to state 25
    /               shift and go to state 28
    ASSIGN_ADD      shift and go to state 21
    ASSIGN_SUB      shift and go to state 22
    ASSIGN_MULT     shift and go to state 23
    ASSIGN_DIV      shift and go to state 27
    COMP_EQU        shift and go to state 17
    COMP_NEQU       shift and go to state 30
    <               shift and go to state 14
    COMP_LTE        shift and go to state 26
    >               shift and go to state 29
    COMP_GTE        shift and go to state 16
    BOOL_AND        shift and go to state 15
    BOOL_OR         shift and go to state 20


state 62

    (28) expr -> COMMAND_RANDOM ( expr ) .

    ;               reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    +               reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    -               reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    *               reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    /               reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_ADD      reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_SUB      reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_MULT     reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_DIV      reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_EQU        reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_NEQU       reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    <               reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_LTE        reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    >               reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_GTE        reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    BOOL_AND        reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    BOOL_OR         reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    )               reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)
    ,               reduce using rule 28 (expr -> COMMAND_RANDOM ( expr ) .)


state 63

    (27) arguments -> expr , . arguments
    (26) arguments -> . expr
    (27) arguments -> . expr , arguments
    (8) expr -> . expr + expr
    (9) expr -> . expr - expr
    (10) expr -> . expr * expr
    (11) expr -> . expr / expr
    (12) expr -> . expr ASSIGN_ADD expr
    (13) expr -> . expr ASSIGN_SUB expr
    (14) expr -> . expr ASSIGN_MULT expr
    (15) expr -> . expr ASSIGN_DIV expr
    (16) expr -> . ( expr )
    (17) expr -> . expr COMP_EQU expr
    (18) expr -> . expr COMP_NEQU expr
    (19) expr -> . expr < expr
    (20) expr -> . expr COMP_LTE expr
    (21) expr -> . expr > expr
    (22) expr -> . expr COMP_GTE expr
    (23) expr -> . expr BOOL_AND expr
    (24) expr -> . expr BOOL_OR expr
    (25) expr -> . COMMAND_PRINT ( arguments )
    (28) expr -> . COMMAND_RANDOM ( expr )
    (29) expr -> . VAL_LITERAL
    (30) expr -> . variable
    (31) expr -> . - VAL_LITERAL
    (32) expr -> . - variable
    (33) expr -> . variable = expr
    (34) variable -> . ID

    (               shift and go to state 10
    COMMAND_PRINT   shift and go to state 11
    COMMAND_RANDOM  shift and go to state 7
    VAL_LITERAL     shift and go to state 5
    -               shift and go to state 8
    ID              shift and go to state 13

    variable                       shift and go to state 12
    arguments                      shift and go to state 65
    expr                           shift and go to state 58

state 64

    (25) expr -> COMMAND_PRINT ( arguments ) .

    ;               reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    +               reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    -               reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    *               reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    /               reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_ADD      reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_SUB      reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_MULT     reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_DIV      reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_EQU        reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_NEQU       reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    <               reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_LTE        reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    >               reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_GTE        reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    BOOL_AND        reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    BOOL_OR         reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    )               reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)
    ,               reduce using rule 25 (expr -> COMMAND_PRINT ( arguments ) .)


state 65

    (27) arguments -> expr , arguments .

    )               reduce using rule 27 (arguments -> expr , arguments .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 39 resolved as shift
WARNING: shift/reduce conflict for - in state 39 resolved as shift
WARNING: shift/reduce conflict for * in state 39 resolved as shift
WARNING: shift/reduce conflict for / in state 39 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 39 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 39 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 39 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 39 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 39 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 39 resolved as shift
WARNING: shift/reduce conflict for < in state 39 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 39 resolved as shift
WARNING: shift/reduce conflict for > in state 39 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 39 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 39 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 39 resolved as shift
WARNING: shift/reduce conflict for + in state 40 resolved as shift
WARNING: shift/reduce conflict for - in state 40 resolved as shift
WARNING: shift/reduce conflict for * in state 40 resolved as shift
WARNING: shift/reduce conflict for / in state 40 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 40 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 40 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 40 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 40 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 40 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 40 resolved as shift
WARNING: shift/reduce conflict for < in state 40 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 40 resolved as shift
WARNING: shift/reduce conflict for > in state 40 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 40 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 40 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 40 resolved as shift
WARNING: shift/reduce conflict for + in state 41 resolved as shift
WARNING: shift/reduce conflict for - in state 41 resolved as shift
WARNING: shift/reduce conflict for * in state 41 resolved as shift
WARNING: shift/reduce conflict for / in state 41 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 41 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 41 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 41 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 41 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 41 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 41 resolved as shift
WARNING: shift/reduce conflict for < in state 41 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 41 resolved as shift
WARNING: shift/reduce conflict for > in state 41 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 41 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 41 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 41 resolved as shift
WARNING: shift/reduce conflict for + in state 42 resolved as shift
WARNING: shift/reduce conflict for - in state 42 resolved as shift
WARNING: shift/reduce conflict for * in state 42 resolved as shift
WARNING: shift/reduce conflict for / in state 42 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 42 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 42 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 42 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 42 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 42 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 42 resolved as shift
WARNING: shift/reduce conflict for < in state 42 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 42 resolved as shift
WARNING: shift/reduce conflict for > in state 42 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 42 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 42 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 42 resolved as shift
WARNING: shift/reduce conflict for + in state 44 resolved as shift
WARNING: shift/reduce conflict for - in state 44 resolved as shift
WARNING: shift/reduce conflict for * in state 44 resolved as shift
WARNING: shift/reduce conflict for / in state 44 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 44 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 44 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 44 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 44 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 44 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 44 resolved as shift
WARNING: shift/reduce conflict for < in state 44 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 44 resolved as shift
WARNING: shift/reduce conflict for > in state 44 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 44 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 44 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 44 resolved as shift
WARNING: shift/reduce conflict for + in state 45 resolved as shift
WARNING: shift/reduce conflict for - in state 45 resolved as shift
WARNING: shift/reduce conflict for * in state 45 resolved as shift
WARNING: shift/reduce conflict for / in state 45 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 45 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 45 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 45 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 45 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 45 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 45 resolved as shift
WARNING: shift/reduce conflict for < in state 45 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 45 resolved as shift
WARNING: shift/reduce conflict for > in state 45 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 45 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 45 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 45 resolved as shift
WARNING: shift/reduce conflict for + in state 46 resolved as shift
WARNING: shift/reduce conflict for - in state 46 resolved as shift
WARNING: shift/reduce conflict for * in state 46 resolved as shift
WARNING: shift/reduce conflict for / in state 46 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 46 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 46 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 46 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 46 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 46 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 46 resolved as shift
WARNING: shift/reduce conflict for < in state 46 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 46 resolved as shift
WARNING: shift/reduce conflict for > in state 46 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 46 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 46 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 46 resolved as shift
WARNING: shift/reduce conflict for + in state 47 resolved as shift
WARNING: shift/reduce conflict for - in state 47 resolved as shift
WARNING: shift/reduce conflict for * in state 47 resolved as shift
WARNING: shift/reduce conflict for / in state 47 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 47 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 47 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 47 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 47 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 47 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 47 resolved as shift
WARNING: shift/reduce conflict for < in state 47 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 47 resolved as shift
WARNING: shift/reduce conflict for > in state 47 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 47 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 47 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 47 resolved as shift
WARNING: shift/reduce conflict for + in state 50 resolved as shift
WARNING: shift/reduce conflict for - in state 50 resolved as shift
WARNING: shift/reduce conflict for * in state 50 resolved as shift
WARNING: shift/reduce conflict for / in state 50 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 50 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 50 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 50 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 50 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 50 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 50 resolved as shift
WARNING: shift/reduce conflict for < in state 50 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 50 resolved as shift
WARNING: shift/reduce conflict for > in state 50 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 50 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 50 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 50 resolved as shift
WARNING: shift/reduce conflict for + in state 51 resolved as shift
WARNING: shift/reduce conflict for - in state 51 resolved as shift
WARNING: shift/reduce conflict for * in state 51 resolved as shift
WARNING: shift/reduce conflict for / in state 51 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 51 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 51 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 51 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 51 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 51 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 51 resolved as shift
WARNING: shift/reduce conflict for < in state 51 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 51 resolved as shift
WARNING: shift/reduce conflict for > in state 51 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 51 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 51 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 51 resolved as shift
WARNING: shift/reduce conflict for + in state 53 resolved as shift
WARNING: shift/reduce conflict for - in state 53 resolved as shift
WARNING: shift/reduce conflict for * in state 53 resolved as shift
WARNING: shift/reduce conflict for / in state 53 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 53 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 53 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 53 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 53 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 53 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 53 resolved as shift
WARNING: shift/reduce conflict for < in state 53 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 53 resolved as shift
WARNING: shift/reduce conflict for > in state 53 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 53 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 53 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 53 resolved as shift
WARNING: shift/reduce conflict for + in state 54 resolved as shift
WARNING: shift/reduce conflict for - in state 54 resolved as shift
WARNING: shift/reduce conflict for * in state 54 resolved as shift
WARNING: shift/reduce conflict for / in state 54 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 54 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 54 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 54 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 54 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 54 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 54 resolved as shift
WARNING: shift/reduce conflict for < in state 54 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 54 resolved as shift
WARNING: shift/reduce conflict for > in state 54 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 54 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 54 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 54 resolved as shift
