Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    WHITESPACE
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> <empty>
Rule 4     statement -> expr ;
Rule 5     statement -> declaration ;
Rule 6     statement -> block
Rule 7     statement -> if_block
Rule 8     statement -> while_loop
Rule 9     statement -> break ;
Rule 10    statement -> ;
Rule 11    block -> OPEN_BLOCK statements CLOSE_BLOCK
Rule 12    if_block -> COMMAND_IF ( expr ) statement
Rule 13    if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement
Rule 14    break -> COMMAND_BREAK
Rule 15    while_loop -> COMMAND_WHILE ( expr ) statement
Rule 16    declaration -> TYPE ID
Rule 17    declaration -> TYPE ID = expr
Rule 18    declaration -> ARRAY_TYPE ( TYPE ) ID
Rule 19    declaration -> ARRAY_TYPE ( TYPE ) ID = expr
Rule 20    declaration -> STRING_TYPE ID
Rule 21    declaration -> STRING_TYPE ID = expr
Rule 22    expr -> [ elements ]
Rule 23    expr -> [ ]
Rule 24    expr -> STRING_LITERAL
Rule 25    elements -> expr
Rule 26    elements -> elements , expr
Rule 27    expr -> expr AR_METHOD_SIZE ( )
Rule 28    expr -> expr AR_METHOD_SIZE ( expr )
Rule 29    expr -> expr . AR_METHOD_RESIZE ( arguments )
Rule 30    expr -> variable [ expr ]
Rule 31    expr -> variable [ expr ] = expr
Rule 32    expr -> expr + expr
Rule 33    expr -> expr - expr
Rule 34    expr -> expr * expr
Rule 35    expr -> expr / expr
Rule 36    expr -> expr ASSIGN_ADD expr
Rule 37    expr -> expr ASSIGN_SUB expr
Rule 38    expr -> expr ASSIGN_MULT expr
Rule 39    expr -> expr ASSIGN_DIV expr
Rule 40    expr -> ( expr )
Rule 41    expr -> expr COMP_EQU expr
Rule 42    expr -> expr COMP_NEQU expr
Rule 43    expr -> expr < expr
Rule 44    expr -> expr COMP_LTE expr
Rule 45    expr -> expr > expr
Rule 46    expr -> expr COMP_GTE expr
Rule 47    expr -> expr BOOL_AND expr
Rule 48    expr -> expr BOOL_OR expr
Rule 49    expr -> ! expr
Rule 50    expr -> COMMAND_PRINT ( arguments )
Rule 51    arguments -> expr
Rule 52    arguments -> arguments , expr
Rule 53    expr -> COMMAND_RANDOM ( expr )
Rule 54    expr -> VAL_LITERAL
Rule 55    expr -> - VAL_LITERAL
Rule 56    expr -> CHAR_LITERAL
Rule 57    expr -> variable
Rule 58    expr -> - variable
Rule 59    expr -> variable = expr
Rule 60    variable -> ID

Terminals, with rules where they appear

!                    : 49
(                    : 12 13 15 18 19 27 28 29 40 50 53
)                    : 12 13 15 18 19 27 28 29 40 50 53
*                    : 34
+                    : 32
,                    : 26 52
-                    : 33 55 58
.                    : 29
/                    : 35
;                    : 4 5 9 10
<                    : 43
=                    : 17 19 21 31 59
>                    : 45
ARRAY_TYPE           : 18 19
AR_METHOD_RESIZE     : 29
AR_METHOD_SIZE       : 27 28
ASSIGN_ADD           : 36
ASSIGN_DIV           : 39
ASSIGN_MULT          : 38
ASSIGN_SUB           : 37
BOOL_AND             : 47
BOOL_OR              : 48
CHAR_LITERAL         : 56
CLOSE_BLOCK          : 11
COMMAND_BREAK        : 14
COMMAND_ELSE         : 13
COMMAND_IF           : 12 13
COMMAND_PRINT        : 50
COMMAND_RANDOM       : 53
COMMAND_WHILE        : 15
COMMENT              : 
COMP_EQU             : 41
COMP_GTE             : 46
COMP_LTE             : 44
COMP_NEQU            : 42
ID                   : 16 17 18 19 20 21 60
OPEN_BLOCK           : 11
STRING_LITERAL       : 24
STRING_TYPE          : 20 21
TYPE                 : 16 17 18 19
VAL_LITERAL          : 54 55
WHITESPACE           : 
[                    : 22 23 30 31
]                    : 22 23 30 31
error                : 

Nonterminals, with rules where they appear

arguments            : 29 50 52
block                : 6
break                : 9
declaration          : 5
elements             : 22 26
expr                 : 4 12 13 15 17 19 21 25 26 27 28 28 29 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 51 52 53 59
if_block             : 7
program              : 0
statement            : 2 12 13 13 15
statements           : 1 2 11
variable             : 30 31 57 58 59
while_loop           : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> .

    ;               reduce using rule 3 (statements -> .)
    [               reduce using rule 3 (statements -> .)
    STRING_LITERAL  reduce using rule 3 (statements -> .)
    (               reduce using rule 3 (statements -> .)
    !               reduce using rule 3 (statements -> .)
    COMMAND_PRINT   reduce using rule 3 (statements -> .)
    COMMAND_RANDOM  reduce using rule 3 (statements -> .)
    VAL_LITERAL     reduce using rule 3 (statements -> .)
    -               reduce using rule 3 (statements -> .)
    CHAR_LITERAL    reduce using rule 3 (statements -> .)
    TYPE            reduce using rule 3 (statements -> .)
    ARRAY_TYPE      reduce using rule 3 (statements -> .)
    STRING_TYPE     reduce using rule 3 (statements -> .)
    OPEN_BLOCK      reduce using rule 3 (statements -> .)
    COMMAND_IF      reduce using rule 3 (statements -> .)
    COMMAND_WHILE   reduce using rule 3 (statements -> .)
    COMMAND_BREAK   reduce using rule 3 (statements -> .)
    ID              reduce using rule 3 (statements -> .)
    $end            reduce using rule 3 (statements -> .)

    statements                     shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . ;
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (16) declaration -> . TYPE ID
    (17) declaration -> . TYPE ID = expr
    (18) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (19) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (20) declaration -> . STRING_TYPE ID
    (21) declaration -> . STRING_TYPE ID = expr
    (11) block -> . OPEN_BLOCK statements CLOSE_BLOCK
    (12) if_block -> . COMMAND_IF ( expr ) statement
    (13) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (15) while_loop -> . COMMAND_WHILE ( expr ) statement
    (14) break -> . COMMAND_BREAK
    (60) variable -> . ID

    $end            reduce using rule 1 (program -> statements .)
    ;               shift and go to state 7
    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    TYPE            shift and go to state 6
    ARRAY_TYPE      shift and go to state 3
    STRING_TYPE     shift and go to state 5
    OPEN_BLOCK      shift and go to state 11
    COMMAND_IF      shift and go to state 4
    COMMAND_WHILE   shift and go to state 10
    COMMAND_BREAK   shift and go to state 14
    ID              shift and go to state 18

    block                          shift and go to state 19
    declaration                    shift and go to state 13
    if_block                       shift and go to state 9
    variable                       shift and go to state 8
    expr                           shift and go to state 25
    break                          shift and go to state 28
    while_loop                     shift and go to state 20
    statement                      shift and go to state 23

state 2

    (0) S' -> program .



state 3

    (18) declaration -> ARRAY_TYPE . ( TYPE ) ID
    (19) declaration -> ARRAY_TYPE . ( TYPE ) ID = expr

    (               shift and go to state 29


state 4

    (12) if_block -> COMMAND_IF . ( expr ) statement
    (13) if_block -> COMMAND_IF . ( expr ) statement COMMAND_ELSE statement

    (               shift and go to state 30


state 5

    (20) declaration -> STRING_TYPE . ID
    (21) declaration -> STRING_TYPE . ID = expr

    ID              shift and go to state 31


state 6

    (16) declaration -> TYPE . ID
    (17) declaration -> TYPE . ID = expr

    ID              shift and go to state 32


state 7

    (10) statement -> ; .

    COMMAND_ELSE    reduce using rule 10 (statement -> ; .)
    ;               reduce using rule 10 (statement -> ; .)
    [               reduce using rule 10 (statement -> ; .)
    STRING_LITERAL  reduce using rule 10 (statement -> ; .)
    (               reduce using rule 10 (statement -> ; .)
    !               reduce using rule 10 (statement -> ; .)
    COMMAND_PRINT   reduce using rule 10 (statement -> ; .)
    COMMAND_RANDOM  reduce using rule 10 (statement -> ; .)
    VAL_LITERAL     reduce using rule 10 (statement -> ; .)
    -               reduce using rule 10 (statement -> ; .)
    CHAR_LITERAL    reduce using rule 10 (statement -> ; .)
    TYPE            reduce using rule 10 (statement -> ; .)
    ARRAY_TYPE      reduce using rule 10 (statement -> ; .)
    STRING_TYPE     reduce using rule 10 (statement -> ; .)
    OPEN_BLOCK      reduce using rule 10 (statement -> ; .)
    COMMAND_IF      reduce using rule 10 (statement -> ; .)
    COMMAND_WHILE   reduce using rule 10 (statement -> ; .)
    COMMAND_BREAK   reduce using rule 10 (statement -> ; .)
    ID              reduce using rule 10 (statement -> ; .)
    $end            reduce using rule 10 (statement -> ; .)
    CLOSE_BLOCK     reduce using rule 10 (statement -> ; .)


state 8

    (30) expr -> variable . [ expr ]
    (31) expr -> variable . [ expr ] = expr
    (57) expr -> variable .
    (59) expr -> variable . = expr

    [               shift and go to state 34
    )               reduce using rule 57 (expr -> variable .)
    AR_METHOD_SIZE  reduce using rule 57 (expr -> variable .)
    .               reduce using rule 57 (expr -> variable .)
    +               reduce using rule 57 (expr -> variable .)
    -               reduce using rule 57 (expr -> variable .)
    *               reduce using rule 57 (expr -> variable .)
    /               reduce using rule 57 (expr -> variable .)
    ASSIGN_ADD      reduce using rule 57 (expr -> variable .)
    ASSIGN_SUB      reduce using rule 57 (expr -> variable .)
    ASSIGN_MULT     reduce using rule 57 (expr -> variable .)
    ASSIGN_DIV      reduce using rule 57 (expr -> variable .)
    COMP_EQU        reduce using rule 57 (expr -> variable .)
    COMP_NEQU       reduce using rule 57 (expr -> variable .)
    <               reduce using rule 57 (expr -> variable .)
    COMP_LTE        reduce using rule 57 (expr -> variable .)
    >               reduce using rule 57 (expr -> variable .)
    COMP_GTE        reduce using rule 57 (expr -> variable .)
    BOOL_AND        reduce using rule 57 (expr -> variable .)
    BOOL_OR         reduce using rule 57 (expr -> variable .)
    ,               reduce using rule 57 (expr -> variable .)
    ;               reduce using rule 57 (expr -> variable .)
    ]               reduce using rule 57 (expr -> variable .)
    =               shift and go to state 33


state 9

    (7) statement -> if_block .

    COMMAND_ELSE    reduce using rule 7 (statement -> if_block .)
    ;               reduce using rule 7 (statement -> if_block .)
    [               reduce using rule 7 (statement -> if_block .)
    STRING_LITERAL  reduce using rule 7 (statement -> if_block .)
    (               reduce using rule 7 (statement -> if_block .)
    !               reduce using rule 7 (statement -> if_block .)
    COMMAND_PRINT   reduce using rule 7 (statement -> if_block .)
    COMMAND_RANDOM  reduce using rule 7 (statement -> if_block .)
    VAL_LITERAL     reduce using rule 7 (statement -> if_block .)
    -               reduce using rule 7 (statement -> if_block .)
    CHAR_LITERAL    reduce using rule 7 (statement -> if_block .)
    TYPE            reduce using rule 7 (statement -> if_block .)
    ARRAY_TYPE      reduce using rule 7 (statement -> if_block .)
    STRING_TYPE     reduce using rule 7 (statement -> if_block .)
    OPEN_BLOCK      reduce using rule 7 (statement -> if_block .)
    COMMAND_IF      reduce using rule 7 (statement -> if_block .)
    COMMAND_WHILE   reduce using rule 7 (statement -> if_block .)
    COMMAND_BREAK   reduce using rule 7 (statement -> if_block .)
    ID              reduce using rule 7 (statement -> if_block .)
    $end            reduce using rule 7 (statement -> if_block .)
    CLOSE_BLOCK     reduce using rule 7 (statement -> if_block .)


state 10

    (15) while_loop -> COMMAND_WHILE . ( expr ) statement

    (               shift and go to state 35


state 11

    (11) block -> OPEN_BLOCK . statements CLOSE_BLOCK
    (2) statements -> . statements statement
    (3) statements -> .

    CLOSE_BLOCK     reduce using rule 3 (statements -> .)
    ;               reduce using rule 3 (statements -> .)
    [               reduce using rule 3 (statements -> .)
    STRING_LITERAL  reduce using rule 3 (statements -> .)
    (               reduce using rule 3 (statements -> .)
    !               reduce using rule 3 (statements -> .)
    COMMAND_PRINT   reduce using rule 3 (statements -> .)
    COMMAND_RANDOM  reduce using rule 3 (statements -> .)
    VAL_LITERAL     reduce using rule 3 (statements -> .)
    -               reduce using rule 3 (statements -> .)
    CHAR_LITERAL    reduce using rule 3 (statements -> .)
    TYPE            reduce using rule 3 (statements -> .)
    ARRAY_TYPE      reduce using rule 3 (statements -> .)
    STRING_TYPE     reduce using rule 3 (statements -> .)
    OPEN_BLOCK      reduce using rule 3 (statements -> .)
    COMMAND_IF      reduce using rule 3 (statements -> .)
    COMMAND_WHILE   reduce using rule 3 (statements -> .)
    COMMAND_BREAK   reduce using rule 3 (statements -> .)
    ID              reduce using rule 3 (statements -> .)

    statements                     shift and go to state 36

state 12

    (54) expr -> VAL_LITERAL .

    )               reduce using rule 54 (expr -> VAL_LITERAL .)
    AR_METHOD_SIZE  reduce using rule 54 (expr -> VAL_LITERAL .)
    .               reduce using rule 54 (expr -> VAL_LITERAL .)
    +               reduce using rule 54 (expr -> VAL_LITERAL .)
    -               reduce using rule 54 (expr -> VAL_LITERAL .)
    *               reduce using rule 54 (expr -> VAL_LITERAL .)
    /               reduce using rule 54 (expr -> VAL_LITERAL .)
    ASSIGN_ADD      reduce using rule 54 (expr -> VAL_LITERAL .)
    ASSIGN_SUB      reduce using rule 54 (expr -> VAL_LITERAL .)
    ASSIGN_MULT     reduce using rule 54 (expr -> VAL_LITERAL .)
    ASSIGN_DIV      reduce using rule 54 (expr -> VAL_LITERAL .)
    COMP_EQU        reduce using rule 54 (expr -> VAL_LITERAL .)
    COMP_NEQU       reduce using rule 54 (expr -> VAL_LITERAL .)
    <               reduce using rule 54 (expr -> VAL_LITERAL .)
    COMP_LTE        reduce using rule 54 (expr -> VAL_LITERAL .)
    >               reduce using rule 54 (expr -> VAL_LITERAL .)
    COMP_GTE        reduce using rule 54 (expr -> VAL_LITERAL .)
    BOOL_AND        reduce using rule 54 (expr -> VAL_LITERAL .)
    BOOL_OR         reduce using rule 54 (expr -> VAL_LITERAL .)
    ,               reduce using rule 54 (expr -> VAL_LITERAL .)
    ;               reduce using rule 54 (expr -> VAL_LITERAL .)
    ]               reduce using rule 54 (expr -> VAL_LITERAL .)


state 13

    (5) statement -> declaration . ;

    ;               shift and go to state 37


state 14

    (14) break -> COMMAND_BREAK .

    ;               reduce using rule 14 (break -> COMMAND_BREAK .)


state 15

    (55) expr -> - . VAL_LITERAL
    (58) expr -> - . variable
    (60) variable -> . ID

    VAL_LITERAL     shift and go to state 39
    ID              shift and go to state 18

    variable                       shift and go to state 38

state 16

    (22) expr -> [ . elements ]
    (23) expr -> [ . ]
    (25) elements -> . expr
    (26) elements -> . elements , expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    ]               shift and go to state 41
    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    elements                       shift and go to state 42
    variable                       shift and go to state 8
    expr                           shift and go to state 40

state 17

    (49) expr -> ! . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 43

state 18

    (60) variable -> ID .

    [               reduce using rule 60 (variable -> ID .)
    =               reduce using rule 60 (variable -> ID .)
    AR_METHOD_SIZE  reduce using rule 60 (variable -> ID .)
    .               reduce using rule 60 (variable -> ID .)
    +               reduce using rule 60 (variable -> ID .)
    -               reduce using rule 60 (variable -> ID .)
    *               reduce using rule 60 (variable -> ID .)
    /               reduce using rule 60 (variable -> ID .)
    ASSIGN_ADD      reduce using rule 60 (variable -> ID .)
    ASSIGN_SUB      reduce using rule 60 (variable -> ID .)
    ASSIGN_MULT     reduce using rule 60 (variable -> ID .)
    ASSIGN_DIV      reduce using rule 60 (variable -> ID .)
    COMP_EQU        reduce using rule 60 (variable -> ID .)
    COMP_NEQU       reduce using rule 60 (variable -> ID .)
    <               reduce using rule 60 (variable -> ID .)
    COMP_LTE        reduce using rule 60 (variable -> ID .)
    >               reduce using rule 60 (variable -> ID .)
    COMP_GTE        reduce using rule 60 (variable -> ID .)
    BOOL_AND        reduce using rule 60 (variable -> ID .)
    BOOL_OR         reduce using rule 60 (variable -> ID .)
    ;               reduce using rule 60 (variable -> ID .)
    ]               reduce using rule 60 (variable -> ID .)
    ,               reduce using rule 60 (variable -> ID .)
    )               reduce using rule 60 (variable -> ID .)


state 19

    (6) statement -> block .

    COMMAND_ELSE    reduce using rule 6 (statement -> block .)
    ;               reduce using rule 6 (statement -> block .)
    [               reduce using rule 6 (statement -> block .)
    STRING_LITERAL  reduce using rule 6 (statement -> block .)
    (               reduce using rule 6 (statement -> block .)
    !               reduce using rule 6 (statement -> block .)
    COMMAND_PRINT   reduce using rule 6 (statement -> block .)
    COMMAND_RANDOM  reduce using rule 6 (statement -> block .)
    VAL_LITERAL     reduce using rule 6 (statement -> block .)
    -               reduce using rule 6 (statement -> block .)
    CHAR_LITERAL    reduce using rule 6 (statement -> block .)
    TYPE            reduce using rule 6 (statement -> block .)
    ARRAY_TYPE      reduce using rule 6 (statement -> block .)
    STRING_TYPE     reduce using rule 6 (statement -> block .)
    OPEN_BLOCK      reduce using rule 6 (statement -> block .)
    COMMAND_IF      reduce using rule 6 (statement -> block .)
    COMMAND_WHILE   reduce using rule 6 (statement -> block .)
    COMMAND_BREAK   reduce using rule 6 (statement -> block .)
    ID              reduce using rule 6 (statement -> block .)
    $end            reduce using rule 6 (statement -> block .)
    CLOSE_BLOCK     reduce using rule 6 (statement -> block .)


state 20

    (8) statement -> while_loop .

    COMMAND_ELSE    reduce using rule 8 (statement -> while_loop .)
    ;               reduce using rule 8 (statement -> while_loop .)
    [               reduce using rule 8 (statement -> while_loop .)
    STRING_LITERAL  reduce using rule 8 (statement -> while_loop .)
    (               reduce using rule 8 (statement -> while_loop .)
    !               reduce using rule 8 (statement -> while_loop .)
    COMMAND_PRINT   reduce using rule 8 (statement -> while_loop .)
    COMMAND_RANDOM  reduce using rule 8 (statement -> while_loop .)
    VAL_LITERAL     reduce using rule 8 (statement -> while_loop .)
    -               reduce using rule 8 (statement -> while_loop .)
    CHAR_LITERAL    reduce using rule 8 (statement -> while_loop .)
    TYPE            reduce using rule 8 (statement -> while_loop .)
    ARRAY_TYPE      reduce using rule 8 (statement -> while_loop .)
    STRING_TYPE     reduce using rule 8 (statement -> while_loop .)
    OPEN_BLOCK      reduce using rule 8 (statement -> while_loop .)
    COMMAND_IF      reduce using rule 8 (statement -> while_loop .)
    COMMAND_WHILE   reduce using rule 8 (statement -> while_loop .)
    COMMAND_BREAK   reduce using rule 8 (statement -> while_loop .)
    ID              reduce using rule 8 (statement -> while_loop .)
    $end            reduce using rule 8 (statement -> while_loop .)
    CLOSE_BLOCK     reduce using rule 8 (statement -> while_loop .)


state 21

    (50) expr -> COMMAND_PRINT . ( arguments )

    (               shift and go to state 44


state 22

    (53) expr -> COMMAND_RANDOM . ( expr )

    (               shift and go to state 45


state 23

    (2) statements -> statements statement .

    ;               reduce using rule 2 (statements -> statements statement .)
    [               reduce using rule 2 (statements -> statements statement .)
    STRING_LITERAL  reduce using rule 2 (statements -> statements statement .)
    (               reduce using rule 2 (statements -> statements statement .)
    !               reduce using rule 2 (statements -> statements statement .)
    COMMAND_PRINT   reduce using rule 2 (statements -> statements statement .)
    COMMAND_RANDOM  reduce using rule 2 (statements -> statements statement .)
    VAL_LITERAL     reduce using rule 2 (statements -> statements statement .)
    -               reduce using rule 2 (statements -> statements statement .)
    CHAR_LITERAL    reduce using rule 2 (statements -> statements statement .)
    TYPE            reduce using rule 2 (statements -> statements statement .)
    ARRAY_TYPE      reduce using rule 2 (statements -> statements statement .)
    STRING_TYPE     reduce using rule 2 (statements -> statements statement .)
    OPEN_BLOCK      reduce using rule 2 (statements -> statements statement .)
    COMMAND_IF      reduce using rule 2 (statements -> statements statement .)
    COMMAND_WHILE   reduce using rule 2 (statements -> statements statement .)
    COMMAND_BREAK   reduce using rule 2 (statements -> statements statement .)
    ID              reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    CLOSE_BLOCK     reduce using rule 2 (statements -> statements statement .)


state 24

    (40) expr -> ( . expr )
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 46

state 25

    (4) statement -> expr . ;
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    ;               shift and go to state 63
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56


state 26

    (24) expr -> STRING_LITERAL .

    )               reduce using rule 24 (expr -> STRING_LITERAL .)
    AR_METHOD_SIZE  reduce using rule 24 (expr -> STRING_LITERAL .)
    .               reduce using rule 24 (expr -> STRING_LITERAL .)
    +               reduce using rule 24 (expr -> STRING_LITERAL .)
    -               reduce using rule 24 (expr -> STRING_LITERAL .)
    *               reduce using rule 24 (expr -> STRING_LITERAL .)
    /               reduce using rule 24 (expr -> STRING_LITERAL .)
    ASSIGN_ADD      reduce using rule 24 (expr -> STRING_LITERAL .)
    ASSIGN_SUB      reduce using rule 24 (expr -> STRING_LITERAL .)
    ASSIGN_MULT     reduce using rule 24 (expr -> STRING_LITERAL .)
    ASSIGN_DIV      reduce using rule 24 (expr -> STRING_LITERAL .)
    COMP_EQU        reduce using rule 24 (expr -> STRING_LITERAL .)
    COMP_NEQU       reduce using rule 24 (expr -> STRING_LITERAL .)
    <               reduce using rule 24 (expr -> STRING_LITERAL .)
    COMP_LTE        reduce using rule 24 (expr -> STRING_LITERAL .)
    >               reduce using rule 24 (expr -> STRING_LITERAL .)
    COMP_GTE        reduce using rule 24 (expr -> STRING_LITERAL .)
    BOOL_AND        reduce using rule 24 (expr -> STRING_LITERAL .)
    BOOL_OR         reduce using rule 24 (expr -> STRING_LITERAL .)
    ,               reduce using rule 24 (expr -> STRING_LITERAL .)
    ;               reduce using rule 24 (expr -> STRING_LITERAL .)
    ]               reduce using rule 24 (expr -> STRING_LITERAL .)


state 27

    (56) expr -> CHAR_LITERAL .

    )               reduce using rule 56 (expr -> CHAR_LITERAL .)
    AR_METHOD_SIZE  reduce using rule 56 (expr -> CHAR_LITERAL .)
    .               reduce using rule 56 (expr -> CHAR_LITERAL .)
    +               reduce using rule 56 (expr -> CHAR_LITERAL .)
    -               reduce using rule 56 (expr -> CHAR_LITERAL .)
    *               reduce using rule 56 (expr -> CHAR_LITERAL .)
    /               reduce using rule 56 (expr -> CHAR_LITERAL .)
    ASSIGN_ADD      reduce using rule 56 (expr -> CHAR_LITERAL .)
    ASSIGN_SUB      reduce using rule 56 (expr -> CHAR_LITERAL .)
    ASSIGN_MULT     reduce using rule 56 (expr -> CHAR_LITERAL .)
    ASSIGN_DIV      reduce using rule 56 (expr -> CHAR_LITERAL .)
    COMP_EQU        reduce using rule 56 (expr -> CHAR_LITERAL .)
    COMP_NEQU       reduce using rule 56 (expr -> CHAR_LITERAL .)
    <               reduce using rule 56 (expr -> CHAR_LITERAL .)
    COMP_LTE        reduce using rule 56 (expr -> CHAR_LITERAL .)
    >               reduce using rule 56 (expr -> CHAR_LITERAL .)
    COMP_GTE        reduce using rule 56 (expr -> CHAR_LITERAL .)
    BOOL_AND        reduce using rule 56 (expr -> CHAR_LITERAL .)
    BOOL_OR         reduce using rule 56 (expr -> CHAR_LITERAL .)
    ,               reduce using rule 56 (expr -> CHAR_LITERAL .)
    ;               reduce using rule 56 (expr -> CHAR_LITERAL .)
    ]               reduce using rule 56 (expr -> CHAR_LITERAL .)


state 28

    (9) statement -> break . ;

    ;               shift and go to state 66


state 29

    (18) declaration -> ARRAY_TYPE ( . TYPE ) ID
    (19) declaration -> ARRAY_TYPE ( . TYPE ) ID = expr

    TYPE            shift and go to state 67


state 30

    (12) if_block -> COMMAND_IF ( . expr ) statement
    (13) if_block -> COMMAND_IF ( . expr ) statement COMMAND_ELSE statement
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    expr                           shift and go to state 68
    variable                       shift and go to state 8

state 31

    (20) declaration -> STRING_TYPE ID .
    (21) declaration -> STRING_TYPE ID . = expr

    ;               reduce using rule 20 (declaration -> STRING_TYPE ID .)
    =               shift and go to state 69


state 32

    (16) declaration -> TYPE ID .
    (17) declaration -> TYPE ID . = expr

    ;               reduce using rule 16 (declaration -> TYPE ID .)
    =               shift and go to state 70


state 33

    (59) expr -> variable = . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 71

state 34

    (30) expr -> variable [ . expr ]
    (31) expr -> variable [ . expr ] = expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 72

state 35

    (15) while_loop -> COMMAND_WHILE ( . expr ) statement
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    expr                           shift and go to state 73
    variable                       shift and go to state 8

state 36

    (11) block -> OPEN_BLOCK statements . CLOSE_BLOCK
    (2) statements -> statements . statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . ;
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (16) declaration -> . TYPE ID
    (17) declaration -> . TYPE ID = expr
    (18) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (19) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (20) declaration -> . STRING_TYPE ID
    (21) declaration -> . STRING_TYPE ID = expr
    (11) block -> . OPEN_BLOCK statements CLOSE_BLOCK
    (12) if_block -> . COMMAND_IF ( expr ) statement
    (13) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (15) while_loop -> . COMMAND_WHILE ( expr ) statement
    (14) break -> . COMMAND_BREAK
    (60) variable -> . ID

    CLOSE_BLOCK     shift and go to state 74
    ;               shift and go to state 7
    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    TYPE            shift and go to state 6
    ARRAY_TYPE      shift and go to state 3
    STRING_TYPE     shift and go to state 5
    OPEN_BLOCK      shift and go to state 11
    COMMAND_IF      shift and go to state 4
    COMMAND_WHILE   shift and go to state 10
    COMMAND_BREAK   shift and go to state 14
    ID              shift and go to state 18

    block                          shift and go to state 19
    declaration                    shift and go to state 13
    if_block                       shift and go to state 9
    variable                       shift and go to state 8
    expr                           shift and go to state 25
    break                          shift and go to state 28
    while_loop                     shift and go to state 20
    statement                      shift and go to state 23

state 37

    (5) statement -> declaration ; .

    COMMAND_ELSE    reduce using rule 5 (statement -> declaration ; .)
    ;               reduce using rule 5 (statement -> declaration ; .)
    [               reduce using rule 5 (statement -> declaration ; .)
    STRING_LITERAL  reduce using rule 5 (statement -> declaration ; .)
    (               reduce using rule 5 (statement -> declaration ; .)
    !               reduce using rule 5 (statement -> declaration ; .)
    COMMAND_PRINT   reduce using rule 5 (statement -> declaration ; .)
    COMMAND_RANDOM  reduce using rule 5 (statement -> declaration ; .)
    VAL_LITERAL     reduce using rule 5 (statement -> declaration ; .)
    -               reduce using rule 5 (statement -> declaration ; .)
    CHAR_LITERAL    reduce using rule 5 (statement -> declaration ; .)
    TYPE            reduce using rule 5 (statement -> declaration ; .)
    ARRAY_TYPE      reduce using rule 5 (statement -> declaration ; .)
    STRING_TYPE     reduce using rule 5 (statement -> declaration ; .)
    OPEN_BLOCK      reduce using rule 5 (statement -> declaration ; .)
    COMMAND_IF      reduce using rule 5 (statement -> declaration ; .)
    COMMAND_WHILE   reduce using rule 5 (statement -> declaration ; .)
    COMMAND_BREAK   reduce using rule 5 (statement -> declaration ; .)
    ID              reduce using rule 5 (statement -> declaration ; .)
    $end            reduce using rule 5 (statement -> declaration ; .)
    CLOSE_BLOCK     reduce using rule 5 (statement -> declaration ; .)


state 38

    (58) expr -> - variable .

    )               reduce using rule 58 (expr -> - variable .)
    AR_METHOD_SIZE  reduce using rule 58 (expr -> - variable .)
    .               reduce using rule 58 (expr -> - variable .)
    +               reduce using rule 58 (expr -> - variable .)
    -               reduce using rule 58 (expr -> - variable .)
    *               reduce using rule 58 (expr -> - variable .)
    /               reduce using rule 58 (expr -> - variable .)
    ASSIGN_ADD      reduce using rule 58 (expr -> - variable .)
    ASSIGN_SUB      reduce using rule 58 (expr -> - variable .)
    ASSIGN_MULT     reduce using rule 58 (expr -> - variable .)
    ASSIGN_DIV      reduce using rule 58 (expr -> - variable .)
    COMP_EQU        reduce using rule 58 (expr -> - variable .)
    COMP_NEQU       reduce using rule 58 (expr -> - variable .)
    <               reduce using rule 58 (expr -> - variable .)
    COMP_LTE        reduce using rule 58 (expr -> - variable .)
    >               reduce using rule 58 (expr -> - variable .)
    COMP_GTE        reduce using rule 58 (expr -> - variable .)
    BOOL_AND        reduce using rule 58 (expr -> - variable .)
    BOOL_OR         reduce using rule 58 (expr -> - variable .)
    ,               reduce using rule 58 (expr -> - variable .)
    ;               reduce using rule 58 (expr -> - variable .)
    ]               reduce using rule 58 (expr -> - variable .)


state 39

    (55) expr -> - VAL_LITERAL .

    )               reduce using rule 55 (expr -> - VAL_LITERAL .)
    AR_METHOD_SIZE  reduce using rule 55 (expr -> - VAL_LITERAL .)
    .               reduce using rule 55 (expr -> - VAL_LITERAL .)
    +               reduce using rule 55 (expr -> - VAL_LITERAL .)
    -               reduce using rule 55 (expr -> - VAL_LITERAL .)
    *               reduce using rule 55 (expr -> - VAL_LITERAL .)
    /               reduce using rule 55 (expr -> - VAL_LITERAL .)
    ASSIGN_ADD      reduce using rule 55 (expr -> - VAL_LITERAL .)
    ASSIGN_SUB      reduce using rule 55 (expr -> - VAL_LITERAL .)
    ASSIGN_MULT     reduce using rule 55 (expr -> - VAL_LITERAL .)
    ASSIGN_DIV      reduce using rule 55 (expr -> - VAL_LITERAL .)
    COMP_EQU        reduce using rule 55 (expr -> - VAL_LITERAL .)
    COMP_NEQU       reduce using rule 55 (expr -> - VAL_LITERAL .)
    <               reduce using rule 55 (expr -> - VAL_LITERAL .)
    COMP_LTE        reduce using rule 55 (expr -> - VAL_LITERAL .)
    >               reduce using rule 55 (expr -> - VAL_LITERAL .)
    COMP_GTE        reduce using rule 55 (expr -> - VAL_LITERAL .)
    BOOL_AND        reduce using rule 55 (expr -> - VAL_LITERAL .)
    BOOL_OR         reduce using rule 55 (expr -> - VAL_LITERAL .)
    ,               reduce using rule 55 (expr -> - VAL_LITERAL .)
    ;               reduce using rule 55 (expr -> - VAL_LITERAL .)
    ]               reduce using rule 55 (expr -> - VAL_LITERAL .)


state 40

    (25) elements -> expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    ]               reduce using rule 25 (elements -> expr .)
    ,               reduce using rule 25 (elements -> expr .)
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56


state 41

    (23) expr -> [ ] .

    )               reduce using rule 23 (expr -> [ ] .)
    AR_METHOD_SIZE  reduce using rule 23 (expr -> [ ] .)
    .               reduce using rule 23 (expr -> [ ] .)
    +               reduce using rule 23 (expr -> [ ] .)
    -               reduce using rule 23 (expr -> [ ] .)
    *               reduce using rule 23 (expr -> [ ] .)
    /               reduce using rule 23 (expr -> [ ] .)
    ASSIGN_ADD      reduce using rule 23 (expr -> [ ] .)
    ASSIGN_SUB      reduce using rule 23 (expr -> [ ] .)
    ASSIGN_MULT     reduce using rule 23 (expr -> [ ] .)
    ASSIGN_DIV      reduce using rule 23 (expr -> [ ] .)
    COMP_EQU        reduce using rule 23 (expr -> [ ] .)
    COMP_NEQU       reduce using rule 23 (expr -> [ ] .)
    <               reduce using rule 23 (expr -> [ ] .)
    COMP_LTE        reduce using rule 23 (expr -> [ ] .)
    >               reduce using rule 23 (expr -> [ ] .)
    COMP_GTE        reduce using rule 23 (expr -> [ ] .)
    BOOL_AND        reduce using rule 23 (expr -> [ ] .)
    BOOL_OR         reduce using rule 23 (expr -> [ ] .)
    ,               reduce using rule 23 (expr -> [ ] .)
    ;               reduce using rule 23 (expr -> [ ] .)
    ]               reduce using rule 23 (expr -> [ ] .)


state 42

    (22) expr -> [ elements . ]
    (26) elements -> elements . , expr

    ]               shift and go to state 76
    ,               shift and go to state 75


state 43

    (49) expr -> ! expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 49 (expr -> ! expr .)
    .               reduce using rule 49 (expr -> ! expr .)
    +               reduce using rule 49 (expr -> ! expr .)
    -               reduce using rule 49 (expr -> ! expr .)
    *               reduce using rule 49 (expr -> ! expr .)
    /               reduce using rule 49 (expr -> ! expr .)
    ASSIGN_ADD      reduce using rule 49 (expr -> ! expr .)
    ASSIGN_SUB      reduce using rule 49 (expr -> ! expr .)
    ASSIGN_MULT     reduce using rule 49 (expr -> ! expr .)
    ASSIGN_DIV      reduce using rule 49 (expr -> ! expr .)
    COMP_EQU        reduce using rule 49 (expr -> ! expr .)
    COMP_NEQU       reduce using rule 49 (expr -> ! expr .)
    <               reduce using rule 49 (expr -> ! expr .)
    COMP_LTE        reduce using rule 49 (expr -> ! expr .)
    >               reduce using rule 49 (expr -> ! expr .)
    COMP_GTE        reduce using rule 49 (expr -> ! expr .)
    BOOL_AND        reduce using rule 49 (expr -> ! expr .)
    BOOL_OR         reduce using rule 49 (expr -> ! expr .)
    ,               reduce using rule 49 (expr -> ! expr .)
    ;               reduce using rule 49 (expr -> ! expr .)
    ]               reduce using rule 49 (expr -> ! expr .)
    AR_METHOD_SIZE  shift and go to state 57

  ! AR_METHOD_SIZE  [ reduce using rule 49 (expr -> ! expr .) ]
  ! .               [ shift and go to state 64 ]
  ! +               [ shift and go to state 51 ]
  ! -               [ shift and go to state 48 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 52 ]
  ! ASSIGN_ADD      [ shift and go to state 65 ]
  ! ASSIGN_SUB      [ shift and go to state 62 ]
  ! ASSIGN_MULT     [ shift and go to state 59 ]
  ! ASSIGN_DIV      [ shift and go to state 60 ]
  ! COMP_EQU        [ shift and go to state 58 ]
  ! COMP_NEQU       [ shift and go to state 53 ]
  ! <               [ shift and go to state 47 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 54 ]
  ! COMP_GTE        [ shift and go to state 50 ]
  ! BOOL_AND        [ shift and go to state 55 ]
  ! BOOL_OR         [ shift and go to state 56 ]


state 44

    (50) expr -> COMMAND_PRINT ( . arguments )
    (51) arguments -> . expr
    (52) arguments -> . arguments , expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    arguments                      shift and go to state 78
    variable                       shift and go to state 8
    expr                           shift and go to state 77

state 45

    (53) expr -> COMMAND_RANDOM ( . expr )
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 79

state 46

    (40) expr -> ( expr . )
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               shift and go to state 80
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56


state 47

    (43) expr -> expr < . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 81

state 48

    (33) expr -> expr - . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 82

state 49

    (44) expr -> expr COMP_LTE . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 83

state 50

    (46) expr -> expr COMP_GTE . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 84

state 51

    (32) expr -> expr + . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 85

state 52

    (35) expr -> expr / . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 86

state 53

    (42) expr -> expr COMP_NEQU . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 87

state 54

    (45) expr -> expr > . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 88

state 55

    (47) expr -> expr BOOL_AND . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 89

state 56

    (48) expr -> expr BOOL_OR . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 90

state 57

    (27) expr -> expr AR_METHOD_SIZE . ( )
    (28) expr -> expr AR_METHOD_SIZE . ( expr )

    (               shift and go to state 91


state 58

    (41) expr -> expr COMP_EQU . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 92

state 59

    (38) expr -> expr ASSIGN_MULT . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 93

state 60

    (39) expr -> expr ASSIGN_DIV . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 94

state 61

    (34) expr -> expr * . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 95

state 62

    (37) expr -> expr ASSIGN_SUB . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 96

state 63

    (4) statement -> expr ; .

    COMMAND_ELSE    reduce using rule 4 (statement -> expr ; .)
    ;               reduce using rule 4 (statement -> expr ; .)
    [               reduce using rule 4 (statement -> expr ; .)
    STRING_LITERAL  reduce using rule 4 (statement -> expr ; .)
    (               reduce using rule 4 (statement -> expr ; .)
    !               reduce using rule 4 (statement -> expr ; .)
    COMMAND_PRINT   reduce using rule 4 (statement -> expr ; .)
    COMMAND_RANDOM  reduce using rule 4 (statement -> expr ; .)
    VAL_LITERAL     reduce using rule 4 (statement -> expr ; .)
    -               reduce using rule 4 (statement -> expr ; .)
    CHAR_LITERAL    reduce using rule 4 (statement -> expr ; .)
    TYPE            reduce using rule 4 (statement -> expr ; .)
    ARRAY_TYPE      reduce using rule 4 (statement -> expr ; .)
    STRING_TYPE     reduce using rule 4 (statement -> expr ; .)
    OPEN_BLOCK      reduce using rule 4 (statement -> expr ; .)
    COMMAND_IF      reduce using rule 4 (statement -> expr ; .)
    COMMAND_WHILE   reduce using rule 4 (statement -> expr ; .)
    COMMAND_BREAK   reduce using rule 4 (statement -> expr ; .)
    ID              reduce using rule 4 (statement -> expr ; .)
    $end            reduce using rule 4 (statement -> expr ; .)
    CLOSE_BLOCK     reduce using rule 4 (statement -> expr ; .)


state 64

    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )

    AR_METHOD_RESIZE shift and go to state 97


state 65

    (36) expr -> expr ASSIGN_ADD . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 98

state 66

    (9) statement -> break ; .

    COMMAND_ELSE    reduce using rule 9 (statement -> break ; .)
    ;               reduce using rule 9 (statement -> break ; .)
    [               reduce using rule 9 (statement -> break ; .)
    STRING_LITERAL  reduce using rule 9 (statement -> break ; .)
    (               reduce using rule 9 (statement -> break ; .)
    !               reduce using rule 9 (statement -> break ; .)
    COMMAND_PRINT   reduce using rule 9 (statement -> break ; .)
    COMMAND_RANDOM  reduce using rule 9 (statement -> break ; .)
    VAL_LITERAL     reduce using rule 9 (statement -> break ; .)
    -               reduce using rule 9 (statement -> break ; .)
    CHAR_LITERAL    reduce using rule 9 (statement -> break ; .)
    TYPE            reduce using rule 9 (statement -> break ; .)
    ARRAY_TYPE      reduce using rule 9 (statement -> break ; .)
    STRING_TYPE     reduce using rule 9 (statement -> break ; .)
    OPEN_BLOCK      reduce using rule 9 (statement -> break ; .)
    COMMAND_IF      reduce using rule 9 (statement -> break ; .)
    COMMAND_WHILE   reduce using rule 9 (statement -> break ; .)
    COMMAND_BREAK   reduce using rule 9 (statement -> break ; .)
    ID              reduce using rule 9 (statement -> break ; .)
    $end            reduce using rule 9 (statement -> break ; .)
    CLOSE_BLOCK     reduce using rule 9 (statement -> break ; .)


state 67

    (18) declaration -> ARRAY_TYPE ( TYPE . ) ID
    (19) declaration -> ARRAY_TYPE ( TYPE . ) ID = expr

    )               shift and go to state 99


state 68

    (12) if_block -> COMMAND_IF ( expr . ) statement
    (13) if_block -> COMMAND_IF ( expr . ) statement COMMAND_ELSE statement
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               shift and go to state 100
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56


state 69

    (21) declaration -> STRING_TYPE ID = . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 101

state 70

    (17) declaration -> TYPE ID = . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 102

state 71

    (59) expr -> variable = expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 59 (expr -> variable = expr .)
    .               reduce using rule 59 (expr -> variable = expr .)
    ASSIGN_ADD      reduce using rule 59 (expr -> variable = expr .)
    ASSIGN_SUB      reduce using rule 59 (expr -> variable = expr .)
    ASSIGN_MULT     reduce using rule 59 (expr -> variable = expr .)
    ASSIGN_DIV      reduce using rule 59 (expr -> variable = expr .)
    ,               reduce using rule 59 (expr -> variable = expr .)
    ;               reduce using rule 59 (expr -> variable = expr .)
    ]               reduce using rule 59 (expr -> variable = expr .)
    AR_METHOD_SIZE  shift and go to state 57
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56

  ! AR_METHOD_SIZE  [ reduce using rule 59 (expr -> variable = expr .) ]
  ! +               [ reduce using rule 59 (expr -> variable = expr .) ]
  ! -               [ reduce using rule 59 (expr -> variable = expr .) ]
  ! *               [ reduce using rule 59 (expr -> variable = expr .) ]
  ! /               [ reduce using rule 59 (expr -> variable = expr .) ]
  ! COMP_EQU        [ reduce using rule 59 (expr -> variable = expr .) ]
  ! COMP_NEQU       [ reduce using rule 59 (expr -> variable = expr .) ]
  ! <               [ reduce using rule 59 (expr -> variable = expr .) ]
  ! COMP_LTE        [ reduce using rule 59 (expr -> variable = expr .) ]
  ! >               [ reduce using rule 59 (expr -> variable = expr .) ]
  ! COMP_GTE        [ reduce using rule 59 (expr -> variable = expr .) ]
  ! BOOL_AND        [ reduce using rule 59 (expr -> variable = expr .) ]
  ! BOOL_OR         [ reduce using rule 59 (expr -> variable = expr .) ]
  ! .               [ shift and go to state 64 ]
  ! ASSIGN_ADD      [ shift and go to state 65 ]
  ! ASSIGN_SUB      [ shift and go to state 62 ]
  ! ASSIGN_MULT     [ shift and go to state 59 ]
  ! ASSIGN_DIV      [ shift and go to state 60 ]


state 72

    (30) expr -> variable [ expr . ]
    (31) expr -> variable [ expr . ] = expr
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    ]               shift and go to state 103
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56


state 73

    (15) while_loop -> COMMAND_WHILE ( expr . ) statement
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               shift and go to state 104
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56


state 74

    (11) block -> OPEN_BLOCK statements CLOSE_BLOCK .

    COMMAND_ELSE    reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    ;               reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    [               reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    STRING_LITERAL  reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    (               reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    !               reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    COMMAND_PRINT   reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    COMMAND_RANDOM  reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    VAL_LITERAL     reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    -               reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    CHAR_LITERAL    reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    TYPE            reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    ARRAY_TYPE      reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    STRING_TYPE     reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    OPEN_BLOCK      reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    COMMAND_IF      reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    COMMAND_WHILE   reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    COMMAND_BREAK   reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    ID              reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    $end            reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)
    CLOSE_BLOCK     reduce using rule 11 (block -> OPEN_BLOCK statements CLOSE_BLOCK .)


state 75

    (26) elements -> elements , . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 105

state 76

    (22) expr -> [ elements ] .

    )               reduce using rule 22 (expr -> [ elements ] .)
    AR_METHOD_SIZE  reduce using rule 22 (expr -> [ elements ] .)
    .               reduce using rule 22 (expr -> [ elements ] .)
    +               reduce using rule 22 (expr -> [ elements ] .)
    -               reduce using rule 22 (expr -> [ elements ] .)
    *               reduce using rule 22 (expr -> [ elements ] .)
    /               reduce using rule 22 (expr -> [ elements ] .)
    ASSIGN_ADD      reduce using rule 22 (expr -> [ elements ] .)
    ASSIGN_SUB      reduce using rule 22 (expr -> [ elements ] .)
    ASSIGN_MULT     reduce using rule 22 (expr -> [ elements ] .)
    ASSIGN_DIV      reduce using rule 22 (expr -> [ elements ] .)
    COMP_EQU        reduce using rule 22 (expr -> [ elements ] .)
    COMP_NEQU       reduce using rule 22 (expr -> [ elements ] .)
    <               reduce using rule 22 (expr -> [ elements ] .)
    COMP_LTE        reduce using rule 22 (expr -> [ elements ] .)
    >               reduce using rule 22 (expr -> [ elements ] .)
    COMP_GTE        reduce using rule 22 (expr -> [ elements ] .)
    BOOL_AND        reduce using rule 22 (expr -> [ elements ] .)
    BOOL_OR         reduce using rule 22 (expr -> [ elements ] .)
    ,               reduce using rule 22 (expr -> [ elements ] .)
    ;               reduce using rule 22 (expr -> [ elements ] .)
    ]               reduce using rule 22 (expr -> [ elements ] .)


state 77

    (51) arguments -> expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 51 (arguments -> expr .)
    ,               reduce using rule 51 (arguments -> expr .)
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56


state 78

    (50) expr -> COMMAND_PRINT ( arguments . )
    (52) arguments -> arguments . , expr

    )               shift and go to state 107
    ,               shift and go to state 106


state 79

    (53) expr -> COMMAND_RANDOM ( expr . )
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               shift and go to state 108
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56


state 80

    (40) expr -> ( expr ) .

    )               reduce using rule 40 (expr -> ( expr ) .)
    AR_METHOD_SIZE  reduce using rule 40 (expr -> ( expr ) .)
    .               reduce using rule 40 (expr -> ( expr ) .)
    +               reduce using rule 40 (expr -> ( expr ) .)
    -               reduce using rule 40 (expr -> ( expr ) .)
    *               reduce using rule 40 (expr -> ( expr ) .)
    /               reduce using rule 40 (expr -> ( expr ) .)
    ASSIGN_ADD      reduce using rule 40 (expr -> ( expr ) .)
    ASSIGN_SUB      reduce using rule 40 (expr -> ( expr ) .)
    ASSIGN_MULT     reduce using rule 40 (expr -> ( expr ) .)
    ASSIGN_DIV      reduce using rule 40 (expr -> ( expr ) .)
    COMP_EQU        reduce using rule 40 (expr -> ( expr ) .)
    COMP_NEQU       reduce using rule 40 (expr -> ( expr ) .)
    <               reduce using rule 40 (expr -> ( expr ) .)
    COMP_LTE        reduce using rule 40 (expr -> ( expr ) .)
    >               reduce using rule 40 (expr -> ( expr ) .)
    COMP_GTE        reduce using rule 40 (expr -> ( expr ) .)
    BOOL_AND        reduce using rule 40 (expr -> ( expr ) .)
    BOOL_OR         reduce using rule 40 (expr -> ( expr ) .)
    ,               reduce using rule 40 (expr -> ( expr ) .)
    ;               reduce using rule 40 (expr -> ( expr ) .)
    ]               reduce using rule 40 (expr -> ( expr ) .)


state 81

    (43) expr -> expr < expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 43 (expr -> expr < expr .)
    .               reduce using rule 43 (expr -> expr < expr .)
    ASSIGN_ADD      reduce using rule 43 (expr -> expr < expr .)
    ASSIGN_SUB      reduce using rule 43 (expr -> expr < expr .)
    ASSIGN_MULT     reduce using rule 43 (expr -> expr < expr .)
    ASSIGN_DIV      reduce using rule 43 (expr -> expr < expr .)
    COMP_EQU        reduce using rule 43 (expr -> expr < expr .)
    COMP_NEQU       reduce using rule 43 (expr -> expr < expr .)
    <               reduce using rule 43 (expr -> expr < expr .)
    COMP_LTE        reduce using rule 43 (expr -> expr < expr .)
    >               reduce using rule 43 (expr -> expr < expr .)
    COMP_GTE        reduce using rule 43 (expr -> expr < expr .)
    BOOL_AND        reduce using rule 43 (expr -> expr < expr .)
    BOOL_OR         reduce using rule 43 (expr -> expr < expr .)
    ,               reduce using rule 43 (expr -> expr < expr .)
    ;               reduce using rule 43 (expr -> expr < expr .)
    ]               reduce using rule 43 (expr -> expr < expr .)
    AR_METHOD_SIZE  shift and go to state 57
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52

  ! AR_METHOD_SIZE  [ reduce using rule 43 (expr -> expr < expr .) ]
  ! +               [ reduce using rule 43 (expr -> expr < expr .) ]
  ! -               [ reduce using rule 43 (expr -> expr < expr .) ]
  ! *               [ reduce using rule 43 (expr -> expr < expr .) ]
  ! /               [ reduce using rule 43 (expr -> expr < expr .) ]
  ! .               [ shift and go to state 64 ]
  ! ASSIGN_ADD      [ shift and go to state 65 ]
  ! ASSIGN_SUB      [ shift and go to state 62 ]
  ! ASSIGN_MULT     [ shift and go to state 59 ]
  ! ASSIGN_DIV      [ shift and go to state 60 ]
  ! COMP_EQU        [ shift and go to state 58 ]
  ! COMP_NEQU       [ shift and go to state 53 ]
  ! <               [ shift and go to state 47 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 54 ]
  ! COMP_GTE        [ shift and go to state 50 ]
  ! BOOL_AND        [ shift and go to state 55 ]
  ! BOOL_OR         [ shift and go to state 56 ]


state 82

    (33) expr -> expr - expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 33 (expr -> expr - expr .)
    .               reduce using rule 33 (expr -> expr - expr .)
    +               reduce using rule 33 (expr -> expr - expr .)
    -               reduce using rule 33 (expr -> expr - expr .)
    ASSIGN_ADD      reduce using rule 33 (expr -> expr - expr .)
    ASSIGN_SUB      reduce using rule 33 (expr -> expr - expr .)
    ASSIGN_MULT     reduce using rule 33 (expr -> expr - expr .)
    ASSIGN_DIV      reduce using rule 33 (expr -> expr - expr .)
    COMP_EQU        reduce using rule 33 (expr -> expr - expr .)
    COMP_NEQU       reduce using rule 33 (expr -> expr - expr .)
    <               reduce using rule 33 (expr -> expr - expr .)
    COMP_LTE        reduce using rule 33 (expr -> expr - expr .)
    >               reduce using rule 33 (expr -> expr - expr .)
    COMP_GTE        reduce using rule 33 (expr -> expr - expr .)
    BOOL_AND        reduce using rule 33 (expr -> expr - expr .)
    BOOL_OR         reduce using rule 33 (expr -> expr - expr .)
    ,               reduce using rule 33 (expr -> expr - expr .)
    ;               reduce using rule 33 (expr -> expr - expr .)
    ]               reduce using rule 33 (expr -> expr - expr .)
    AR_METHOD_SIZE  shift and go to state 57
    *               shift and go to state 61
    /               shift and go to state 52

  ! AR_METHOD_SIZE  [ reduce using rule 33 (expr -> expr - expr .) ]
  ! *               [ reduce using rule 33 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 33 (expr -> expr - expr .) ]
  ! .               [ shift and go to state 64 ]
  ! +               [ shift and go to state 51 ]
  ! -               [ shift and go to state 48 ]
  ! ASSIGN_ADD      [ shift and go to state 65 ]
  ! ASSIGN_SUB      [ shift and go to state 62 ]
  ! ASSIGN_MULT     [ shift and go to state 59 ]
  ! ASSIGN_DIV      [ shift and go to state 60 ]
  ! COMP_EQU        [ shift and go to state 58 ]
  ! COMP_NEQU       [ shift and go to state 53 ]
  ! <               [ shift and go to state 47 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 54 ]
  ! COMP_GTE        [ shift and go to state 50 ]
  ! BOOL_AND        [ shift and go to state 55 ]
  ! BOOL_OR         [ shift and go to state 56 ]


state 83

    (44) expr -> expr COMP_LTE expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 44 (expr -> expr COMP_LTE expr .)
    .               reduce using rule 44 (expr -> expr COMP_LTE expr .)
    ASSIGN_ADD      reduce using rule 44 (expr -> expr COMP_LTE expr .)
    ASSIGN_SUB      reduce using rule 44 (expr -> expr COMP_LTE expr .)
    ASSIGN_MULT     reduce using rule 44 (expr -> expr COMP_LTE expr .)
    ASSIGN_DIV      reduce using rule 44 (expr -> expr COMP_LTE expr .)
    COMP_EQU        reduce using rule 44 (expr -> expr COMP_LTE expr .)
    COMP_NEQU       reduce using rule 44 (expr -> expr COMP_LTE expr .)
    <               reduce using rule 44 (expr -> expr COMP_LTE expr .)
    COMP_LTE        reduce using rule 44 (expr -> expr COMP_LTE expr .)
    >               reduce using rule 44 (expr -> expr COMP_LTE expr .)
    COMP_GTE        reduce using rule 44 (expr -> expr COMP_LTE expr .)
    BOOL_AND        reduce using rule 44 (expr -> expr COMP_LTE expr .)
    BOOL_OR         reduce using rule 44 (expr -> expr COMP_LTE expr .)
    ,               reduce using rule 44 (expr -> expr COMP_LTE expr .)
    ;               reduce using rule 44 (expr -> expr COMP_LTE expr .)
    ]               reduce using rule 44 (expr -> expr COMP_LTE expr .)
    AR_METHOD_SIZE  shift and go to state 57
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52

  ! AR_METHOD_SIZE  [ reduce using rule 44 (expr -> expr COMP_LTE expr .) ]
  ! +               [ reduce using rule 44 (expr -> expr COMP_LTE expr .) ]
  ! -               [ reduce using rule 44 (expr -> expr COMP_LTE expr .) ]
  ! *               [ reduce using rule 44 (expr -> expr COMP_LTE expr .) ]
  ! /               [ reduce using rule 44 (expr -> expr COMP_LTE expr .) ]
  ! .               [ shift and go to state 64 ]
  ! ASSIGN_ADD      [ shift and go to state 65 ]
  ! ASSIGN_SUB      [ shift and go to state 62 ]
  ! ASSIGN_MULT     [ shift and go to state 59 ]
  ! ASSIGN_DIV      [ shift and go to state 60 ]
  ! COMP_EQU        [ shift and go to state 58 ]
  ! COMP_NEQU       [ shift and go to state 53 ]
  ! <               [ shift and go to state 47 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 54 ]
  ! COMP_GTE        [ shift and go to state 50 ]
  ! BOOL_AND        [ shift and go to state 55 ]
  ! BOOL_OR         [ shift and go to state 56 ]


state 84

    (46) expr -> expr COMP_GTE expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 46 (expr -> expr COMP_GTE expr .)
    .               reduce using rule 46 (expr -> expr COMP_GTE expr .)
    ASSIGN_ADD      reduce using rule 46 (expr -> expr COMP_GTE expr .)
    ASSIGN_SUB      reduce using rule 46 (expr -> expr COMP_GTE expr .)
    ASSIGN_MULT     reduce using rule 46 (expr -> expr COMP_GTE expr .)
    ASSIGN_DIV      reduce using rule 46 (expr -> expr COMP_GTE expr .)
    COMP_EQU        reduce using rule 46 (expr -> expr COMP_GTE expr .)
    COMP_NEQU       reduce using rule 46 (expr -> expr COMP_GTE expr .)
    <               reduce using rule 46 (expr -> expr COMP_GTE expr .)
    COMP_LTE        reduce using rule 46 (expr -> expr COMP_GTE expr .)
    >               reduce using rule 46 (expr -> expr COMP_GTE expr .)
    COMP_GTE        reduce using rule 46 (expr -> expr COMP_GTE expr .)
    BOOL_AND        reduce using rule 46 (expr -> expr COMP_GTE expr .)
    BOOL_OR         reduce using rule 46 (expr -> expr COMP_GTE expr .)
    ,               reduce using rule 46 (expr -> expr COMP_GTE expr .)
    ;               reduce using rule 46 (expr -> expr COMP_GTE expr .)
    ]               reduce using rule 46 (expr -> expr COMP_GTE expr .)
    AR_METHOD_SIZE  shift and go to state 57
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52

  ! AR_METHOD_SIZE  [ reduce using rule 46 (expr -> expr COMP_GTE expr .) ]
  ! +               [ reduce using rule 46 (expr -> expr COMP_GTE expr .) ]
  ! -               [ reduce using rule 46 (expr -> expr COMP_GTE expr .) ]
  ! *               [ reduce using rule 46 (expr -> expr COMP_GTE expr .) ]
  ! /               [ reduce using rule 46 (expr -> expr COMP_GTE expr .) ]
  ! .               [ shift and go to state 64 ]
  ! ASSIGN_ADD      [ shift and go to state 65 ]
  ! ASSIGN_SUB      [ shift and go to state 62 ]
  ! ASSIGN_MULT     [ shift and go to state 59 ]
  ! ASSIGN_DIV      [ shift and go to state 60 ]
  ! COMP_EQU        [ shift and go to state 58 ]
  ! COMP_NEQU       [ shift and go to state 53 ]
  ! <               [ shift and go to state 47 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 54 ]
  ! COMP_GTE        [ shift and go to state 50 ]
  ! BOOL_AND        [ shift and go to state 55 ]
  ! BOOL_OR         [ shift and go to state 56 ]


state 85

    (32) expr -> expr + expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 32 (expr -> expr + expr .)
    .               reduce using rule 32 (expr -> expr + expr .)
    +               reduce using rule 32 (expr -> expr + expr .)
    -               reduce using rule 32 (expr -> expr + expr .)
    ASSIGN_ADD      reduce using rule 32 (expr -> expr + expr .)
    ASSIGN_SUB      reduce using rule 32 (expr -> expr + expr .)
    ASSIGN_MULT     reduce using rule 32 (expr -> expr + expr .)
    ASSIGN_DIV      reduce using rule 32 (expr -> expr + expr .)
    COMP_EQU        reduce using rule 32 (expr -> expr + expr .)
    COMP_NEQU       reduce using rule 32 (expr -> expr + expr .)
    <               reduce using rule 32 (expr -> expr + expr .)
    COMP_LTE        reduce using rule 32 (expr -> expr + expr .)
    >               reduce using rule 32 (expr -> expr + expr .)
    COMP_GTE        reduce using rule 32 (expr -> expr + expr .)
    BOOL_AND        reduce using rule 32 (expr -> expr + expr .)
    BOOL_OR         reduce using rule 32 (expr -> expr + expr .)
    ,               reduce using rule 32 (expr -> expr + expr .)
    ;               reduce using rule 32 (expr -> expr + expr .)
    ]               reduce using rule 32 (expr -> expr + expr .)
    AR_METHOD_SIZE  shift and go to state 57
    *               shift and go to state 61
    /               shift and go to state 52

  ! AR_METHOD_SIZE  [ reduce using rule 32 (expr -> expr + expr .) ]
  ! *               [ reduce using rule 32 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 32 (expr -> expr + expr .) ]
  ! .               [ shift and go to state 64 ]
  ! +               [ shift and go to state 51 ]
  ! -               [ shift and go to state 48 ]
  ! ASSIGN_ADD      [ shift and go to state 65 ]
  ! ASSIGN_SUB      [ shift and go to state 62 ]
  ! ASSIGN_MULT     [ shift and go to state 59 ]
  ! ASSIGN_DIV      [ shift and go to state 60 ]
  ! COMP_EQU        [ shift and go to state 58 ]
  ! COMP_NEQU       [ shift and go to state 53 ]
  ! <               [ shift and go to state 47 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 54 ]
  ! COMP_GTE        [ shift and go to state 50 ]
  ! BOOL_AND        [ shift and go to state 55 ]
  ! BOOL_OR         [ shift and go to state 56 ]


state 86

    (35) expr -> expr / expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 35 (expr -> expr / expr .)
    .               reduce using rule 35 (expr -> expr / expr .)
    +               reduce using rule 35 (expr -> expr / expr .)
    -               reduce using rule 35 (expr -> expr / expr .)
    *               reduce using rule 35 (expr -> expr / expr .)
    /               reduce using rule 35 (expr -> expr / expr .)
    ASSIGN_ADD      reduce using rule 35 (expr -> expr / expr .)
    ASSIGN_SUB      reduce using rule 35 (expr -> expr / expr .)
    ASSIGN_MULT     reduce using rule 35 (expr -> expr / expr .)
    ASSIGN_DIV      reduce using rule 35 (expr -> expr / expr .)
    COMP_EQU        reduce using rule 35 (expr -> expr / expr .)
    COMP_NEQU       reduce using rule 35 (expr -> expr / expr .)
    <               reduce using rule 35 (expr -> expr / expr .)
    COMP_LTE        reduce using rule 35 (expr -> expr / expr .)
    >               reduce using rule 35 (expr -> expr / expr .)
    COMP_GTE        reduce using rule 35 (expr -> expr / expr .)
    BOOL_AND        reduce using rule 35 (expr -> expr / expr .)
    BOOL_OR         reduce using rule 35 (expr -> expr / expr .)
    ,               reduce using rule 35 (expr -> expr / expr .)
    ;               reduce using rule 35 (expr -> expr / expr .)
    ]               reduce using rule 35 (expr -> expr / expr .)
    AR_METHOD_SIZE  shift and go to state 57

  ! AR_METHOD_SIZE  [ reduce using rule 35 (expr -> expr / expr .) ]
  ! .               [ shift and go to state 64 ]
  ! +               [ shift and go to state 51 ]
  ! -               [ shift and go to state 48 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 52 ]
  ! ASSIGN_ADD      [ shift and go to state 65 ]
  ! ASSIGN_SUB      [ shift and go to state 62 ]
  ! ASSIGN_MULT     [ shift and go to state 59 ]
  ! ASSIGN_DIV      [ shift and go to state 60 ]
  ! COMP_EQU        [ shift and go to state 58 ]
  ! COMP_NEQU       [ shift and go to state 53 ]
  ! <               [ shift and go to state 47 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 54 ]
  ! COMP_GTE        [ shift and go to state 50 ]
  ! BOOL_AND        [ shift and go to state 55 ]
  ! BOOL_OR         [ shift and go to state 56 ]


state 87

    (42) expr -> expr COMP_NEQU expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    .               reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    ASSIGN_ADD      reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    ASSIGN_SUB      reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    ASSIGN_MULT     reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    ASSIGN_DIV      reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    COMP_EQU        reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    COMP_NEQU       reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    <               reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    COMP_LTE        reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    >               reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    COMP_GTE        reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    BOOL_AND        reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    BOOL_OR         reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    ,               reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    ;               reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    ]               reduce using rule 42 (expr -> expr COMP_NEQU expr .)
    AR_METHOD_SIZE  shift and go to state 57
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52

  ! AR_METHOD_SIZE  [ reduce using rule 42 (expr -> expr COMP_NEQU expr .) ]
  ! +               [ reduce using rule 42 (expr -> expr COMP_NEQU expr .) ]
  ! -               [ reduce using rule 42 (expr -> expr COMP_NEQU expr .) ]
  ! *               [ reduce using rule 42 (expr -> expr COMP_NEQU expr .) ]
  ! /               [ reduce using rule 42 (expr -> expr COMP_NEQU expr .) ]
  ! .               [ shift and go to state 64 ]
  ! ASSIGN_ADD      [ shift and go to state 65 ]
  ! ASSIGN_SUB      [ shift and go to state 62 ]
  ! ASSIGN_MULT     [ shift and go to state 59 ]
  ! ASSIGN_DIV      [ shift and go to state 60 ]
  ! COMP_EQU        [ shift and go to state 58 ]
  ! COMP_NEQU       [ shift and go to state 53 ]
  ! <               [ shift and go to state 47 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 54 ]
  ! COMP_GTE        [ shift and go to state 50 ]
  ! BOOL_AND        [ shift and go to state 55 ]
  ! BOOL_OR         [ shift and go to state 56 ]


state 88

    (45) expr -> expr > expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 45 (expr -> expr > expr .)
    .               reduce using rule 45 (expr -> expr > expr .)
    ASSIGN_ADD      reduce using rule 45 (expr -> expr > expr .)
    ASSIGN_SUB      reduce using rule 45 (expr -> expr > expr .)
    ASSIGN_MULT     reduce using rule 45 (expr -> expr > expr .)
    ASSIGN_DIV      reduce using rule 45 (expr -> expr > expr .)
    COMP_EQU        reduce using rule 45 (expr -> expr > expr .)
    COMP_NEQU       reduce using rule 45 (expr -> expr > expr .)
    <               reduce using rule 45 (expr -> expr > expr .)
    COMP_LTE        reduce using rule 45 (expr -> expr > expr .)
    >               reduce using rule 45 (expr -> expr > expr .)
    COMP_GTE        reduce using rule 45 (expr -> expr > expr .)
    BOOL_AND        reduce using rule 45 (expr -> expr > expr .)
    BOOL_OR         reduce using rule 45 (expr -> expr > expr .)
    ,               reduce using rule 45 (expr -> expr > expr .)
    ;               reduce using rule 45 (expr -> expr > expr .)
    ]               reduce using rule 45 (expr -> expr > expr .)
    AR_METHOD_SIZE  shift and go to state 57
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52

  ! AR_METHOD_SIZE  [ reduce using rule 45 (expr -> expr > expr .) ]
  ! +               [ reduce using rule 45 (expr -> expr > expr .) ]
  ! -               [ reduce using rule 45 (expr -> expr > expr .) ]
  ! *               [ reduce using rule 45 (expr -> expr > expr .) ]
  ! /               [ reduce using rule 45 (expr -> expr > expr .) ]
  ! .               [ shift and go to state 64 ]
  ! ASSIGN_ADD      [ shift and go to state 65 ]
  ! ASSIGN_SUB      [ shift and go to state 62 ]
  ! ASSIGN_MULT     [ shift and go to state 59 ]
  ! ASSIGN_DIV      [ shift and go to state 60 ]
  ! COMP_EQU        [ shift and go to state 58 ]
  ! COMP_NEQU       [ shift and go to state 53 ]
  ! <               [ shift and go to state 47 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 54 ]
  ! COMP_GTE        [ shift and go to state 50 ]
  ! BOOL_AND        [ shift and go to state 55 ]
  ! BOOL_OR         [ shift and go to state 56 ]


state 89

    (47) expr -> expr BOOL_AND expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 47 (expr -> expr BOOL_AND expr .)
    .               reduce using rule 47 (expr -> expr BOOL_AND expr .)
    ASSIGN_ADD      reduce using rule 47 (expr -> expr BOOL_AND expr .)
    ASSIGN_SUB      reduce using rule 47 (expr -> expr BOOL_AND expr .)
    ASSIGN_MULT     reduce using rule 47 (expr -> expr BOOL_AND expr .)
    ASSIGN_DIV      reduce using rule 47 (expr -> expr BOOL_AND expr .)
    BOOL_AND        reduce using rule 47 (expr -> expr BOOL_AND expr .)
    BOOL_OR         reduce using rule 47 (expr -> expr BOOL_AND expr .)
    ,               reduce using rule 47 (expr -> expr BOOL_AND expr .)
    ;               reduce using rule 47 (expr -> expr BOOL_AND expr .)
    ]               reduce using rule 47 (expr -> expr BOOL_AND expr .)
    AR_METHOD_SIZE  shift and go to state 57
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50

  ! AR_METHOD_SIZE  [ reduce using rule 47 (expr -> expr BOOL_AND expr .) ]
  ! +               [ reduce using rule 47 (expr -> expr BOOL_AND expr .) ]
  ! -               [ reduce using rule 47 (expr -> expr BOOL_AND expr .) ]
  ! *               [ reduce using rule 47 (expr -> expr BOOL_AND expr .) ]
  ! /               [ reduce using rule 47 (expr -> expr BOOL_AND expr .) ]
  ! COMP_EQU        [ reduce using rule 47 (expr -> expr BOOL_AND expr .) ]
  ! COMP_NEQU       [ reduce using rule 47 (expr -> expr BOOL_AND expr .) ]
  ! <               [ reduce using rule 47 (expr -> expr BOOL_AND expr .) ]
  ! COMP_LTE        [ reduce using rule 47 (expr -> expr BOOL_AND expr .) ]
  ! >               [ reduce using rule 47 (expr -> expr BOOL_AND expr .) ]
  ! COMP_GTE        [ reduce using rule 47 (expr -> expr BOOL_AND expr .) ]
  ! .               [ shift and go to state 64 ]
  ! ASSIGN_ADD      [ shift and go to state 65 ]
  ! ASSIGN_SUB      [ shift and go to state 62 ]
  ! ASSIGN_MULT     [ shift and go to state 59 ]
  ! ASSIGN_DIV      [ shift and go to state 60 ]
  ! BOOL_AND        [ shift and go to state 55 ]
  ! BOOL_OR         [ shift and go to state 56 ]


state 90

    (48) expr -> expr BOOL_OR expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 48 (expr -> expr BOOL_OR expr .)
    .               reduce using rule 48 (expr -> expr BOOL_OR expr .)
    ASSIGN_ADD      reduce using rule 48 (expr -> expr BOOL_OR expr .)
    ASSIGN_SUB      reduce using rule 48 (expr -> expr BOOL_OR expr .)
    ASSIGN_MULT     reduce using rule 48 (expr -> expr BOOL_OR expr .)
    ASSIGN_DIV      reduce using rule 48 (expr -> expr BOOL_OR expr .)
    BOOL_OR         reduce using rule 48 (expr -> expr BOOL_OR expr .)
    ,               reduce using rule 48 (expr -> expr BOOL_OR expr .)
    ;               reduce using rule 48 (expr -> expr BOOL_OR expr .)
    ]               reduce using rule 48 (expr -> expr BOOL_OR expr .)
    AR_METHOD_SIZE  shift and go to state 57
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55

  ! AR_METHOD_SIZE  [ reduce using rule 48 (expr -> expr BOOL_OR expr .) ]
  ! +               [ reduce using rule 48 (expr -> expr BOOL_OR expr .) ]
  ! -               [ reduce using rule 48 (expr -> expr BOOL_OR expr .) ]
  ! *               [ reduce using rule 48 (expr -> expr BOOL_OR expr .) ]
  ! /               [ reduce using rule 48 (expr -> expr BOOL_OR expr .) ]
  ! COMP_EQU        [ reduce using rule 48 (expr -> expr BOOL_OR expr .) ]
  ! COMP_NEQU       [ reduce using rule 48 (expr -> expr BOOL_OR expr .) ]
  ! <               [ reduce using rule 48 (expr -> expr BOOL_OR expr .) ]
  ! COMP_LTE        [ reduce using rule 48 (expr -> expr BOOL_OR expr .) ]
  ! >               [ reduce using rule 48 (expr -> expr BOOL_OR expr .) ]
  ! COMP_GTE        [ reduce using rule 48 (expr -> expr BOOL_OR expr .) ]
  ! BOOL_AND        [ reduce using rule 48 (expr -> expr BOOL_OR expr .) ]
  ! .               [ shift and go to state 64 ]
  ! ASSIGN_ADD      [ shift and go to state 65 ]
  ! ASSIGN_SUB      [ shift and go to state 62 ]
  ! ASSIGN_MULT     [ shift and go to state 59 ]
  ! ASSIGN_DIV      [ shift and go to state 60 ]
  ! BOOL_OR         [ shift and go to state 56 ]


state 91

    (27) expr -> expr AR_METHOD_SIZE ( . )
    (28) expr -> expr AR_METHOD_SIZE ( . expr )
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    )               shift and go to state 110
    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 109

state 92

    (41) expr -> expr COMP_EQU expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 41 (expr -> expr COMP_EQU expr .)
    .               reduce using rule 41 (expr -> expr COMP_EQU expr .)
    ASSIGN_ADD      reduce using rule 41 (expr -> expr COMP_EQU expr .)
    ASSIGN_SUB      reduce using rule 41 (expr -> expr COMP_EQU expr .)
    ASSIGN_MULT     reduce using rule 41 (expr -> expr COMP_EQU expr .)
    ASSIGN_DIV      reduce using rule 41 (expr -> expr COMP_EQU expr .)
    COMP_EQU        reduce using rule 41 (expr -> expr COMP_EQU expr .)
    COMP_NEQU       reduce using rule 41 (expr -> expr COMP_EQU expr .)
    <               reduce using rule 41 (expr -> expr COMP_EQU expr .)
    COMP_LTE        reduce using rule 41 (expr -> expr COMP_EQU expr .)
    >               reduce using rule 41 (expr -> expr COMP_EQU expr .)
    COMP_GTE        reduce using rule 41 (expr -> expr COMP_EQU expr .)
    BOOL_AND        reduce using rule 41 (expr -> expr COMP_EQU expr .)
    BOOL_OR         reduce using rule 41 (expr -> expr COMP_EQU expr .)
    ,               reduce using rule 41 (expr -> expr COMP_EQU expr .)
    ;               reduce using rule 41 (expr -> expr COMP_EQU expr .)
    ]               reduce using rule 41 (expr -> expr COMP_EQU expr .)
    AR_METHOD_SIZE  shift and go to state 57
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52

  ! AR_METHOD_SIZE  [ reduce using rule 41 (expr -> expr COMP_EQU expr .) ]
  ! +               [ reduce using rule 41 (expr -> expr COMP_EQU expr .) ]
  ! -               [ reduce using rule 41 (expr -> expr COMP_EQU expr .) ]
  ! *               [ reduce using rule 41 (expr -> expr COMP_EQU expr .) ]
  ! /               [ reduce using rule 41 (expr -> expr COMP_EQU expr .) ]
  ! .               [ shift and go to state 64 ]
  ! ASSIGN_ADD      [ shift and go to state 65 ]
  ! ASSIGN_SUB      [ shift and go to state 62 ]
  ! ASSIGN_MULT     [ shift and go to state 59 ]
  ! ASSIGN_DIV      [ shift and go to state 60 ]
  ! COMP_EQU        [ shift and go to state 58 ]
  ! COMP_NEQU       [ shift and go to state 53 ]
  ! <               [ shift and go to state 47 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 54 ]
  ! COMP_GTE        [ shift and go to state 50 ]
  ! BOOL_AND        [ shift and go to state 55 ]
  ! BOOL_OR         [ shift and go to state 56 ]


state 93

    (38) expr -> expr ASSIGN_MULT expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for AR_METHOD_SIZE resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    )               reduce using rule 38 (expr -> expr ASSIGN_MULT expr .)
    ,               reduce using rule 38 (expr -> expr ASSIGN_MULT expr .)
    ;               reduce using rule 38 (expr -> expr ASSIGN_MULT expr .)
    ]               reduce using rule 38 (expr -> expr ASSIGN_MULT expr .)
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56

  ! AR_METHOD_SIZE  [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! .               [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! +               [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! -               [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! *               [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! /               [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_EQU        [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_NEQU       [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! <               [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_LTE        [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! >               [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! COMP_GTE        [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! BOOL_AND        [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]
  ! BOOL_OR         [ reduce using rule 38 (expr -> expr ASSIGN_MULT expr .) ]


state 94

    (39) expr -> expr ASSIGN_DIV expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for AR_METHOD_SIZE resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    )               reduce using rule 39 (expr -> expr ASSIGN_DIV expr .)
    ,               reduce using rule 39 (expr -> expr ASSIGN_DIV expr .)
    ;               reduce using rule 39 (expr -> expr ASSIGN_DIV expr .)
    ]               reduce using rule 39 (expr -> expr ASSIGN_DIV expr .)
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56

  ! AR_METHOD_SIZE  [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! .               [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! +               [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! -               [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! *               [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! /               [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_EQU        [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_NEQU       [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! <               [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_LTE        [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! >               [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! COMP_GTE        [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! BOOL_AND        [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]
  ! BOOL_OR         [ reduce using rule 39 (expr -> expr ASSIGN_DIV expr .) ]


state 95

    (34) expr -> expr * expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 34 (expr -> expr * expr .)
    .               reduce using rule 34 (expr -> expr * expr .)
    +               reduce using rule 34 (expr -> expr * expr .)
    -               reduce using rule 34 (expr -> expr * expr .)
    *               reduce using rule 34 (expr -> expr * expr .)
    /               reduce using rule 34 (expr -> expr * expr .)
    ASSIGN_ADD      reduce using rule 34 (expr -> expr * expr .)
    ASSIGN_SUB      reduce using rule 34 (expr -> expr * expr .)
    ASSIGN_MULT     reduce using rule 34 (expr -> expr * expr .)
    ASSIGN_DIV      reduce using rule 34 (expr -> expr * expr .)
    COMP_EQU        reduce using rule 34 (expr -> expr * expr .)
    COMP_NEQU       reduce using rule 34 (expr -> expr * expr .)
    <               reduce using rule 34 (expr -> expr * expr .)
    COMP_LTE        reduce using rule 34 (expr -> expr * expr .)
    >               reduce using rule 34 (expr -> expr * expr .)
    COMP_GTE        reduce using rule 34 (expr -> expr * expr .)
    BOOL_AND        reduce using rule 34 (expr -> expr * expr .)
    BOOL_OR         reduce using rule 34 (expr -> expr * expr .)
    ,               reduce using rule 34 (expr -> expr * expr .)
    ;               reduce using rule 34 (expr -> expr * expr .)
    ]               reduce using rule 34 (expr -> expr * expr .)
    AR_METHOD_SIZE  shift and go to state 57

  ! AR_METHOD_SIZE  [ reduce using rule 34 (expr -> expr * expr .) ]
  ! .               [ shift and go to state 64 ]
  ! +               [ shift and go to state 51 ]
  ! -               [ shift and go to state 48 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 52 ]
  ! ASSIGN_ADD      [ shift and go to state 65 ]
  ! ASSIGN_SUB      [ shift and go to state 62 ]
  ! ASSIGN_MULT     [ shift and go to state 59 ]
  ! ASSIGN_DIV      [ shift and go to state 60 ]
  ! COMP_EQU        [ shift and go to state 58 ]
  ! COMP_NEQU       [ shift and go to state 53 ]
  ! <               [ shift and go to state 47 ]
  ! COMP_LTE        [ shift and go to state 49 ]
  ! >               [ shift and go to state 54 ]
  ! COMP_GTE        [ shift and go to state 50 ]
  ! BOOL_AND        [ shift and go to state 55 ]
  ! BOOL_OR         [ shift and go to state 56 ]


state 96

    (37) expr -> expr ASSIGN_SUB expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for AR_METHOD_SIZE resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    )               reduce using rule 37 (expr -> expr ASSIGN_SUB expr .)
    ,               reduce using rule 37 (expr -> expr ASSIGN_SUB expr .)
    ;               reduce using rule 37 (expr -> expr ASSIGN_SUB expr .)
    ]               reduce using rule 37 (expr -> expr ASSIGN_SUB expr .)
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56

  ! AR_METHOD_SIZE  [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! .               [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! +               [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! -               [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! *               [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! /               [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_EQU        [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_NEQU       [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! <               [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_LTE        [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! >               [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! COMP_GTE        [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! BOOL_AND        [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]
  ! BOOL_OR         [ reduce using rule 37 (expr -> expr ASSIGN_SUB expr .) ]


state 97

    (29) expr -> expr . AR_METHOD_RESIZE . ( arguments )

    (               shift and go to state 111


state 98

    (36) expr -> expr ASSIGN_ADD expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

  ! shift/reduce conflict for AR_METHOD_SIZE resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ASSIGN_ADD resolved as shift
  ! shift/reduce conflict for ASSIGN_SUB resolved as shift
  ! shift/reduce conflict for ASSIGN_MULT resolved as shift
  ! shift/reduce conflict for ASSIGN_DIV resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    )               reduce using rule 36 (expr -> expr ASSIGN_ADD expr .)
    ,               reduce using rule 36 (expr -> expr ASSIGN_ADD expr .)
    ;               reduce using rule 36 (expr -> expr ASSIGN_ADD expr .)
    ]               reduce using rule 36 (expr -> expr ASSIGN_ADD expr .)
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56

  ! AR_METHOD_SIZE  [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! .               [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! +               [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! -               [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! *               [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! /               [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_ADD      [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_SUB      [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_MULT     [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! ASSIGN_DIV      [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_EQU        [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_NEQU       [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! <               [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_LTE        [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! >               [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! COMP_GTE        [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! BOOL_AND        [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]
  ! BOOL_OR         [ reduce using rule 36 (expr -> expr ASSIGN_ADD expr .) ]


state 99

    (18) declaration -> ARRAY_TYPE ( TYPE ) . ID
    (19) declaration -> ARRAY_TYPE ( TYPE ) . ID = expr

    ID              shift and go to state 112


state 100

    (12) if_block -> COMMAND_IF ( expr ) . statement
    (13) if_block -> COMMAND_IF ( expr ) . statement COMMAND_ELSE statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . ;
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (16) declaration -> . TYPE ID
    (17) declaration -> . TYPE ID = expr
    (18) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (19) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (20) declaration -> . STRING_TYPE ID
    (21) declaration -> . STRING_TYPE ID = expr
    (11) block -> . OPEN_BLOCK statements CLOSE_BLOCK
    (12) if_block -> . COMMAND_IF ( expr ) statement
    (13) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (15) while_loop -> . COMMAND_WHILE ( expr ) statement
    (14) break -> . COMMAND_BREAK
    (60) variable -> . ID

    ;               shift and go to state 7
    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    TYPE            shift and go to state 6
    ARRAY_TYPE      shift and go to state 3
    STRING_TYPE     shift and go to state 5
    OPEN_BLOCK      shift and go to state 11
    COMMAND_IF      shift and go to state 4
    COMMAND_WHILE   shift and go to state 10
    COMMAND_BREAK   shift and go to state 14
    ID              shift and go to state 18

    block                          shift and go to state 19
    declaration                    shift and go to state 13
    if_block                       shift and go to state 9
    variable                       shift and go to state 8
    expr                           shift and go to state 25
    while_loop                     shift and go to state 20
    statement                      shift and go to state 113
    break                          shift and go to state 28

state 101

    (21) declaration -> STRING_TYPE ID = expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    ;               reduce using rule 21 (declaration -> STRING_TYPE ID = expr .)
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56


state 102

    (17) declaration -> TYPE ID = expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    ;               reduce using rule 17 (declaration -> TYPE ID = expr .)
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56


state 103

    (30) expr -> variable [ expr ] .
    (31) expr -> variable [ expr ] . = expr

    )               reduce using rule 30 (expr -> variable [ expr ] .)
    AR_METHOD_SIZE  reduce using rule 30 (expr -> variable [ expr ] .)
    .               reduce using rule 30 (expr -> variable [ expr ] .)
    +               reduce using rule 30 (expr -> variable [ expr ] .)
    -               reduce using rule 30 (expr -> variable [ expr ] .)
    *               reduce using rule 30 (expr -> variable [ expr ] .)
    /               reduce using rule 30 (expr -> variable [ expr ] .)
    ASSIGN_ADD      reduce using rule 30 (expr -> variable [ expr ] .)
    ASSIGN_SUB      reduce using rule 30 (expr -> variable [ expr ] .)
    ASSIGN_MULT     reduce using rule 30 (expr -> variable [ expr ] .)
    ASSIGN_DIV      reduce using rule 30 (expr -> variable [ expr ] .)
    COMP_EQU        reduce using rule 30 (expr -> variable [ expr ] .)
    COMP_NEQU       reduce using rule 30 (expr -> variable [ expr ] .)
    <               reduce using rule 30 (expr -> variable [ expr ] .)
    COMP_LTE        reduce using rule 30 (expr -> variable [ expr ] .)
    >               reduce using rule 30 (expr -> variable [ expr ] .)
    COMP_GTE        reduce using rule 30 (expr -> variable [ expr ] .)
    BOOL_AND        reduce using rule 30 (expr -> variable [ expr ] .)
    BOOL_OR         reduce using rule 30 (expr -> variable [ expr ] .)
    ,               reduce using rule 30 (expr -> variable [ expr ] .)
    ;               reduce using rule 30 (expr -> variable [ expr ] .)
    ]               reduce using rule 30 (expr -> variable [ expr ] .)
    =               shift and go to state 114


state 104

    (15) while_loop -> COMMAND_WHILE ( expr ) . statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . ;
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (16) declaration -> . TYPE ID
    (17) declaration -> . TYPE ID = expr
    (18) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (19) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (20) declaration -> . STRING_TYPE ID
    (21) declaration -> . STRING_TYPE ID = expr
    (11) block -> . OPEN_BLOCK statements CLOSE_BLOCK
    (12) if_block -> . COMMAND_IF ( expr ) statement
    (13) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (15) while_loop -> . COMMAND_WHILE ( expr ) statement
    (14) break -> . COMMAND_BREAK
    (60) variable -> . ID

    ;               shift and go to state 7
    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    TYPE            shift and go to state 6
    ARRAY_TYPE      shift and go to state 3
    STRING_TYPE     shift and go to state 5
    OPEN_BLOCK      shift and go to state 11
    COMMAND_IF      shift and go to state 4
    COMMAND_WHILE   shift and go to state 10
    COMMAND_BREAK   shift and go to state 14
    ID              shift and go to state 18

    block                          shift and go to state 19
    declaration                    shift and go to state 13
    if_block                       shift and go to state 9
    variable                       shift and go to state 8
    expr                           shift and go to state 25
    while_loop                     shift and go to state 20
    statement                      shift and go to state 115
    break                          shift and go to state 28

state 105

    (26) elements -> elements , expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    ]               reduce using rule 26 (elements -> elements , expr .)
    ,               reduce using rule 26 (elements -> elements , expr .)
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56


state 106

    (52) arguments -> arguments , . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 116

state 107

    (50) expr -> COMMAND_PRINT ( arguments ) .

    )               reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    AR_METHOD_SIZE  reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    .               reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    +               reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    -               reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    *               reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    /               reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_ADD      reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_SUB      reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_MULT     reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    ASSIGN_DIV      reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_EQU        reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_NEQU       reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    <               reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_LTE        reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    >               reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    COMP_GTE        reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    BOOL_AND        reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    BOOL_OR         reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    ,               reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    ;               reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)
    ]               reduce using rule 50 (expr -> COMMAND_PRINT ( arguments ) .)


state 108

    (53) expr -> COMMAND_RANDOM ( expr ) .

    )               reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    AR_METHOD_SIZE  reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    .               reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    +               reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    -               reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    *               reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    /               reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_ADD      reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_SUB      reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_MULT     reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    ASSIGN_DIV      reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_EQU        reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_NEQU       reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    <               reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_LTE        reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    >               reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    COMP_GTE        reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    BOOL_AND        reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    BOOL_OR         reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    ,               reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    ;               reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)
    ]               reduce using rule 53 (expr -> COMMAND_RANDOM ( expr ) .)


state 109

    (28) expr -> expr AR_METHOD_SIZE ( expr . )
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               shift and go to state 117
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56


state 110

    (27) expr -> expr AR_METHOD_SIZE ( ) .

    )               reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    AR_METHOD_SIZE  reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    .               reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    +               reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    -               reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    *               reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    /               reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    ASSIGN_ADD      reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    ASSIGN_SUB      reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    ASSIGN_MULT     reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    ASSIGN_DIV      reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    COMP_EQU        reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    COMP_NEQU       reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    <               reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    COMP_LTE        reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    >               reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    COMP_GTE        reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    BOOL_AND        reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    BOOL_OR         reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    ,               reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    ;               reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)
    ]               reduce using rule 27 (expr -> expr AR_METHOD_SIZE ( ) .)


state 111

    (29) expr -> expr . AR_METHOD_RESIZE ( . arguments )
    (51) arguments -> . expr
    (52) arguments -> . arguments , expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    arguments                      shift and go to state 118
    variable                       shift and go to state 8
    expr                           shift and go to state 77

state 112

    (18) declaration -> ARRAY_TYPE ( TYPE ) ID .
    (19) declaration -> ARRAY_TYPE ( TYPE ) ID . = expr

    ;               reduce using rule 18 (declaration -> ARRAY_TYPE ( TYPE ) ID .)
    =               shift and go to state 119


state 113

    (12) if_block -> COMMAND_IF ( expr ) statement .
    (13) if_block -> COMMAND_IF ( expr ) statement . COMMAND_ELSE statement

  ! shift/reduce conflict for COMMAND_ELSE resolved as shift
    ;               reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    [               reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    STRING_LITERAL  reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    (               reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    !               reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_PRINT   reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_RANDOM  reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    VAL_LITERAL     reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    -               reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    CHAR_LITERAL    reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    TYPE            reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    ARRAY_TYPE      reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    STRING_TYPE     reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    OPEN_BLOCK      reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_IF      reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_WHILE   reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_BREAK   reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    ID              reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    $end            reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    CLOSE_BLOCK     reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .)
    COMMAND_ELSE    shift and go to state 120

  ! COMMAND_ELSE    [ reduce using rule 12 (if_block -> COMMAND_IF ( expr ) statement .) ]


state 114

    (31) expr -> variable [ expr ] = . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 121

state 115

    (15) while_loop -> COMMAND_WHILE ( expr ) statement .

    COMMAND_ELSE    reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    ;               reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    [               reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    STRING_LITERAL  reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    (               reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    !               reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_PRINT   reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_RANDOM  reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    VAL_LITERAL     reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    -               reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    CHAR_LITERAL    reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    TYPE            reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    ARRAY_TYPE      reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    STRING_TYPE     reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    OPEN_BLOCK      reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_IF      reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_WHILE   reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    COMMAND_BREAK   reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    ID              reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    $end            reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)
    CLOSE_BLOCK     reduce using rule 15 (while_loop -> COMMAND_WHILE ( expr ) statement .)


state 116

    (52) arguments -> arguments , expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 52 (arguments -> arguments , expr .)
    ,               reduce using rule 52 (arguments -> arguments , expr .)
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56


state 117

    (28) expr -> expr AR_METHOD_SIZE ( expr ) .

    )               reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    AR_METHOD_SIZE  reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    .               reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    +               reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    -               reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    *               reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    /               reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ASSIGN_ADD      reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ASSIGN_SUB      reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ASSIGN_MULT     reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ASSIGN_DIV      reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    COMP_EQU        reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    COMP_NEQU       reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    <               reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    COMP_LTE        reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    >               reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    COMP_GTE        reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    BOOL_AND        reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    BOOL_OR         reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ,               reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ;               reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)
    ]               reduce using rule 28 (expr -> expr AR_METHOD_SIZE ( expr ) .)


state 118

    (29) expr -> expr . AR_METHOD_RESIZE ( arguments . )
    (52) arguments -> arguments . , expr

    )               shift and go to state 122
    ,               shift and go to state 106


state 119

    (19) declaration -> ARRAY_TYPE ( TYPE ) ID = . expr
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (60) variable -> . ID

    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    ID              shift and go to state 18

    variable                       shift and go to state 8
    expr                           shift and go to state 123

state 120

    (13) if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE . statement
    (4) statement -> . expr ;
    (5) statement -> . declaration ;
    (6) statement -> . block
    (7) statement -> . if_block
    (8) statement -> . while_loop
    (9) statement -> . break ;
    (10) statement -> . ;
    (22) expr -> . [ elements ]
    (23) expr -> . [ ]
    (24) expr -> . STRING_LITERAL
    (27) expr -> . expr AR_METHOD_SIZE ( )
    (28) expr -> . expr AR_METHOD_SIZE ( expr )
    (29) expr -> . expr . AR_METHOD_RESIZE ( arguments )
    (30) expr -> . variable [ expr ]
    (31) expr -> . variable [ expr ] = expr
    (32) expr -> . expr + expr
    (33) expr -> . expr - expr
    (34) expr -> . expr * expr
    (35) expr -> . expr / expr
    (36) expr -> . expr ASSIGN_ADD expr
    (37) expr -> . expr ASSIGN_SUB expr
    (38) expr -> . expr ASSIGN_MULT expr
    (39) expr -> . expr ASSIGN_DIV expr
    (40) expr -> . ( expr )
    (41) expr -> . expr COMP_EQU expr
    (42) expr -> . expr COMP_NEQU expr
    (43) expr -> . expr < expr
    (44) expr -> . expr COMP_LTE expr
    (45) expr -> . expr > expr
    (46) expr -> . expr COMP_GTE expr
    (47) expr -> . expr BOOL_AND expr
    (48) expr -> . expr BOOL_OR expr
    (49) expr -> . ! expr
    (50) expr -> . COMMAND_PRINT ( arguments )
    (53) expr -> . COMMAND_RANDOM ( expr )
    (54) expr -> . VAL_LITERAL
    (55) expr -> . - VAL_LITERAL
    (56) expr -> . CHAR_LITERAL
    (57) expr -> . variable
    (58) expr -> . - variable
    (59) expr -> . variable = expr
    (16) declaration -> . TYPE ID
    (17) declaration -> . TYPE ID = expr
    (18) declaration -> . ARRAY_TYPE ( TYPE ) ID
    (19) declaration -> . ARRAY_TYPE ( TYPE ) ID = expr
    (20) declaration -> . STRING_TYPE ID
    (21) declaration -> . STRING_TYPE ID = expr
    (11) block -> . OPEN_BLOCK statements CLOSE_BLOCK
    (12) if_block -> . COMMAND_IF ( expr ) statement
    (13) if_block -> . COMMAND_IF ( expr ) statement COMMAND_ELSE statement
    (15) while_loop -> . COMMAND_WHILE ( expr ) statement
    (14) break -> . COMMAND_BREAK
    (60) variable -> . ID

    ;               shift and go to state 7
    [               shift and go to state 16
    STRING_LITERAL  shift and go to state 26
    (               shift and go to state 24
    !               shift and go to state 17
    COMMAND_PRINT   shift and go to state 21
    COMMAND_RANDOM  shift and go to state 22
    VAL_LITERAL     shift and go to state 12
    -               shift and go to state 15
    CHAR_LITERAL    shift and go to state 27
    TYPE            shift and go to state 6
    ARRAY_TYPE      shift and go to state 3
    STRING_TYPE     shift and go to state 5
    OPEN_BLOCK      shift and go to state 11
    COMMAND_IF      shift and go to state 4
    COMMAND_WHILE   shift and go to state 10
    COMMAND_BREAK   shift and go to state 14
    ID              shift and go to state 18

    block                          shift and go to state 19
    declaration                    shift and go to state 13
    if_block                       shift and go to state 9
    variable                       shift and go to state 8
    expr                           shift and go to state 25
    while_loop                     shift and go to state 20
    statement                      shift and go to state 124
    break                          shift and go to state 28

state 121

    (31) expr -> variable [ expr ] = expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    )               reduce using rule 31 (expr -> variable [ expr ] = expr .)
    .               reduce using rule 31 (expr -> variable [ expr ] = expr .)
    ASSIGN_ADD      reduce using rule 31 (expr -> variable [ expr ] = expr .)
    ASSIGN_SUB      reduce using rule 31 (expr -> variable [ expr ] = expr .)
    ASSIGN_MULT     reduce using rule 31 (expr -> variable [ expr ] = expr .)
    ASSIGN_DIV      reduce using rule 31 (expr -> variable [ expr ] = expr .)
    ,               reduce using rule 31 (expr -> variable [ expr ] = expr .)
    ;               reduce using rule 31 (expr -> variable [ expr ] = expr .)
    ]               reduce using rule 31 (expr -> variable [ expr ] = expr .)
    AR_METHOD_SIZE  shift and go to state 57
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56

  ! AR_METHOD_SIZE  [ reduce using rule 31 (expr -> variable [ expr ] = expr .) ]
  ! +               [ reduce using rule 31 (expr -> variable [ expr ] = expr .) ]
  ! -               [ reduce using rule 31 (expr -> variable [ expr ] = expr .) ]
  ! *               [ reduce using rule 31 (expr -> variable [ expr ] = expr .) ]
  ! /               [ reduce using rule 31 (expr -> variable [ expr ] = expr .) ]
  ! COMP_EQU        [ reduce using rule 31 (expr -> variable [ expr ] = expr .) ]
  ! COMP_NEQU       [ reduce using rule 31 (expr -> variable [ expr ] = expr .) ]
  ! <               [ reduce using rule 31 (expr -> variable [ expr ] = expr .) ]
  ! COMP_LTE        [ reduce using rule 31 (expr -> variable [ expr ] = expr .) ]
  ! >               [ reduce using rule 31 (expr -> variable [ expr ] = expr .) ]
  ! COMP_GTE        [ reduce using rule 31 (expr -> variable [ expr ] = expr .) ]
  ! BOOL_AND        [ reduce using rule 31 (expr -> variable [ expr ] = expr .) ]
  ! BOOL_OR         [ reduce using rule 31 (expr -> variable [ expr ] = expr .) ]
  ! .               [ shift and go to state 64 ]
  ! ASSIGN_ADD      [ shift and go to state 65 ]
  ! ASSIGN_SUB      [ shift and go to state 62 ]
  ! ASSIGN_MULT     [ shift and go to state 59 ]
  ! ASSIGN_DIV      [ shift and go to state 60 ]


state 122

    (29) expr -> expr . AR_METHOD_RESIZE ( arguments ) .

    )               reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    AR_METHOD_SIZE  reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    .               reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    +               reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    -               reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    *               reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    /               reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    ASSIGN_ADD      reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    ASSIGN_SUB      reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    ASSIGN_MULT     reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    ASSIGN_DIV      reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    COMP_EQU        reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    COMP_NEQU       reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    <               reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    COMP_LTE        reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    >               reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    COMP_GTE        reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    BOOL_AND        reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    BOOL_OR         reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    ,               reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    ;               reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)
    ]               reduce using rule 29 (expr -> expr . AR_METHOD_RESIZE ( arguments ) .)


state 123

    (19) declaration -> ARRAY_TYPE ( TYPE ) ID = expr .
    (27) expr -> expr . AR_METHOD_SIZE ( )
    (28) expr -> expr . AR_METHOD_SIZE ( expr )
    (29) expr -> expr . . AR_METHOD_RESIZE ( arguments )
    (32) expr -> expr . + expr
    (33) expr -> expr . - expr
    (34) expr -> expr . * expr
    (35) expr -> expr . / expr
    (36) expr -> expr . ASSIGN_ADD expr
    (37) expr -> expr . ASSIGN_SUB expr
    (38) expr -> expr . ASSIGN_MULT expr
    (39) expr -> expr . ASSIGN_DIV expr
    (41) expr -> expr . COMP_EQU expr
    (42) expr -> expr . COMP_NEQU expr
    (43) expr -> expr . < expr
    (44) expr -> expr . COMP_LTE expr
    (45) expr -> expr . > expr
    (46) expr -> expr . COMP_GTE expr
    (47) expr -> expr . BOOL_AND expr
    (48) expr -> expr . BOOL_OR expr

    ;               reduce using rule 19 (declaration -> ARRAY_TYPE ( TYPE ) ID = expr .)
    AR_METHOD_SIZE  shift and go to state 57
    .               shift and go to state 64
    +               shift and go to state 51
    -               shift and go to state 48
    *               shift and go to state 61
    /               shift and go to state 52
    ASSIGN_ADD      shift and go to state 65
    ASSIGN_SUB      shift and go to state 62
    ASSIGN_MULT     shift and go to state 59
    ASSIGN_DIV      shift and go to state 60
    COMP_EQU        shift and go to state 58
    COMP_NEQU       shift and go to state 53
    <               shift and go to state 47
    COMP_LTE        shift and go to state 49
    >               shift and go to state 54
    COMP_GTE        shift and go to state 50
    BOOL_AND        shift and go to state 55
    BOOL_OR         shift and go to state 56


state 124

    (13) if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .

    COMMAND_ELSE    reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    ;               reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    [               reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    STRING_LITERAL  reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    (               reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    !               reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_PRINT   reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_RANDOM  reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    VAL_LITERAL     reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    -               reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    CHAR_LITERAL    reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    TYPE            reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    ARRAY_TYPE      reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    STRING_TYPE     reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    OPEN_BLOCK      reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_IF      reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_WHILE   reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    COMMAND_BREAK   reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    ID              reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    $end            reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)
    CLOSE_BLOCK     reduce using rule 13 (if_block -> COMMAND_IF ( expr ) statement COMMAND_ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AR_METHOD_SIZE in state 93 resolved as shift
WARNING: shift/reduce conflict for . in state 93 resolved as shift
WARNING: shift/reduce conflict for + in state 93 resolved as shift
WARNING: shift/reduce conflict for - in state 93 resolved as shift
WARNING: shift/reduce conflict for * in state 93 resolved as shift
WARNING: shift/reduce conflict for / in state 93 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 93 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 93 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 93 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 93 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 93 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 93 resolved as shift
WARNING: shift/reduce conflict for < in state 93 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 93 resolved as shift
WARNING: shift/reduce conflict for > in state 93 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 93 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 93 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 93 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_SIZE in state 94 resolved as shift
WARNING: shift/reduce conflict for . in state 94 resolved as shift
WARNING: shift/reduce conflict for + in state 94 resolved as shift
WARNING: shift/reduce conflict for - in state 94 resolved as shift
WARNING: shift/reduce conflict for * in state 94 resolved as shift
WARNING: shift/reduce conflict for / in state 94 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 94 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 94 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 94 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 94 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 94 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 94 resolved as shift
WARNING: shift/reduce conflict for < in state 94 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 94 resolved as shift
WARNING: shift/reduce conflict for > in state 94 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 94 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 94 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 94 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_SIZE in state 96 resolved as shift
WARNING: shift/reduce conflict for . in state 96 resolved as shift
WARNING: shift/reduce conflict for + in state 96 resolved as shift
WARNING: shift/reduce conflict for - in state 96 resolved as shift
WARNING: shift/reduce conflict for * in state 96 resolved as shift
WARNING: shift/reduce conflict for / in state 96 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 96 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 96 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 96 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 96 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 96 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 96 resolved as shift
WARNING: shift/reduce conflict for < in state 96 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 96 resolved as shift
WARNING: shift/reduce conflict for > in state 96 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 96 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 96 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 96 resolved as shift
WARNING: shift/reduce conflict for AR_METHOD_SIZE in state 98 resolved as shift
WARNING: shift/reduce conflict for . in state 98 resolved as shift
WARNING: shift/reduce conflict for + in state 98 resolved as shift
WARNING: shift/reduce conflict for - in state 98 resolved as shift
WARNING: shift/reduce conflict for * in state 98 resolved as shift
WARNING: shift/reduce conflict for / in state 98 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_ADD in state 98 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SUB in state 98 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_MULT in state 98 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_DIV in state 98 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 98 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 98 resolved as shift
WARNING: shift/reduce conflict for < in state 98 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 98 resolved as shift
WARNING: shift/reduce conflict for > in state 98 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 98 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 98 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 98 resolved as shift
WARNING: shift/reduce conflict for COMMAND_ELSE in state 113 resolved as shift
